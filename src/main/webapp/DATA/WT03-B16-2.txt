
<DOC>
<DOCNO>WT03-B16-2</DOCNO>
<DOCOLDNO>IA074-000483-B008-16</DOCOLDNO>
<DOCHDR>
http://acc123.usc.edu:80/Docs/icswg005.html 128.125.48.102 19970125004216 text/html 273838
HTTP/1.1 200 Document follows. 
Server: IBM-Secure-Export-ICS/v970115 Beta
Date: Fri, 24 Jan 1997 21:40:27 GMT
Accept-Ranges: bytes
Content-Type: text/html
Content-Length: 273605
Last-Modified: Wed, 15 Jan 1997 02:01:20 GMT
</DOCHDR>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>
<TITLE>Internet Connection Secure Server Webmaster's Guide</TITLE>
<!-- Begin Header Records  ========================================== -->
<!-- ICSWGMST SCRIPT A converted by B2H R2.4 (262) (CMS-OS2) by       -->
<!-- KETRING at RALVM13 on 21 Dec 1996 at 08:27:39                    -->
<META HTTP-EQUIV="security"  CONTENT="public">
<META HTTP-EQUIV="updated"  CONTENT="Sat, 21 Dec 1996 08:21:42">
<META HTTP-EQUIV="review"  CONTENT="2000">
<META HTTP-EQUIV="expires"  CONTENT="2000">
</HEAD><BODY>
<!-- COMPONENT_NAME: web                                             -->        
<!--                                                                 -->        
<!-- FUNCTIONS:                                                      -->        
<!--                                                                 -->        
<!-- ORIGINS:  27                                                    -->        
<!--                                                                 -->        
<!-- (C) COPYRIGHT International Business Machines Corp. 1995, 1997  -->        
<!-- All Rights Reserved                                             -->        
<!-- Licensed Materials - Property of IBM                            -->        
<!--                                                                 -->        
<!-- US Government Users Restricted Rights - Use, duplication or     -->        
<!-- disclosure restricted by GSA ADP Schedule Contract with IBM Corp. -->      
<!--                                                                 -->        
<!-- End Header Records  ============================================ -->
<A NAME=Top_Of_Page>&nbsp;</A>
<HR>
<H1><A NAME="Header_48" HREF="icswgmst.html#ToC_48">Advanced Configuration</A></H1>
<HR>
<H1><A NAME="HDRCFR" HREF="icswg004.html#PToC_49">Using the configuration file</A></H1>
<P>
This chapter describes each server configuration directive.
If you choose to configure the server
by editing the httpd.cnf configuration file,
use this chapter as a reference.
If you choose to configure your server by using the Configuration
and Administration forms, you do not need to refer to this chapter.
<P>
The directive descriptions are grouped according to function, similar
to the way the Configuration and Administration forms are grouped.
Within each group, the directives are in alphabetical order.
<P>
<P><A HREF="icswgmst.html#ToC">Partial Table-of-Contents</A>
<MENU>
<LI><A NAME=PToC_50 HREF="#Header_50" >Overview of directives</A>
<LI><A NAME=PToC_51 HREF="#HDRBASIC" >Basic - Specify required settings</A>
<MENU>
<LI><A NAME=PToC_52 HREF="#HDRBINDSPE" >BindSpecific - Specify if the server binds to one or all IP addresses</A>
<LI><A NAME=PToC_56 HREF="#HDRDNSLOOK" >DNS-Lookup - Specify whether you want to look up host names of clients</A>
<LI><A NAME=PToC_59 HREF="#HDRHOSTN" >HostName - Specify the fully qualified domain name or IP address for the server</A>
<LI><A NAME=PToC_62 HREF="#HDRIMBEDS" >imbeds - Specify whether server-side includes will be dynamically imbedded</A>
<LI><A NAME=PToC_65 HREF="#HDRPORT" >Port - Specify the port on which you want the server to listen for requests</A>
<LI><A NAME=PToC_68 HREF="#HDRSRVROOT" >ServerRoot - Specify the directory where the server program is installed</A>
</MENU>
<LI><A NAME=PToC_71 HREF="#HDRDIREC" >Directories and Welcome Page - Set viewing options</A>
<MENU>
<LI><A NAME=PToC_72 HREF="#HDRADDBNKI" >AddBlankIcon - Specify the icon URL used to align the heading of directory listings</A>
<LI><A NAME=PToC_75 HREF="#HDRADDDIRI" >AddDirIcon - Specify the icon URL for directories on directory listings</A>
<LI><A NAME=PToC_78 HREF="#HDRADDICON" >AddIcon - Bind an icon to a MIME content-type or encoding-type</A>
<LI><A NAME=PToC_81 HREF="#HDRADDPARI" >AddParentIcon - Specify the icon URL for a parent directory on directory listings</A>
<LI><A NAME=PToC_84 HREF="#HDRADDUNKI" >AddUnknownIcon - Specify the icon URL for unknown file types on directory listings</A>
<LI><A NAME=PToC_87 HREF="#HDRALWAY" >AlwaysWelcome - Specify if a welcome file is returned for all directory requests</A>
<LI><A NAME=PToC_90 HREF="#HDRDIRACCS" >DirAccess - Control directory listings</A>
<LI><A NAME=PToC_93 HREF="#HDRDIRRDME" >DirReadme - Control directory README files</A>
<LI><A NAME=PToC_96 HREF="#HDRDIRSWBR" >DirShowBrackets - Use brackets around alternative text on directory listings</A>
<LI><A NAME=PToC_99 HREF="#HDRDIRSWBY" >DirShowBytes - Show byte count for small files on directory listings</A>
<LI><A NAME=PToC_102 HREF="#HDRDIRSWCS" >DirShowCase - Use case when sorting files on directory listings</A>
<LI><A NAME=PToC_105 HREF="#HDRDIRSWDA" >DirShowDate - Show date last modified on directory listings</A>
<LI><A NAME=PToC_108 HREF="#HDRDIRSWDE" >DirShowDescription - Show descriptions for files on directory listings</A>
<LI><A NAME=PToC_111 HREF="#HDRDIRSWHD" >DirShowHidden - Show hidden files on directory listings</A>
<LI><A NAME=PToC_114 HREF="#HDRDIRSWIC" >DirShowIcons - Show icons in directory listings</A>
<LI><A NAME=PToC_117 HREF="#HDRDIRSWML" >DirShowMaxDescrLength - Set the maximum description length on directory listings</A>
<LI><A NAME=PToC_120 HREF="#HDRDIRSWMX" >DirShowMaxLength - Set the maximum length for file names on directory listings</A>
<LI><A NAME=PToC_123 HREF="#HDRDIRSWMN" >DirShowMinLength - Set the minimum length for file names on directory listings</A>
<LI><A NAME=PToC_126 HREF="#HDRDIRSWSZ" >DirShowSize - Show file size on directory listings</A>
<LI><A NAME=PToC_129 HREF="#HDRICONPAT" >IconPath - Specify the path for the directory listing internal icons</A>
<LI><A NAME=PToC_131 HREF="#HDRWELCO" >Welcome - Specify names of welcome files</A>
<LI><A NAME=PToC_134 HREF="#HDRUSER" >User directories</A>
<LI><A NAME=PToC_135 HREF="#HDRHOMEDIR" >HomeDir - Specify the directory that contains user subdirectories</A>
<LI><A NAME=PToC_138 HREF="#HDRUSERDIR" >UserDir - Specify the name of the accessible subdirectory off of user subdirectories</A>
</MENU>
<LI><A NAME=PToC_141 HREF="#HDRREQUE" >Logging and Reporting - Customize access and error logs and generate access reports</A>
<MENU>
<LI><A NAME=PToC_142 HREF="#HDRACCLOG" >AccessLog - Name the path for the access log file</A>
<LI><A NAME=PToC_145 HREF="#HDRACCLOGA" >AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit</A>
<LI><A NAME=PToC_149 HREF="#HDRALGXURL" >AccessLogExcludeURL - Suppress log entries for specific files or directories</A>
<LI><A NAME=PToC_153 HREF="#HDRALGXMET" >AccessLogExcludeMethod - Suppress log entries for files or directories requested by a given method</A>
<LI><A NAME=PToC_157 HREF="#HDRALGXMIM" >AccessLogExcludeMimeType - Suppress log entries for specific MIME types</A>
<LI><A NAME=PToC_161 HREF="#HDRALGXRET" >AccessLogExcludeReturnCode - Suppress log entries for specific return codes</A>
<LI><A NAME=PToC_165 HREF="#HDRALGEXP" >AccessLogExpire - Remove existing access log files when they reach a given age in days</A>
<LI><A NAME=PToC_169 HREF="#HDRALGSIZ" >AccessLogSizeLimit - Remove existing access log files when they reach a given collective size</A>
<LI><A NAME=PToC_173 HREF="#HDRACRPDES" >AccessReportDescription - Give a short description of the report to be created</A>
<LI><A NAME=PToC_177 HREF="#HDRARPXURL" >AccessReportExcludeURL - Suppress from the report the log entries for specific files or directories</A>
<LI><A NAME=PToC_181 HREF="#HDRARINURL" >AccessReportIncludeURL - Include in the report only log entries for specific files or directories</A>
<LI><A NAME=PToC_185 HREF="#HDRARXHST" >AccessReportExcludeHostName - Suppress from the report the log entries for specific host names</A>
<LI><A NAME=PToC_189 HREF="#HDRARINHST" >AccessReportIncludeHostName - Include in the report only log entries for specific host names</A>
<LI><A NAME=PToC_193 HREF="#HDRARXMET" >AccessReportExcludeMethod - Suppress from the report the log entries of a given method type</A>
<LI><A NAME=PToC_197 HREF="#HDRARXRET" >AccessReportExcludeReturnCode - Suppress from the report the log entries with a given return code</A>
<LI><A NAME=PToC_202 HREF="#HDRARPROOT" >AccessReportRoot - Name the path for the root directory where access log reports are stored</A>
<LI><A NAME=PToC_206 HREF="#HDRARPTEMP" >AccessReportTemplate - Name the report template</A>
<LI><A NAME=PToC_210 HREF="#HDRARPTOP" >AccessReportTopList - Specify the top number of items on</A>
<LI><A NAME=PToC_214 HREF="#HDRAGTLOG" >AgentLog - Name the path for the agent log file</A>
<LI><A NAME=PToC_218 HREF="#HDRCACLOG" >CacheAccessLog - Specify the path for the cache access log files</A>
<LI><A NAME=PToC_222 HREF="#HDRCGILOG" >CgiErrorLog - Name the path for the CGI error log file</A>
<LI><A NAME=PToC_226 HREF="#HDRERRLOG" >ErrorLog - Name the file where you want to log internal server errors</A>
<LI><A NAME=PToC_230 HREF="#HDRERRLGA" >ErrorLogArchive - Remove existing error or CGI error log files or run a user exit</A>
<LI><A NAME=PToC_234 HREF="#HDRERRLGE" >ErrorLogExpire - Remove existing error log files when they reach a given age in days</A>
<LI><A NAME=PToC_238 HREF="#HDRERRLGSZ" >ErrorLogSizeLimit - Remove existing error log files when they reach a given collective size</A>
<LI><A NAME=PToC_242 HREF="#HDRLOGFORM" >LogFormat - Specify common or old log file format</A>
<LI><A NAME=PToC_246 HREF="#HDRLOGTIME" >LogTime - Specify GMT or local time stamps in log files</A>
<LI><A NAME=PToC_250 HREF="#HDRLOGTOGU" >LogToGUI - Specify whether access log writes to GUI</A>
<LI><A NAME=PToC_254 HREF="#HDRNOLOG" >NoLog - Suppress log entries for specific hosts or domains matching a template</A>
<LI><A NAME=PToC_258 HREF="#HDRREFLOG" >RefererLog - Name the path for the referer log file</A>
<LI><A NAME=PToC_262 HREF="#HDRREPDCP" >ReportDataCompressionProgram - Specify path to the compression program</A>
<LI><A NAME=PToC_266 HREF="#HDRREPDUCP" >ReportDataUnCompressionProgram - Specify path to the uncompression program</A>
<LI><A NAME=PToC_270 HREF="#HDRREPDCS" >ReportDataCompressionSuffix - Specify the suffix appended to the compressed file</A>
<LI><A NAME=PToC_274 HREF="#HDRREPPOL" >ReportProcessOldLogs - Check for old logs in the log directory</A>
<LI><A NAME=PToC_278 HREF="#HDRREPDSL" >ReportDataSizeLimit - Remove existing access data files when they reach a given collective size</A>
<LI><A NAME=PToC_282 HREF="#HDRREPDA" >ReportDataArchive - Specify whether to remove existing accessdata files</A>
<LI><A NAME=PToC_287 HREF="#HDRREPDE" >ReportDataExpire - Remove existing access data files when they reach a given age in days</A>
</MENU>
<LI><A NAME=PToC_291 HREF="#HDRDOCUM" >Access control - Set up access control for the server</A>
<MENU>
<LI><A NAME=PToC_292 HREF="#HDRDEFPROT" >DefProt - Specify default protection setup for requests that match a template</A>
<LI><A NAME=PToC_296 HREF="#HDRPROTECT" >Protect - Activate protection setup for requests that match a template</A>
<LI><A NAME=PToC_299 HREF="#HDRPROTECN" >Protection - Define a named protection setup within the configuration file</A>
<LI><A NAME=PToC_302 HREF="#HDRPROTSET" >Protection Subdirectives</A>
<LI><A NAME=PToC_323 HREF="#HDRPROTSSL" >SSL client authentication subdirectives</A>
</MENU>
<LI><A NAME=PToC_326 HREF="#HDRSECUR" >Security - Set up network security for the server</A>
<MENU>
<LI><A NAME=PToC_327 HREF="#HDRKEYFILE" >KeyFile - Set name for key ring file</A>
<LI><A NAME=PToC_330 HREF="#HDRNORMMOD" >NormalMode - Turn port on or off for HTTP</A>
<LI><A NAME=PToC_333 HREF="#HDRSSLAUTH" >SSLClientAuth - Enable SSL client authentication</A>
<LI><A NAME=PToC_336 HREF="#HDRSSLMODE" >SSLMode - Turn port on or off for SSL</A>
<LI><A NAME=PToC_339 HREF="#HDRSSLPORT" >SSLPort - Set port for SSL security</A>
</MENU>
<LI><A NAME=PToC_342 HREF="#HDRMULTIFT" >Multi-format processing - Define file extensions for multi-format processing</A>
<MENU>
<LI><A NAME=PToC_343 HREF="#Header_343" >Multi-Format Processing</A>
<LI><A NAME=PToC_346 HREF="#HDRADDLANG" >AddLanguage - Specify the language of files with particular extensions</A>
<LI><A NAME=PToC_349 HREF="#HDRADDENCD" >AddEncoding - Specify the MIME content encoding of files with particular extensions</A>
<LI><A NAME=PToC_352 HREF="#HDRADDCHAR" >AddCharSet - Specify the character set documents are encoded in</A>
<LI><A NAME=PToC_355 HREF="#HDRADDTYPE" >AddType - Specify the data type of files with particular extensions</A>
<LI><A NAME=PToC_358 HREF="#HDRSUFFXCS" >SuffixCaseSense - Specify whether extension definitions are case sensitive</A>
<LI><A NAME=PToC_361 HREF="#HDRADDCLNT" >AddClient - Specify file extensions for requesting clients</A>
</MENU>
<LI><A NAME=PToC_366 HREF="#HDRMAPPI" >Resource mapping - Redirect URLs</A>
<MENU>
<LI><A NAME=PToC_367 HREF="#HDREXEC" >Exec - Run a CGI program for matching requests</A>
<LI><A NAME=PToC_370 HREF="#HDRFAIL" >Fail - Reject matching requests</A>
<LI><A NAME=PToC_373 HREF="#HDRMAP" >Map - Change matching requests to a new result string</A>
<LI><A NAME=PToC_376 HREF="#HDRPASS" >Pass - Accept matching requests</A>
<LI><A NAME=PToC_379 HREF="#HDRREDIREC" >Redirect - Send matching requests to another server</A>
<LI><A NAME=PToC_382 HREF="#HDRINHERIT" >InheritEnv - Specify which environment variables are inherited by CGI programs</A>
<LI><A NAME=PToC_385 HREF="#HDRDSNHERT" >DisInheritEnv - Specify which environment variables are disinherited by CGI programs</A>
</MENU>
<LI><A NAME=PToC_388 HREF="#HDRERRMSGS" >Error message customization - Customize error messages the server returns to clients</A>
<MENU>
<LI><A NAME=PToC_389 HREF="#HDRERRPAGE" >ErrorPage - Specify a customized message for a particular error condition</A>
</MENU>
<LI><A NAME=PToC_393 HREF="#HDRTIME" >Timeouts - Close connections automatically</A>
<MENU>
<LI><A NAME=PToC_394 HREF="#HDRINPTIMO" >InputTimeout - Specify input timeout setting</A>
<LI><A NAME=PToC_397 HREF="#HDROUTTIMO" >OutputTimeout - Specify output timeout setting</A>
<LI><A NAME=PToC_400 HREF="#HDRSCRTIMO" >ScriptTimeout - Specify script timeout setting</A>
</MENU>
<LI><A NAME=PToC_403 HREF="#HDRMETHO" >Methods - Set method acceptance</A>
<MENU>
<LI><A NAME=PToC_404 HREF="#HDRDISABLE" >Disable - Disable HTTP methods</A>
<LI><A NAME=PToC_407 HREF="#HDRENABLE" >Enable - Enable HTTP methods</A>
</MENU>
<LI><A NAME=PToC_411 HREF="#HDRMETA" >Meta-Information - Name meta-information files and directories</A>
<MENU>
<LI><A NAME=PToC_412 HREF="#HDRMETADIR" >MetaDir - Specify name of subdirectory for meta-information files</A>
<LI><A NAME=PToC_415 HREF="#HDRMETASUF" >MetaSuffix - Specify the extension for meta-information files</A>
</MENU>
<LI><A NAME=PToC_418 HREF="#HDRAPISETS" >ICAPI application processing - Specify ICAPI applications for request processing</A>
<MENU>
<LI><A NAME=PToC_419 HREF="#HDRSERVERI" >ServerInit - Customize the Server Initialization step</A>
<LI><A NAME=PToC_422 HREF="#HDRPREEXIT" >PreExit - Customize the PreExit step</A>
<LI><A NAME=PToC_425 HREF="#HDRAUTHENC" >Authentication - Customize the Authentication step</A>
<LI><A NAME=PToC_428 HREF="#HDRNAMETRA" >NameTrans - Customize the Name Translation step</A>
<LI><A NAME=PToC_431 HREF="#HDRAUTHORI" >Authorization - Customize the Authorization step</A>
<LI><A NAME=PToC_434 HREF="#HDROBJECTT" >ObjectType - Customize the Object Type step</A>
<LI><A NAME=PToC_437 HREF="#HDRSERVICE" >Service - Customize the Service step</A>
<LI><A NAME=PToC_440 HREF="#HDRPICSDBL" >PICSDBLookup - Customize the PICS label retrieval step</A>
<LI><A NAME=PToC_443 HREF="#HDRDATAFIL" >DataFilter - Customize the Data Filter step</A>
<LI><A NAME=PToC_446 HREF="#HDRLOG" >Log - Customize the Log step</A>
<LI><A NAME=PToC_449 HREF="#HDRERROR" >Error - Customize the Error step</A>
<LI><A NAME=PToC_452 HREF="#HDRPSTEXIT" >PostExit - Customize the PostExit step</A>
<LI><A NAME=PToC_455 HREF="#HDRSERVERT" >ServerTerm - Customize the Server Termination step</A>
</MENU>
<LI><A NAME=PToC_458 HREF="#HDRJAVASPT" >Servlet API Support - Configure the server for Java servlet API support</A>
<MENU>
<LI><A NAME=PToC_459 HREF="#HDRSRVENAB" >EnableJavaServletSupport - Enable the server to support Java servlets</A>
<LI><A NAME=PToC_462 HREF="#HDRJVMAXTH" >MaxActiveJavaThreads - Specify threads for request processing</A>
<LI><A NAME=PToC_465 HREF="#HDRSERVLOG" >ServletLog - Specify a log file for Java servlet messages</A>
<LI><A NAME=PToC_468 HREF="#HDRSRVUDIR" >ServletDir - Specify the directory for Java servlets</A>
<LI><A NAME=PToC_471 HREF="#HDRSERVLET" >Servlet - Specify a servlet's initialization parameters</A>
</MENU>
<LI><A NAME=PToC_474 HREF="#HDRPROXSET" >Proxy server settings - Configure server as a proxy</A>
<MENU>
<LI><A NAME=PToC_475 HREF="#HDRCACHDFE" >CacheDefaultExpiry - Specify default expiration time for files that do not have an expiration date</A>
<LI><A NAME=PToC_478 HREF="#HDRCACHXCK" >CacheExpiryCheck - Turn cache expirations off</A>
<LI><A NAME=PToC_481 HREF="#HDRCACHLMF" >CacheLastModifiedFactor - Specify fraction of Last-Modified time to be used for determining expiration date</A>
<LI><A NAME=PToC_484 HREF="#HDRCACHLM1" >CacheLimit_1 - Specify lower limit for cached file size</A>
<LI><A NAME=PToC_487 HREF="#HDRCACHLM2" >CacheLimit_2 - Specify upper limit for cached file size</A>
<LI><A NAME=PToC_490 HREF="#HDRCACHLTO" >CacheLockTimeOut - Specify how long a file being cached can remain locked</A>
<LI><A NAME=PToC_493 HREF="#HDRCACHNOC" >CacheNoConnect - Specify stand alone cache mode</A>
<LI><A NAME=PToC_496 HREF="#HDRCACHONY" >CacheOnly - Cache only files with URLs that match a template</A>
<LI><A NAME=PToC_499 HREF="#HDRCACHROT" >CacheRoot - Specify cache root directory</A>
<LI><A NAME=PToC_502 HREF="#HDRCACHSIZ" >CacheSize - Specify cache size</A>
<LI><A NAME=PToC_505 HREF="#HDRCACHUNU" >CacheUnused - Specify how long to keep unused cached files that match a template</A>
<LI><A NAME=PToC_508 HREF="#HDRCACHING" >Caching - Turn proxy caching on/off</A>
<LI><A NAME=PToC_511 HREF="#HDRFTPPROX" >ftp_proxy - Specify a proxy server for this proxy to connect to for FTP requests</A>
<LI><A NAME=PToC_514 HREF="#HDRGC" >Gc - Turn garbage collection on or off</A>
<LI><A NAME=PToC_517 HREF="#HDRGCDAILY" >GcDailyGc - Specify a daily time for garbage collection</A>
<LI><A NAME=PToC_520 HREF="#HDRGCMEMUS" >GcMemUsage - Specify how much memory to use for garbage collection</A>
<LI><A NAME=PToC_523 HREF="#HDRGOPHPXY" >gopher_proxy - Specify a proxy server for this proxy to connect to for Gopher requests</A>
<LI><A NAME=PToC_526 HREF="#HDRHTTPRXY" >http_proxy - Specify a proxy server for this proxy to connect to for HTTP requests</A>
<LI><A NAME=PToC_529 HREF="#HDRMAXCLBU" >MaxContentLengthBuffer - Set the size of the buffer for dynamic data generated by the server</A>
<LI><A NAME=PToC_532 HREF="#HDRNOPROXY" >no_proxy - Connect directly to domains matching templates</A>
<LI><A NAME=PToC_535 HREF="#HDRNOCACH" >NoCaching - Do not cache files with URLs that match a template</A>
<LI><A NAME=PToC_538 HREF="#HDRSOCKSER" >SocksServer - Specify a Socks server through which the proxy will pass requests</A>
<LI><A NAME=PToC_542 HREF="#HDRWAISPXY" >wais_proxy - Specify a proxy server for this proxy to connect to for WAIS requests</A>
</MENU>
<LI><A NAME=PToC_545 HREF="#HDRPERFO" >Performance settings - Define performance settings</A>
<MENU>
<LI><A NAME=PToC_546 HREF="#HDRCACHLOF" >CacheLocalFile - Specify files you want to load in memory at start up</A>
<LI><A NAME=PToC_549 HREF="#HDRCACHMXB" >CacheLocalMaxBytes - Specify maximum amount of memory to use for file caching</A>
<LI><A NAME=PToC_552 HREF="#HDRCACHMXF" >CacheLocalMaxFiles - Specify the maximum number of files for caching</A>
<LI><A NAME=PToC_555 HREF="#HDRLVLOCCA" >LiveLocalCache - Specify whether the cache is updated when a cached file is modified</A>
<LI><A NAME=PToC_558 HREF="#HDRMAXACTH" >MaxActiveThreads - Specify the maximum number of threads to have active</A>
<LI><A NAME=PToC_561 HREF="#HDRSRVPRIO" >ServerPriority - Specify the priority you want your server to have on your system</A>
<LI><A NAME=PToC_564 HREF="#HDRMAXPERS" >MaxPersistRequest - Specify the maximum number of requests to receive on a persistent connection</A>
<LI><A NAME=PToC_567 HREF="#HDRPERSIST" >PersistTimeout - Specify time to wait for the client to send another request</A>
<LI><A NAME=PToC_570 HREF="#HDRUSEACLS" >UseACLs - Specify whether ACL files will be checked</A>
<LI><A NAME=PToC_573 HREF="#HDRUSEMETA" >UseMetaFiles - Specify whether meta files will be used</A>
</MENU>
<LI><A NAME=PToC_576 HREF="#HDRSYSMGT" >System Management - Define system management settings</A>
<MENU>
<LI><A NAME=PToC_577 HREF="#HDRSCOMNAM" >SNMPCommunityName - Providing a security password for SNMP</A>
<LI><A NAME=PToC_581 HREF="#HDRWEBMEMA" >WebMasterEmail - Creating an e-mail address to receive SNMP problem reports</A>
</MENU></MENU><HR><P>
<HR>
<H2><A NAME="Header_50" HREF="#PToC_50">Overview of directives</A></H2>
Overview
<P>
Each directive description includes:
<UL>
<P><LI>Heading with the directive name and a brief description
<P><LI>Usage instructions
<P><LI>Example of how the directive might appear in the configuration
file
<P>Each configuration directive follows the same general syntax:
<PRE>
   DirectiveName <VAR>value</VAR>
</PRE>
<P><LI>Default value or values of the directive
<P>These are the original values coded in the default configuration file.
(Change only the parts of the configuration file
that you want to be different from the default settings.)
</UL>
<P>For a list of the new directives added in Version 4.2,
see page <A HREF="icswg002.html#SPTNEWDIRS">reference #1</A>.
<P>Some directives (the <VAR>value</VAR> portion) contain
templates for requests, path names, or host names.
Except where otherwise indicated,
you can use the asterisk (*) character in templates.
For the template to be matched, an asterisk can be replaced by
any character string or single character.
<P>
The examples and defaults in this chapter
use the backslash (\) character when showing a path name.
In the configuration file, you can actually use either the
backslash or forward slash (/) character when specifying a path name.
Always use the forward slash (/) when specifying a URL or request
template.
<P>Several configuration directives allow you
to specify a positive string.
You can enter any of the following words&#58;
<UL COMPACT>
<LI>Yes
<LI>On
<LI>OK
<LI>Enable
</UL>
<P>Several configuration directives allow you
to specify a negative string.
You can enter any of the following words&#58;
<UL COMPACT>
<LI>No
<LI>Off
<LI>None
<LI>Disable
</UL>
<P>Several configuration directives allow you to specify
an amount of time.
You can specify any combination of&#58;
<DL COMPACT>
<DT><B>hh
</B><DD>hours
<DT><B>hh&#58;mm
</B><DD>hours and minutes
<DT><B>hh&#58;mm&#58;ss
</B><DD>hours, minutes, and seconds
<DT><B>n years
</B><DD>number of 365-day years
<DT><B>n months
</B><DD>number of 30-day months
<DT><B>n weeks
</B><DD>number of 7-day weeks
<DT><B>n days
</B><DD>number of 24-hour days
<DT><B>n hours
</B><DD>number of 60-minute hours
<DT><B>n minutes
</B><DD>number of 60-second minutes
<DT><B>n seconds
</B><DD>number of seconds
</DL>
<P>All of your entries will be converted to seconds and added together.
<HR>
<H2><A NAME="HDRBASIC" HREF="#PToC_51">Basic - Specify required settings</A></H2>
Basic
<P>
Use the directives described in this section to
control your server&#39;s basic configuration settings.
<P>
<H3><A NAME="HDRBINDSPE" HREF="#PToC_52">BindSpecific - Specify if the server binds to one or all IP addresses</A></H3>
<P>
Use this directive on a multi-networking system
to run a different server on each IP address.
All the servers may listen on the same port.
<P>
If you specify On, the server binds to the IP address specified in the
HostName directive only, instead of binding to all local IP addresses.
<P>
If this directive has not been specified, the server binds to the
default HostName.
<P>
If you change this directive, you must stop the server
and then start it again.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_53">Example</A></H5>
<PRE>
   BindSpecific On
</PRE>
<P>
<H5><A NAME="Header_54">Initial configuration file setting</A></H5>
<P>
None.
<P>
<H5><A NAME="Header_55">Program default setting</A></H5>
<PRE>
   BindSpecific Off
</PRE>
<P>
<H3><A NAME="HDRDNSLOOK" HREF="#PToC_56">DNS-Lookup - Specify whether you want to look up host names of clients</A></H3>
<P>
Use this directive to specify whether you want your server to look up
the host name of requesting clients.
<P>
The value you use affects the following things about how your server
works:
<UL>
<P><LI>The performance of the server.
Using the default value of <TT>Off</TT> improves
the performance and response time
of the server because it does not use resources
to perform the host name lookup.
<P><LI>The information your server records about
clients when writing to log files.
<UL COMPACT>
<LI><TT>Off</TT> - Clients identified by IP address
<LI><TT>On</TT> - Clients identified by host name
</UL>
<P><LI>Whether you can use host names on address templates in
protection setups, server group files, and ACL files.
<UL COMPACT>
<LI><TT>Off</TT> - Cannot use host names on address templates; must
use IP addresses
<LI><TT>On</TT> - Can use host names on address templates; cannot use
IP addresses
</UL>
</UL>
<P>
<H5><A NAME="Header_57">Example</A></H5>
<PRE>
   DNS-Lookup   On
</PRE>
<P>
<H5><A NAME="Header_58">Initial configuration file setting</A></H5>
<PRE>
   DNS-Lookup   Off
</PRE>
<P>
<H3><A NAME="HDRHOSTN" HREF="#PToC_59">HostName - Specify the fully qualified domain name or IP address for the server</A></H3>
<P>
Use this directive to specify the domain name or
an IP address returned to clients from document requests.
If you specify a domain name, a domain name server
must be able to resolve the name into an IP address.
If you specify an IP address, the domain name server is not needed
or accessed.
<P>
<H5><A NAME="Header_60">Example</A></H5>
<PRE>
   HostName <VAR>name</VAR> or <VAR>IP address</VAR>
</PRE>
<P>
<H5><A NAME="Header_61">Initial Configuration File Setting</A></H5>
<P>
The name you specified for <B>Host name</B> during installation.
The installation default is the default host name defined in your
domain name server.
If you remove this directive, the default host name defined in your
domain name server is used.
<P>
<H3><A NAME="HDRIMBEDS" HREF="#PToC_62">imbeds - Specify whether server-side includes will be dynamically imbedded</A></H3>
<P>
Use this directive to specify if you want server-side include
processing to be performed for documents served from the file system,
CGI programs, or both.
Server-side include processing is done on documents
with a content type of text/x-ssi-html.
Optionally, you can specify that server-side include processing
also be done for documents with a content type of text/html.
For more information about content types,
see <A HREF="#HDRADDTYPE">"AddType - Specify the data type of files with particular extensions"</A>.
<P>
You can use server-side includes to dynamically insert
information, such as the date, the size of a file, the last
change date of a file, CGI or server-side include environment
variables, or text documents into the document being returned.
For more information on using server-side includes,
see <A HREF="icswg007.html#HDRSSI">"Using server-side includes to insert information into CGI programs and HTML documents"</A>.
<P>
Server-side include processing causes the server to search your
documents for special commands each time they are served.
This can affect the server's performance and
slow down response time to clients.
<P>
The format of this directive is:
<P>
<PRE>
imbeds <VAR>source</VAR> &#91;<VAR>type</VAR>&#93;
</PRE>
<P>
<VAR>source</VAR> can be:
<DL>
<P><DT><B>on
</B><DD>
Server-side include processing is done for documents from the
file system and from CGI programs.
<P>
<P><DT><B>files
</B><DD>
Server-side include processing is only done for documents
from the file system.
<P>
<P><DT><B>cgi
</B><DD>
Server-side include processing is only done for documents
returned by CGI programs.
<P><DT><B>off
</B><DD>
Server-side include processing is not done for any documents.
</DL>
<P>The server checks the content type of each file it retrieves
and the output of each CGI program it processes.
<P>
Server-side include processing is normally done only
for documents having a content type of text/x-ssi/html.
However, you can specify that documents with
a content type of text/html be processed for server-side includes.
<P>
<VAR>type</VAR> can be:
<DL>
<P><DT><B>SSIOnly
</B><DD>Server-side include processing is done for documents
with a content type of text/x-ssi-html.
<P><DT><B>html
</B><DD>Server-side include processing is done for documents
with a content type of text/html and a content type of text/x-ssi-html.
</DL>
<P><B>Important migration note:</B>  In previous releases,
you could specify that documents with a specific
extension, such as .html, .htm. or .shtml,
be processed for server-side includes.
In this release, the server treats html, .html, and .htm as
<B>html</B>.
Anything else is treated as <B>SSIOnly</B>.
<P>
Each extension must have an AddType directive defined with the
correct content type.
If you use extensions other than .htm or .html, make
sure an AddType directive is defined with a content type
of text/x-ssi/html.
<P>
<H5><A NAME="Header_63">Initial configuration file setting</A></H5>
<PRE>
   imbeds on SSIOnly
</PRE>
<P>
<H5><A NAME="Header_64">Program default setting</A></H5>
<PRE>
   imbeds off SSIOnly
</PRE>
<P>
<H3><A NAME="HDRPORT" HREF="#PToC_65">Port - Specify the port on which you want the server to listen for requests</A></H3>
<P>
Use this directive to specify the port number
the server should listen to for requests.
The standard port number for HTTP is 80.
Other port numbers less than 1024 are reserved
for other TCP/IP applications and should not be used.
Common ports used for proxy Web servers are 8080 and 8008.
<P>
When a port other than 80 is used, clients are required
to include a specific port number on requests to the server.
The port number is preceded by a colon and
placed after the host name on the URL.
For example, from the browser, the URL
<PRE>
   http://www.turfco.com&#58;8008/
</PRE>
requests the default welcome page from a host named
www.turfco.com that is listening on port 8008.
<P>
You can use the -p option on the httpd command
to override this setting when starting the server.
<P>
If you change this directive, you must stop your server and then
start it again for the change to take effect.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_66">Example</A></H5>
<PRE>
   Port 8080
</PRE>
<P>
<H5><A NAME="Header_67">Initial configuration file setting</A></H5>
<P>The number you specified for Port during installation.
The installation default is 80.
<P>
<H3><A NAME="HDRSRVROOT" HREF="#PToC_68">ServerRoot - Specify the directory where the server program is installed</A></H3>
<P>Use this directive to specify the
directory where the server program is installed.
<P>
<H5><A NAME="Header_69">Example</A></H5>
<PRE>
   ServerRoot   d&#58;\webserve\BIN
</PRE>
<P>
<H5><A NAME="Header_70">Initial configuration file setting</A></H5>
<P>The directory name you specified for
<B>Executables directory</B> during installation.
The installation default is:
<PRE>
   ServerRoot  C&#58;\WWW\BIN
</PRE>
<P><B>Note: </B>PASS and EXEC rules may be independent of this directory.
<HR>
<H2><A NAME="HDRDIREC" HREF="#PToC_71">Directories and Welcome Page - Set viewing options</A></H2>
Directories and Welcome Page
<P>
Use the directives described in this section to control how
your server responds to requests containing a directory name.
You can have the server search the directory for a welcome file to
return, or you can have the server generate a directory listing.
<P>
By default, the server first looks for a welcome file.
If no welcome file is present, the server displays a directory listing.
Configuration settings control how directory listings appear
and the icons that the listings use.
<P>
The server provides a set of default
icons to use for directory listings.
You can replace these icons with others using
some of the directives described in this section.
<P>
<H3><A NAME="HDRADDBNKI" HREF="#PToC_72">AddBlankIcon - Specify the icon URL used to align the heading of directory listings</A></H3>
<P>
Use this directive to specify an icon to use
for aligning the heading on directory listings.
This can either be a blank icon or another icon
you want to appear on the headings of your directory listings.
For proper alignment, the icon you use must be the same size
as the other icons you are using on your directory listings.
The format of the directive is:
<PRE>
   AddBlankIcon   <VAR>icon-URL   alternate-text</VAR>
</PRE>
<DL>
<P><DT><VAR>icon-URL</VAR>
<P><DD>The last part of the URL for the icon.
The server adds this value to the value of the IconPath
directive to form the complete URL request.
If the request is for a local file, the server translates the
request through the mapping directives.
For the icon to be retrieved, the mapping directives
must allow the request to be passed.
<P>
If you are using the server as a proxy, the complete request must be
a fully qualified URL pointing to your server.
<P><DT><VAR>alternate-text</VAR>
<P><DD>The alternate text to use for the icon if the requesting
browser is not displaying graphics.
</DL>
<P>
<H5><A NAME="Header_73">Example</A></H5>
<PRE>
   AddBlankIcon logo.gif  logo
</PRE>
<P>
<H5><A NAME="Header_74">Initial configuration file setting</A></H5>
<PRE>
   AddBlankIcon   blank.gif
</PRE>
<P>
The default does not specify alternative text since the icon is blank.
<P>
<H3><A NAME="HDRADDDIRI" HREF="#PToC_75">AddDirIcon - Specify the icon URL for directories on directory listings</A></H3>
<P>
Use this directive to specify an icon for representing
a directory on a directory listing.
The format of the directive is:
<PRE>
   AddDirIcon   <VAR>icon-URL   alternate-text</VAR>
</PRE>
<DL>
<P><DT><VAR>icon-URL</VAR>
<P><DD>The last part of the URL for the icon.
The server adds this value to the value of the IconPath
directive to form the complete URL request.
If the request is for a local file, the server translates the
request through the mapping directives.
For the icon to be retrieved, the mapping directives
must allow the request to be passed.
<P>
If you are using the server as a proxy, the complete request must be
a fully qualified URL pointing to your server.
You must map the URL to a local file and make sure
that the mapping directives allow the URL to be passed.
<P><DT><VAR>alternate-text</VAR>
<P><DD>The alternate text to use for the icon if the requesting
browser is not displaying graphics.
</DL>
<P>
<H5><A NAME="Header_76">Example</A></H5>
<PRE>
   AddDirIcon  direct.gif  DIR
</PRE>
<P>
<H5><A NAME="Header_77">Initial configuration file setting</A></H5>
<PRE>
   AddDirIcon  dir.gif    DIR
</PRE>
<P>
<H3><A NAME="HDRADDICON" HREF="#PToC_78">AddIcon - Bind an icon to a MIME content-type or encoding-type</A></H3>
<P>
Use this directive to specify icons for representing files
with a specific MIME content-type or encoding-type.
The server uses the icons on directory listings.
The format of the directive is:
<PRE>
   AddIcon   <VAR>icon-URL   alternate-text   type-template</VAR>
</PRE>
<DL>
<P><DT><VAR>icon-URL</VAR>
<P><DD>The last part of the URL for the icon.
The server adds this value to the value of the IconPath
directive to form the complete URL request.
If the request is for a local file, the server translates the
request through the mapping directives.
For the icon to be retrieved, the mapping directives
must allow the request to be passed.
<P>
If you are using the server as a proxy, the complete request must be
a fully qualified URL pointing to your server.
You must map the URL to a local file and make sure
that the mapping directives allow the URL to be passed.
<P><DT><VAR>alternate-text</VAR>
<P><DD>The alternate text to use for the icon if the requesting
browser is not displaying graphics.
<P><DT><VAR>type-template</VAR>
<P><DD>Either a MIME content-type or encoding-type template.
Content-type templates always contain a slash.
Encoding-type templates never have a slash.
</DL>
<P>
<H5><A NAME="Header_79">Example</A></H5>
<PRE>
   AddIcon   movie.gif    video   video/*
</PRE>
<P>
<H5><A NAME="Header_80">Initial configuration file setting</A></H5>
<PRE>
   AddIcon   binary.gif          BIN     binary
   AddIcon   text.gif            TXT     text/*
   AddIcon   image.gif           IMG     image/*
   AddIcon   movie.gif           MOV     video/*
   AddIcon   sound.gif           AU      audio/*
   AddIcon   tar.gif             AR      multipart/*tar
   AddIcon   compress.gif        MP      x-compress x-gzip
</PRE>
<P>
<H3><A NAME="HDRADDPARI" HREF="#PToC_81">AddParentIcon - Specify the icon URL for a parent directory on directory listings</A></H3>
<P>
Use this directive to specify an icon for representing
a parent directory on a directory listing.
The format of the directive is:
<PRE>
   AddParentIcon   <VAR>icon-URL   alternate-text</VAR>
</PRE>
<DL>
<P><DT><VAR>icon-URL</VAR>
<P><DD>The last part of the URL for the icon.
The server adds this value to the value of the IconPath
directive to form the complete URL request.
If the request is for a local file, the server translates the
request through the mapping directives.
For the icon to be retrieved, the mapping directives
must allow the request to be passed.
<P>
If you are using the server as a proxy, the complete request must be
a fully qualified URL pointing to your server.
You must map the URL to a local file and make sure
that the mapping directives allow the URL to be passed.
<P><DT><VAR>alternate-text</VAR>
<P><DD>The alternate text to use for the icon if the requesting
browser is not displaying graphics.
</DL>
<P>
<H5><A NAME="Header_82">Example</A></H5>
<PRE>
   AddParentIcon  parent.gif  UP
</PRE>
<P>
<H5><A NAME="Header_83">Initial configuration file setting</A></H5>
<PRE>
   AddParentIcon  back.gif    UP
</PRE>
<P>
<H3><A NAME="HDRADDUNKI" HREF="#PToC_84">AddUnknownIcon - Specify the icon URL for unknown file types on directory listings</A></H3>
<P>
Use this directive to specify an icon for representing
files with an unknown file type on a directory listing.
The format of the directive is:
<PRE>
   AddUnknownIcon   <VAR>icon-URL   alternate-text</VAR>
</PRE>
<DL>
<P><DT><VAR>icon-URL</VAR>
<P><DD>The last part of the URL for the icon.
The server adds this value to the value of the IconPath
directive to form the complete URL request.
If the request is for a local file, the server translates the
request through the mapping directives.
For the icon to be retrieved, the mapping directives
must allow the request to be passed.
<P>
If you are using the server as a proxy, the complete request must be
a fully qualified URL pointing to your server.
You must map the URL to a local file and make sure that
the mapping directives allow the URL to be passed.
<P><DT><VAR>alternate-text</VAR>
<P><DD>The alternate text to use for the icon if the requesting
browser is not displaying graphics.
</DL>
<P>
<H5><A NAME="Header_85">Example</A></H5>
<PRE>
   AddUnknownIcon saywhat.gif  huh
</PRE>
<P>
<H5><A NAME="Header_86">Initial configuration file setting</A></H5>
<PRE>
    AddUnknownIcon unknown.gif   ???
</PRE>
<P>
<H3><A NAME="HDRALWAY" HREF="#PToC_87">AlwaysWelcome - Specify if a welcome file is returned for all directory requests</A></H3>
<P>
Use this directive to specify if you want your server to always handle
directory requests by first searching the directory for a welcome file.
<P>
The default value is <TT>On</TT>, which means that the server always
searches the directory for a welcome file.
The Welcome directive specifies the names of the files that
the server recognizes as welcome files.
<P>
If you change the value to <TT>Off</TT>,
the server first checks the last character
of directory requests for the slash (/) character.
If a directory request ends with a slash, the server searches
the directory for a welcome file.
If a directory request does not end with a slash, the server
attempts to return a directory listing.
<P>
If the server does not find a welcome file, or AlwaysWelcome
is set to Off and the directory request does not end in a slash,
the DirAccess directive controls whether or not the server
responds to the request with a directory listing.
<P><B>Note: </B>Setting AlwaysWelcome to Off does not affect requests that contain
only your server name without a directory name.
The server will always handle these requests by looking in your document
root directory for a welcome file.
The server cannot generate a directory listing for the document
root directory.
<P>
<H5><A NAME="Header_88">Example</A></H5>
<PRE>
   AlwaysWelcome Off
</PRE>
<P>
<H5><A NAME="Header_89">Initial configuration file setting</A></H5>
<PRE>
   AlwaysWelcome On
</PRE>
<P>
<H3><A NAME="HDRDIRACCS" HREF="#PToC_90">DirAccess - Control directory listings</A></H3>
<P>
Use this directive to specify whether you want your server
to return directory listings when requested.
The values on the Welcome and AlwaysWelcome directives determine
when a request is interpreted as a request for a directory listing.
<P>
The default value is <TT>On</TT>, which means that the server
can return directory listings for all directories and subdirectories.
If you want to control which directories and subdirectories the
server can return directory listings for, use:
<PRE>
   DirAccess   Selective
</PRE>
<P>
If you change the value to <TT>Off</TT>,
the server will not return directory listings.
<P>
If you change the value to <TT>Selective</TT>,
the server will return directory listings for any
directory that contains a file named &#46;www_browsable.
The contents of the &#46;www_browsable file
are not important; the server only checks for its existence.
<P>
<H5><A NAME="Header_91">Examples:</A></H5>
<PRE>
   DirAccess Off
   DirAccess Selective
</PRE>
<P>
<H5><A NAME="Header_92">Initial configuration file setting</A></H5>
<PRE>
   DirAccess On
</PRE>
<P>
<H3><A NAME="HDRDIRRDME" HREF="#PToC_93">DirReadme - Control directory README files</A></H3>
<P>
Use this directive to specify if and where you want
your server to display directory listing README files.
<P>
The default value is <TT>Top</TT>, which means that
when the server returns a directory listing,
it searches the directory for a file named README.
If README is found, the server puts the contents of the
file at the top of the directory listing.
<P>
If you change the value to <TT>Bottom</TT>,
the server searches for a README file, but puts the contents
at the bottom of the directory listing.
<P>
If you change the value to <TT>Off</TT>, the server
does not search the directory for a README file.
<P>
<H5><A NAME="Header_94">Examples:</A></H5>
<PRE>
   DirReadme Bottom
   DirReadme Off
</PRE>
<P>
<H5><A NAME="Header_95">Initial configuration file setting</A></H5>
<PRE>
   DirReadme Top
</PRE>
<P>
<H3><A NAME="HDRDIRSWBR" HREF="#PToC_96">DirShowBrackets - Use brackets around alternative text on directory listings</A></H3>
<P>
Use this directive to specify whether you want the server to put
brackets around alternative text on directory listings.
The directives that specify directory listing icons also
contain alternate text.
The alternate text is used in place of an icon
if the requesting browser is not displaying graphics.
<P>
<H5><A NAME="Header_97">Example</A></H5>
<PRE>
   DirShowBrackets Off
</PRE>
<P>
<H5><A NAME="Header_98">Initial configuration file setting</A></H5>
<PRE>
   DirShowBrackets On
</PRE>
<P>
<H3><A NAME="HDRDIRSWBY" HREF="#PToC_99">DirShowBytes - Show byte count for small files on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings should include
the exact byte count for files smaller than 1 KB.
<P>
A value of <TT>Off</TT> means the directory listing shows a size of
1 KB for all files that are 1 KB or smaller.
<P>
<H5><A NAME="Header_100">Example</A></H5>
<PRE>
   DirShowBytes On
</PRE>
<P>
<H5><A NAME="Header_101">Initial configuration file setting</A></H5>
<PRE>
   DirShowBytes Off
</PRE>
<P>
<H3><A NAME="HDRDIRSWCS" HREF="#PToC_102">DirShowCase - Use case when sorting files on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings
should distinguish between uppercase and lowercase letters
when sorting file names.
<P>
A value of <TT>On</TT> means uppercase letters are placed
before lowercase letters.
<P>
<H5><A NAME="Header_103">Example</A></H5>
<PRE>
   DirShowCase Off
</PRE>
<P>
<H5><A NAME="Header_104">Initial configuration file setting</A></H5>
<PRE>
   DirShowCase On
</PRE>
<P>
<H3><A NAME="HDRDIRSWDA" HREF="#PToC_105">DirShowDate - Show date last modified on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings should include
the last modification date for each file.
<P>
<H5><A NAME="Header_106">Example</A></H5>
<PRE>
   DirShowDate Off
</PRE>
<P>
<H5><A NAME="Header_107">Initial configuration file setting</A></H5>
<PRE>
   DirShowDate On
</PRE>
<P>
<H3><A NAME="HDRDIRSWDE" HREF="#PToC_108">DirShowDescription - Show descriptions for files on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings should include
descriptions for HTML files.
The descriptions are taken from the files&#39; HTML &lt;title&gt; tags.
<P>
<H5><A NAME="Header_109">Example</A></H5>
<PRE>
   DirShowDescription Off
</PRE>
<P>
<H5><A NAME="Header_110">Initial configuration file setting</A></H5>
<PRE>
   DirShowDescription On
</PRE>
<P>
<H3><A NAME="HDRDIRSWHD" HREF="#PToC_111">DirShowHidden - Show hidden files on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings should include
any hidden files on the directory.
<P>
The server considers the following to be hidden files:
<UL COMPACT>
<LI>Any file with the hidden attribute turned on
<LI>Any file that has a name beginning with a period (&#46;)
</UL>
<P>
<H5><A NAME="Header_112">Example</A></H5>
<PRE>
   DirShowHidden Off
</PRE>
<P>
<H5><A NAME="Header_113">Initial configuration file setting</A></H5>
<PRE>
   DirShowHidden On
</PRE>
<P>
<H3><A NAME="HDRDIRSWIC" HREF="#PToC_114">DirShowIcons - Show icons in directory listings</A></H3>
<P>
Use this directive to specify whether you want your server
to include icons in directory listings.
Icons can be used to provide a graphic
representation of the content type of the files in the listing.
The icons themselves are defined by the AddBlankIcon, AddDirIcon,
AddIcon, AddParentIcon, and AddUnknownIcon directives.
<P>
<H5><A NAME="Header_115">Example</A></H5>
<PRE>
   DirShowIcons Off
</PRE>
<P>
<H5><A NAME="Header_116">Initial configuration file setting</A></H5>
<PRE>
   DirShowIcons On
</PRE>
<P>
<H3><A NAME="HDRDIRSWML" HREF="#PToC_117">DirShowMaxDescrLength - Set the maximum description length on directory listings</A></H3>
<P>
Use this directive to set the maximum number of characters
to show in the description field on directory listings.
<P>
<H5><A NAME="Header_118">Example</A></H5>
<PRE>
   DirShowMaxDescrLength 30
</PRE>
<P>
<H5><A NAME="Header_119">Initial configuration file setting</A></H5>
<PRE>
   DirShowMaxDescrLength 25
</PRE>
<P>
<H3><A NAME="HDRDIRSWMX" HREF="#PToC_120">DirShowMaxLength - Set the maximum length for file names on directory listings</A></H3>
<P>
Use this directive to set the maximum number of characters
that will be used for file names on directory listings.
<P>
<H5><A NAME="Header_121">Example</A></H5>
<PRE>
   DirShowMaxLength 30
</PRE>
<P>
<H5><A NAME="Header_122">Initial configuration file setting</A></H5>
<PRE>
   DirShowMaxLength 25
</PRE>
<P>
<H3><A NAME="HDRDIRSWMN" HREF="#PToC_123">DirShowMinLength - Set the minimum length for file names on directory listings</A></H3>
<P>
Use this directive to set the minimum number of characters
that will always be reserved for file names on directory listings.
File names in the directory can exceed this number.  However,
file names cannot be longer than the number specified on the
DirShowMaxLength directive.
<P>
<H5><A NAME="Header_124">Example</A></H5>
<PRE>
   DirShowMinLength 10
</PRE>
<P>
<H5><A NAME="Header_125">Initial configuration file setting</A></H5>
<PRE>
   DirShowMinLength 15
</PRE>
<P>
<H3><A NAME="HDRDIRSWSZ" HREF="#PToC_126">DirShowSize - Show file size on directory listings</A></H3>
<P>
Use this directive to specify whether directory listings
should include the size of each file.
<P>
<H5><A NAME="Header_127">Example</A></H5>
<PRE>
   DirShowSize Off
</PRE>
<P>
<H5><A NAME="Header_128">Initial configuration file setting</A></H5>
<PRE>
   DirShowSize On
</PRE>
<P>
<H3><A NAME="HDRICONPAT" HREF="#PToC_129">IconPath - Specify the path for the directory listing internal icons</A></H3>
<P>Use this directive to specify URL information to be added at the
beginning of each <VAR>icon-URL</VAR> specified on an AddBlankIcon,
AddDirIcon, AddParentIcon, AddUnknownIcon, or AddIcon directive.
The value you specify on this directive is added to the
<VAR>icon-URL</VAR> value on each of the other directives
to form the full request for the icon.
The full request can be mapped to a file on your server
or it can be a request to another server.
<P><B>Attention:</B>  This directive must be before any
of the other icon directives
(AddBlankIcon, AddDirIcon, AddParentIcon, AddUnknownIcon, and AddIcon).
<P>
<H5><A NAME="Header_130">Example</A></H5>
<PRE>
   IconPath http://icon.server.com&#58;8080/httpd-internal-icons/
</PRE>
<P>
In the above example, each request for a directory list icon
generates a request to a server named icon.server.com.
<PRE>
   IconPath  /icons/
</PRE>
<P>
With the default settings, each request for a directory list icon
generates a request that begins with /icons/.
The server uses its mapping rules to map the request to a local file.
<P>
<H3><A NAME="HDRWELCO" HREF="#PToC_131">Welcome - Specify names of welcome files</A></H3>
<P>
Use this directive to specify the name of a welcome file
the server should look for to respond to requests that
do not contain a specific file name.
You can build a list of welcome files by putting multiple
occurrences of this directive in the configuration file.
<P>
For requests that do not contain a file name or a directory name, the
server always looks in the document root directory for a file that
matches a name specified on a Welcome directive.
If a match is found, the file is returned to the requester.
<P>
For requests that contain a directory name but not a file name,
the AlwaysWelcome directive controls whether the server
looks in the directory for a welcome file to return.
By default, AlwaysWelcome is set to a value of <TT>On</TT>.
This means the server always looks in the requested directory
for a file matching a name specified on a Welcome directive.
If a match is found, the file is returned to the requester.
<P>
If the server finds more than one match between files in a directory
and file names on Welcome directives, the order of the Welcome
directives determines which file is returned.
The server uses the Welcome directive closest
to the top of the configuration file.
<P>
If the server does not find a welcome file in the directory,
the DirAccess directive controls whether or not the server
responds to the request with a directory listing.
<P>
The format of the Welcome directive is:
<PRE>
  Welcome <VAR>file-name</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>file-name</VAR>
<P><DD>
A file name you want to define as being a welcome file.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URLs.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_132">Examples:</A></H5>
<PRE>
   Welcome letsgo.html
   Welcome Welcome.html
</PRE>
<P>
The above example defines two welcome pages and assumes the
AlwaysWelcome directive is set to its default of <TT>On</TT>.
For requests that do not contain a file name, the server would try to
return a welcome file from the directory specified on the request
(or document root directory if the request does not specify a
file name or a directory).
The server would first look for a file named letsgo.html.
If the directory does not have a letsgo.html file, the server would
look for a file named Welcome.html.
<PRE>
   Welcome CustomerA.html  9.67.106.79
   Welcome CustomerB.html  9.83.100.45
</PRE>
<P>
Your server would look for different welcome files based on
the IP address of the network connection the request comes in on.
For requests coming in on 9.67.106.79 the server would look for
welcome files named CustomerA.html.
For requests coming in on 9.83.100.45,
the server would look for welcome files named CustomerB.html.
If the request comes in on a different IP address, the server looks
for the default address.
<PRE>
   Welcome CustomerA.html  hostA.bcd.com
   Welcome CustomerB.html  hostB.bcd.com
</PRE>
<P>
Your server would look for different welcome files based on
the host name in the URL.
For requests coming in for hostA, the server would look for
welcome files named CustomerA.html.
For requests coming in for hostB,
the server would look for welcome files named CustomerB.html.
If the request comes in for a different host, the server looks
for the default host name.
<P>
<H5><A NAME="Header_133">Initial configuration file setting</A></H5>
<PRE>
   Welcome Welcome.html
   Welcome welcome.html
   Welcome index.html
   Welcome Frntpage.html
</PRE>
<P>
The above default values are shown in the order used by the
default configuration.
<P>
<H3><A NAME="HDRUSER" HREF="#PToC_134">User directories</A></H3>
<P>
Use the directives described in this section to control whether
individual users of your server can have their own private Web documents.
<P>
<H3><A NAME="HDRHOMEDIR" HREF="#PToC_135">HomeDir - Specify the directory that contains user subdirectories</A></H3>
<P>
Use this directive to specify the name of a directory on which
you want to allow individual users to have their own subdirectories.
Each user can have a subdirectory off of the directory name you specify.
URL requests to user subdirectories are in the format
&#126;<VAR>username</VAR>.
The server passes these requests to the appropriate user subdirectory
on the HomeDir directory.
<P>
You can use the HomeDir directive either by itself or together
with the UserDir directive.
Whether or not you use UserDir determines how the
server maps URL requests to the user subdirectories.
<P>
If you use HomeDir without UserDir,
all files within the user subdirectories are accessible to clients.
See the description of the UserDir directive
for a description and example of using HomeDir with UserDir.
<P><B>Note: </B>By using this directive, you are telling the server
to process all requests to user subdirectories.
You do not need to put any additional
Pass directives in the configuration file.
<P>
<H5><A NAME="Header_136">Example</A></H5>
<PRE>
   HomeDir  c&#58;\user
</PRE>
<P>
In the above example, the server would map
URL requests containing /&#126;<VAR>username</VAR> to the
c&#58;\user\<VAR>username</VAR> directory.
<P>
<H5><A NAME="Header_137">Initial Configuration File Setting</A></H5>
<P>None.
By default the server does not accept requests to user subdirectories.
<P>
<H3><A NAME="HDRUSERDIR" HREF="#PToC_138">UserDir - Specify the name of the accessible subdirectory off of user subdirectories</A></H3>
<P>
Use this directive to specify the name of a subdirectory
where individual users can keep the files they want to
be accessible to clients of the server.
This directive limits client access to just one subdirectory
within each user subdirectory.
Each individual subdirectory off of the HomeDir directory
can have a subdirectory with the name you specify.
<P>
To use this directive, you must also use the HomeDir
directive.
<P>
For example, you might want to use this directive if your
server has access to a LAN server where users have home directories.
You can use this directive to define one subdirectory off of each
user directory where users could keep Web pages they want to be
accessible.
<P>
<H5><A NAME="Header_139">Example</A></H5>
<PRE>
   HomeDir  c&#58;\user
   UserDir  html_doc
</PRE>
In the above example the server would map URL requests
containing /&#126;<VAR>username</VAR> to the
c&#58;\user\<VAR>username</VAR>\html_doc directory.
<P>
<H5><A NAME="Header_140">Initial Configuration File Setting</A></H5>
<P>None
<HR>
<H2><A NAME="HDRREQUE" HREF="#PToC_141">Logging and Reporting - Customize access and error logs and generate access reports</A></H2>
Logging and Reporting
<P>
Use the directives described in this section to
control your server&#39;s logs.
You can have the server log incoming requests and server errors.
If your server is running as a caching proxy server, you can log
access requests for files from the proxy server's cache.
<P>
You can specify the path and file where you want these logs to be kept,
how requests should be logged, and which requests you do not want to log.
<P>
You can view the access, error, and trace logs from the server window.
Although by default the access log will not write to the server
window by default to ensure better server performance, you can change
this by setting the LogToGUI directive to <TT>On</TT>.
<P>
You most likely will want to use the common log format.
This is the default format and it is the same format
used by most other types of Web servers.
If you plan to use the access log report function, you are required to
use the common log format.
<P>
<H3><A NAME="HDRACCLOG" HREF="#PToC_142">AccessLog - Name the path for the access log file</A></H3>
<P>
Use this directive to specify the path and file name
where you want the server to log access statistics.
By default, the server writes an entry to this log each time
a client sends the server a request.
You can use the NoLog directive if you do not want
to log requests from certain clients.
For a description of the NoLog directive, refer to <A HREF="#HDRNOLOG">"NoLog - Suppress log entries for specific hosts or domains matching a template"</A>.
<P>
The server starts a new log file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the
server uses the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>, where <VAR>Mmm</VAR>
is the first three letters of the month; <VAR>dd</VAR> is the day of the
month; and <VAR>yyyy</VAR> is the year.
<P>
It is a good idea to remove old log files, because they can take
up a significant amount of space on your hard drive.
For information about removing old log files,
refer to <A HREF="#HDRACCLOGA">"AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit"</A>.
<P>
<H5><A NAME="Header_143">Example</A></H5>
<PRE>
   AccessLog  c&#58;\server\logs\accesslog
</PRE>
<P>
<H5><A NAME="Header_144">Initial configuration file setting</A></H5>
<PRE>
   AccessLog  <VAR>c&#58;\path\</VAR>httpd-log
</PRE>
<P>
<VAR>c&#58;\path\</VAR> is the value you entered
for <B>Logs directory</B> at installation.
The installation default is c&#58;\WWW\LOGS
<P>
<H3><A NAME="HDRACCLOGA" HREF="#PToC_145">AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit</A></H3>
<P>
Values specified on the AccessLogArchive directive apply to access,
agent, and referer logs.
The collective size includes the size of all access logs or all agent
logs or all referer logs, not the collective size of all types of logs.
<P>
At midnight each night, the server closes the current log
and creates a new log file for the coming day.
You can choose to do one of the following actions with the closed
logs:
<UL>
<P><LI>Remove log files of a given age or when a given amount
of storage is used by the collection of log files
<P><LI>Allow closed logs to remain on your hard drive
<P><LI>Branch to a user exit
</UL>
<P>
To remove access, agent, or referer
logs of a given age, specify this directive,
in addition to the AccessLogExpire directive.
To remove logs when their collective size exceeds
a certain amount of storage, specify this directive,
in addition to the AccessLogSizeLimit directive.
<P>
To allow closed logs to remain on your hard drive,
you can accept the default, which is <TT>AccessLogArchive none</TT>.
<P>
To branch to a user exit, specify the path to the user exit and any
parameters for the user exit on the AccessLogArchive directive.
The server will append to this directive the path to the access, agent,
or referer log.
<P>
The AccessLogArchive directive can be specified in any of the
following formats:
<PRE>
   AccessLogArchive   purge
   AccessLogArchive   none
   AccessLogArchive   userexit <VAR>path_to_the_user-exit_program</VAR> &#91;<VAR>parameters for the
   user-exit</VAR>&#93;
</PRE>
<DL>
<P><DT>purge
<P><DD>Remove access log files of a given age or
when their collective size exceeds a given amount of storage.
<P><DT>none
<P><DD>Do not remove access log files.
<TT>none</TT> is the default.
<P><DT>userexit
<P><DD>Specifies the path of the user-exit program you want to branch to.
You can optionally specify the parameters for your user-exit program,
as shown in the following examples.
The server appends the path to the access log to the directive.
</DL>
<P>
<H5><A NAME="Header_146">Examples:</A></H5>
<PRE>
   AccessLogArchive purge
   AccessLogArchive none
   AccessLogArchive userexit c:\accback\backup.exe -d -a
</PRE>
<P>For the <TT>AccessLogArchive userexit</TT> example, the
user exit invocation is:
<PRE>
   AccessLogArchive userexit c:\accback\backup.exe -d -a c:\www\logs\httpd-log
</PRE>
<P>
<H5><A NAME="Header_147">Initial configuration file setting</A></H5>
<PRE>
   AccessLogArchive none
</PRE>
<P>
<H5><A NAME="Header_148">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRALGXURL" HREF="#PToC_149">AccessLogExcludeURL - Suppress log entries for specific files or directories</A></H3>
<P>
Use this directive to specify that you do not want
to log access requests made for specific files or directories
that match a given URL template.
For example, you might not want to log access requests
for GIF files or you might not want to log access requests
to a particular file or directory on your server.
<P>
You can have multiple occurrences of this directive in your
configuration file.
You can also put multiple entries for the same directive
if you separate them by one or more spaces.
<P>
<H5><A NAME="Header_150">Example</A></H5>
<PRE>
   AccessLogExcludeURL  *.gif
   AccessLogExcludeURL  /Freebies/*
</PRE>
<P>
<H5><A NAME="Header_151">Initial configuration file setting</A></H5>
<P>None.
The server includes in the access log
requests for all files and directories.
<P>
<H5><A NAME="Header_152">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRALGXMET" HREF="#PToC_153">AccessLogExcludeMethod - Suppress log entries for files or directories requested by a given method</A></H3>
<P>
Use this directive to specify that you do not want to log access requests
made for files or directories by using a specific method.
For example, you might not want to log DELETE requests for files
or directories.
<P>
You can have multiple occurrences of this directive in your
configuration file.
You can also put multiple methods on the same directive if you separate
them by one or more spaces.
<P>
<H5><A NAME="Header_154">Example</A></H5>
<PRE>
   AccessLogExcludeMethod GET
   AccessLogExcludeMethod PUT
   AccessLogExcludeMethod POST
   AccessLogExcludeMethod DELETE
</PRE>
<P>
<H5><A NAME="Header_155">Initial configuration file setting</A></H5>
<P>
None.
The server includes in the access log the files and
directories requested by all types of methods.
<P>
<H5><A NAME="Header_156">Program default setting</A></H5>
<P>
None.
<P>
<H3><A NAME="HDRALGXMIM" HREF="#PToC_157">AccessLogExcludeMimeType - Suppress log entries for specific MIME types</A></H3>
<P>
Use this directive to specify that you do not want to log access requests
made for directories or files of a given MIME type.
(Examples of MIME types are text/html, image/gif, and image/jpeg.)
For example, you might not want to log access requests for GIF images.
<P>
You can have multiple occurrences of this directive
in your configuration file.
You can also put multiple MIME types on the same directive
if you separate them by one or more spaces.
<P>
<H5><A NAME="Header_158">Example</A></H5>
<PRE>
   AccessLogExcludeMimeType image/gif
</PRE>
<P>
<H5><A NAME="Header_159">Initial configuration file setting</A></H5>
<P>None.
The access log includes requests to the server for files
and directories of all MIME types.
<P>
<H5><A NAME="Header_160">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRALGXRET" HREF="#PToC_161">AccessLogExcludeReturnCode - Suppress log entries for specific return codes</A></H3>
<P>
Use this directive to specify that you do not want to log access
requests that fall within a given range of error code numbers.
These error code numbers are httpd status codes.
You cannot specify individual codes.
Specifying 300 indicates that you want to exclude access requests
with redirection return codes (301, 302, 303, and 304).
To exclude these requests, you would specify:
<PRE>
AccessLogExcludeReturnCode 300
</PRE>
<P>You can have multiple occurrences
of this directive in your configuration file.
You can also put multiple return codes on the same directive
if you separate them by one or more spaces.
<P>
<H5><A NAME="Header_162">Example</A></H5>
<PRE>
   AccessLogExcludeReturnCode 300
</PRE>
<P>
<H5><A NAME="Header_163">Initial configuration file setting</A></H5>
<P>None.
The access log includes all requests
to the server, regardless of the code.
<P>
<H5><A NAME="Header_164">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRALGEXP" HREF="#PToC_165">AccessLogExpire - Remove existing access log files when they reach a given age in days</A></H3>
<P>
Use this directive to specify that you want to remove access log files
when they reach a certain age (in days).
<P>
This directive requires that you also specify the AccessLogArchive
directive, described under <A HREF="#HDRACCLOGA">"AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit"</A>.
You can have only one occurrence of this directive
in your configuration file.
<P>
The format of the AccessLogExpire directive is:
<PRE>
   AccessLogExpire   <VAR>number-of-days</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-days</VAR>
<P><DD>Specifies that access logs older than this value are to be removed.
<VAR>number-of-days</VAR> must be an integer;
decimal values such as 1.5 are not valid.
The default is 0, a value that indicates
that no expiration date exists.
<P>
The file creation date, as reported by the operating system,
is used to determine the age of the access log file.
The suffix of the filename, such as
<TT>httpd-log.Mar221996.<VAR>extension</VAR></TT>, is
not used to determine file age.
(<VAR>extension</VAR> is the file extension.)
</DL>
<P>
<H5><A NAME="Header_166">Example</A></H5>
<PRE>
   AccessLogExpire 10
</PRE>
<P>
<H5><A NAME="Header_167">Initial configuration file setting</A></H5>
<PRE>
   AccessLogExpire 0
</PRE>
<P>
<H5><A NAME="Header_168">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRALGSIZ" HREF="#PToC_169">AccessLogSizeLimit - Remove existing access log files when they reach a given collective size</A></H3>
<P>
Use this directive to specify that you want to remove access log files
when they reach a collective size (in megabytes).
<P>
This directive requires that you also specify the AccessLogArchive
directive, described under <A HREF="#HDRACCLOGA">"AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit"</A>.
You can have only one occurrence of this directive
in your configuration file.
<P>
The format of the AccessLogSizeLimit directive is:
<PRE>
   AccessLogSizeLimit   <VAR>number-of-megabytes</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-megabytes</VAR>
<P><DD>Specifies that when the combined size of the access log files
exceeds this value, files are deleted starting with the oldest file,
until the collective size is within the limit specified
on the AccessLogSizeLimit directive.
<VAR>number-of-megabytes</VAR> must be an integer.
The default is 0, a value that indicates
that no access log files are to be removed.
<P>
This directive takes effect after the
AccessLogExpire directive has taken effect.
</DL>
<P>
<H5><A NAME="Header_170">Example</A></H5>
<PRE>
   AccessLogSizeLimit 4
</PRE>
<P>
<H5><A NAME="Header_171">Initial configuration file setting</A></H5>
<PRE>
   AccessLogSizeLimit 0
</PRE>
<P>
<H5><A NAME="Header_172">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRACRPDES" HREF="#PToC_173">AccessReportDescription - Give a short description of the report to be created</A></H3>
<P>
Use this directive to include a short description
of the report to be created with this template.
<P>
<H5><A NAME="Header_174">Example</A></H5>
<PRE>
   AccessReportDescription   Report on Web page accesses
</PRE>
<P>
<H5><A NAME="Header_175">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_176">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARPXURL" HREF="#PToC_177">AccessReportExcludeURL - Suppress from the report the log entries for specific files or directories</A></H3>
<P>
Use this directive to specify that you do not want to include
in the access report requests made for specific files or
directories that match a given URL template.
For example, you might not want to include in the report access requests
for GIF files or you might not want to include access requests
to a particular file or directory on your server.
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P>
<H5><A NAME="Header_178">Example</A></H5>
<PRE>
   AccessReportExcludeURL *.gif
   AccessReportExcludeURL oldfiles*
</PRE>
<P>
<H5><A NAME="Header_179">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_180">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARINURL" HREF="#PToC_181">AccessReportIncludeURL - Include in the report only log entries for specific files or directories</A></H3>
<P>
Use this directive to specify that you want to include in the
access report only access requests made for specific files or
directories that match a given URL template.
For example, you might want to include in the report only access requests
for HTML files or you might want to include access requests
to a particular file or directory on your server.
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P>
<H5><A NAME="Header_182">Example</A></H5>
<PRE>
   AccessReportIncludeURL /*.html
</PRE>
<P>
<H5><A NAME="Header_183">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_184">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARXHST" HREF="#PToC_185">AccessReportExcludeHostName - Suppress from the report the log entries for specific host names</A></H3>
<P>
Use this directive to specify that you do not want to include in the
access report requests made by host names or IP addresses
that match a given template.
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P><B>Note: </B>To exclude host names,
you must set the DNS-Lookup directive to <TT>On</TT>.
If the DNS-Lookup directive is set to <TT>Off</TT> (the default),
you can exclude IP addresses only.
<P>
<H5><A NAME="Header_186">Example</A></H5>
<PRE>
   AccessReportExcludeHostName 9.85.*.*
   AccessReportExcludeHostName *.edu
</PRE>
<P>
<H5><A NAME="Header_187">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_188">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARINHST" HREF="#PToC_189">AccessReportIncludeHostName - Include in the report only log entries for specific host names</A></H3>
<P>
Use this directive to specify that you want to include in the
access report requests made by host names or IP addresses
that match a given template.
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P><B>Note: </B>To include host names,
you must set the DNS-Lookup directive to <TT>On</TT>.
If the DNS-Lookup directive is set to <TT>Off</TT> (the default),
you can include IP addresses only.
<P>
<H5><A NAME="Header_190">Example</A></H5>
<PRE>
   AccessReportIncludeHostName 9.9.99.*
   AccessReportIncludeHostName *.com
</PRE>
<P>
<H5><A NAME="Header_191">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_192">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARXMET" HREF="#PToC_193">AccessReportExcludeMethod - Suppress from the report the log entries of a given method type</A></H3>
<P>
Use this directive to specify that you do not want to include
in the access report requests of a given method type.
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P>
<H5><A NAME="Header_194">Example</A></H5>
<PRE>
   AccessReportExcludeMethod GET
   AccessReportExcludeMethod PUT
   AccessReportExcludeMethod POST
</PRE>
<P>
<H5><A NAME="Header_195">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_196">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARXRET" HREF="#PToC_197">AccessReportExcludeReturnCode - Suppress from the report the log entries with a given return code</A></H3>
<P>
Use this directive to specify that you do not want to include
in the access report requests that fall within a given range
of error code numbers.
These error code numbers are httpd status codes.
You cannot specify individual return codes.
Specifying 300 indicates that you want to exclude from the report
access requests with redirection return codes (301, 302, 303, and 304).
To exclude these requests from the report, you would specify <TT>
AccessReportxcludeReturnCode 300</TT>
<P>
You can have multiple occurrences of this directive
in your configuration file.
<P>
<H5><A NAME="Header_198">Syntax:</A></H5>
<PRE>
   AccessReportExcludeReturnCode <VAR>return code</VAR>
</PRE>
<P>
<H5><A NAME="Header_199">Example</A></H5>
<PRE>
   AccessReportExcludeReturnCode 200
   AccessReportExcludeReturnCode 400
</PRE>
<P>
<H5><A NAME="Header_200">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_201">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARPROOT" HREF="#PToC_202">AccessReportRoot - Name the path for the root directory where access log reports are stored</A></H3>
<P>
Use this directive to specify the path and file name where you want
the server to store access log reports and summary databases.
We recommend that you accept the default path.
If you choose to specify a different path, you will need
to create the new directory with all the appropriate permissions
and add a PASS directive to enable the server to honor requests
for reports in that directory.
<P>If you are running with workload management enabled, you should
have unique AccessReportRoot directives for each instance of httpd
based on the subsystem name.  If you specify -SN system1, you should
have AccessReportRoot /usr/lpp/internet/server_root/pub/reports/system1
and a corresponding Pass directive.
<P>
<H5><A NAME="Header_203">Example</A></H5>
<PRE>
   AccessReportRoot C&#58;\WWW\BIN\REPORTS
</PRE>
<P>
<H5><A NAME="Header_204">Initial configuration file setting</A></H5>
None.
<P>
<H5><A NAME="Header_205">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARPTEMP" HREF="#PToC_206">AccessReportTemplate - Name the report template</A></H3>
<P>
Use this directive to specify the name of the report template.
There is a default template named "Top50".
For more information, see <A HREF="icswg006.html#HDRUNDEREP">"Tailoring the reports your server creates"</A>.
<P>
The format of the AccessReportTemplate is:
<PRE>
   AccessReportTemplate <VAR>report_title</VAR>
</PRE>
<DL>
<P><DT><VAR>report_title</VAR>
<P><DD>The name of the report.
The name cannot include any blanks.
</DL>
<P>
<H5><A NAME="Header_207">Example</A></H5>
<PRE>
   AccessReportTemplate PageHits
</PRE>
<P>
<H5><A NAME="Header_208">Initial configuration file setting</A></H5>
<PRE>
AccessReportTemplate  Top50    {
AccessReportDescription        Top 50 most frequently requested files
                                and most frequent visitors
AccessReportTopList            50
                               }
</PRE>
<P>
<H5><A NAME="Header_209">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRARPTOP" HREF="#PToC_210">AccessReportTopList - Specify the top number of items on</A></H3>
 which to report
<P>
Use this directive to specify the top number of items on which to report.
<P>
The format of the AccessReportTopList is:
<PRE>
   AccessReportTopList <VAR>top_number</VAR>&#124;all
</PRE>
<DL>
<P><DT><VAR>top_number</VAR>
<P><DD>Specifies that the report is to include the <VAR>top_number</VAR>
most frequently occurring entries in the access log.
This must be an integer value.
<P><DT>all
<P><DD>Specifies that the report is to include all entries in the report.
</DL>
<P>
<H5><A NAME="Header_211">Example</A></H5>
<PRE>
   AccessReportTopList 10
</PRE>
<P>
<H5><A NAME="Header_212">Initial configuration file setting</A></H5>
<P>None.
<P>
<H5><A NAME="Header_213">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRAGTLOG" HREF="#PToC_214">AgentLog - Name the path for the agent log file</A></H3>
<P>
Use this directive to specify the path and file name
where you want the server to log statistics about which Web browser
was used to access a Web page.
By default the server writes an entry to this log each time
a client sends the server a request.
For every entry made in the access log,
the agent log has a corresponding
entry that indicates the browser used to display the
page or file requested by the client.
<P>
The server starts a new agent
log file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the
server uses the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>, where <VAR>Mmm</VAR>
is the first three letters of the month; <VAR>dd</VAR> is the day of the
month; and <VAR>yyyy</VAR> is the year.
<P>
<H5><A NAME="Header_215">Example</A></H5>
<PRE>
   AgentLog  c&#58;\server\logs\agent-log
</PRE>
<P>
<H5><A NAME="Header_216">Initial configuration file setting</A></H5>
<PRE>
   AgentLog  <VAR>c&#58;\path\</VAR>agent-log
</PRE>
<P>
<VAR>c&#58;\path\</VAR> is the value you entered
for <B>Logs directory</B> at installation.
The installation default is c&#58;\WWW\LOGS
<P>
<H5><A NAME="Header_217">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRCACLOG" HREF="#PToC_218">CacheAccessLog - Specify the path for the cache access log files</A></H3>
<P>
If the server is running as a proxy, you can log requests to the
cache separately from other requests.
Use the CacheAccessLog directive to specify the path and file name
where you want the server to put access requests for cached files.
To enable logging of requests to the proxy cache,
the following directives must be defined:
<UL>
<P><LI>Caching must be turned ON (default is OFF)
<P><LI>CacheRoot (by default, no CacheRoot is defined)
<P><LI>CacheAccessLog
</UL>
<P>The value of CacheAccessLog can either be an absolute path
or a path relative to ServerRoot (one example is shown of each).
<P><B>Note: </B>If you choose to use CacheAccessLog, access requests
for cached files are logged, but they are not included
in the access reports.
Access reports contain only information from
access logs, not from cache access logs.
Therefore, if you want access reports to contain access requests
for cached files, do <I>not</I> specify the CacheAccessLog directive.
<P>
The server starts a new log file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the server uses
the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>,
where <VAR>Mmm</VAR> is the first three letters of the month;
<VAR>dd</VAR> is the day of the month; and <VAR>yyyy</VAR> is the year.
<P><B>Note: </B>It is a good idea to occasionally check the path
that contains your log files.
If your server has a large amount of activity, your log files could grow
to the point that they cause your server to run out of disk space.
Make sure the files are not taking up too much space and
delete the log files you no longer need.
<P>The format of this directive is
<PRE>
CacheAccessLog  &lt;<VAR>file_path</VAR>&gt;
</PRE>
<P>
<H5><A NAME="Header_219">Example</A></H5>
<PRE>
   CacheAccessLog  c&#58;\absolute\path\logfile
   CacheAccessLog  c&#58;\logs\logfile
</PRE>
<P>
<H5><A NAME="Header_220">Initial configuration file setting</A></H5>
<P>None.
The server does not log cache access requests unless
you include this directive in your configuration file.
<P>
<H5><A NAME="Header_221">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRCGILOG" HREF="#PToC_222">CgiErrorLog - Name the path for the CGI error log file</A></H3>
<P>
Use this directive to specify the path and file name
where you want the server to log standard error output (stderr) from CGI
programs.
<P>
The server starts a new CGI error
file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the
server uses the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>, where <VAR>Mmm</VAR>
is the first three letters of the month; <VAR>dd</VAR> is the day of the
month; and <VAR>yyyy</VAR> is the year.
<P>
<H5><A NAME="Header_223">Example</A></H5>
<PRE>
   CgiErrorLog  c&#58;\server\logs\cgi-error
</PRE>
<P>
<H5><A NAME="Header_224">Initial configuration file setting</A></H5>
<PRE>
   CgiErrorLog <VAR>c&#58;\path\</VAR>cgi-error
</PRE>
<P>
<VAR>c&#58;\path\</VAR> is the value you entered
for <B>Logs directory</B> at installation.
The installation default is c&#58;\WWW\LOGS
<P>
<H5><A NAME="Header_225">Program default setting</A></H5>
<P>
None.
<P>
<H3><A NAME="HDRERRLOG" HREF="#PToC_226">ErrorLog - Name the file where you want to log internal server errors</A></H3>
<P>
Use this directive to specify the path and file name
where you want the server to log internal errors.
<P>
The server starts a new log file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the server uses
the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>,
where <VAR>Mmm</VAR> is the first three letters of the month;
<VAR>dd</VAR> is the day of the month; and <VAR>yyyy</VAR> is the year.
<P><B>Note: </B>If your server has a large amount of activity, your log files could grow
to the point that they cause your server to run out of disk space.
To prevent the files from taking up too much space, you can specify
the ErrorLogArchive directive described under <A HREF="#HDRERRLGA">"ErrorLogArchive - Remove existing error or CGI error log files or run a user exit"</A>.
<P>
<H5><A NAME="Header_227">Example</A></H5>
<PRE>
   ErrorLog c&#58;\server\logs\errorlog
</PRE>
<P>
<H5><A NAME="Header_228">Initial configuration file setting</A></H5>
<PRE>
   ErrorLog  <VAR>c&#58;\path\</VAR>httpd-error
</PRE>
<P><VAR>c&#58;\path\</VAR> is the value you entered
for <B>Logs directory</B> at installation.
The installation default is c&#58;\WWW\LOGS
<P>
<H5><A NAME="Header_229">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRERRLGA" HREF="#PToC_230">ErrorLogArchive - Remove existing error or CGI error log files or run a user exit</A></H3>
<P>
Values specified on the ErrorLogArchive directive apply to error and
CGI error logs.
The collective size includes the size of all error logs or all CGI
logs, not the collective size of both types of logs.
<P>
At midnight each night, the server closes the current error and CGI error
logs and creates a new log files for the coming day.
You can choose to do one of the following actions
with the closed error logs:
<UL>
<P><LI>Remove log files of a given age or when a given amount
of storage is used by the collection of error log files
<P><LI>Allow closed logs to remain on your hard drive
<P><LI>Branch to a user exit.
</UL>
<P>
To remove logs of a given age, specify
this directive, in addition to the ErrorLogExpire directive.
To remove logs when their collective size exceeds
a certain amount of storage, specify this directive,
in addition to the ErrorLogSizeLimit directive.
<P>
To allow closed logs to remain on your hard drive, you
can accept the default, which is <TT>ErrorLogArchive none</TT>.
<P>
To branch to a user exit, specify the path to the user exit and any
parameters for the user exit on the ErrorLogArchive directive.
The server will append to this directive the path to the error or CGI
error log.
<P>
The ErrorLogArchive directive can be specified
in any of the following formats:
<PRE>
   ErrorLogArchive   purge
   ErrorLogArchive   none
   ErrorLogArchive   userexit <VAR>path_to_the_user-exit program</VAR> &#91;<VAR>parameters for the
   user-exit</VAR>&#93;
</PRE>
<DL>
<P><DT>purge
<P><DD>Remove log files of a given age or
when their collective size exceeds a given amount of storage.
<P><DT>none
<P><DD>Do not remove log files.
<TT>none</TT> is the default.
<P><DT>userexit
<P><DD>Specifies the path of the user-exit program you want to branch to.
You can optionally specify the parameters for your user-exit program,
as shown in the following examples.
The server appends the path to the error log to the directive.
</DL>
<P>
<H5><A NAME="Header_231">Examples:</A></H5>
<PRE>
   ErrorLogArchive purge
   ErrorLogArchive none
   ErrorLogArchive userexit c:\errback\backup.exe -d -a
</PRE>
<P>For the <TT>ErrorLogArchive userexit</TT> example,
the user exit invocation is:
<PRE>
   ErrorLogArchive userexit c:\errback\backup.exe -d -a c:\www\logs\httpd-error
</PRE>
<P>
<H5><A NAME="Header_232">Initial configuration file setting</A></H5>
<PRE>
   ErrorLogArchive none
</PRE>
<P>
<H5><A NAME="Header_233">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRERRLGE" HREF="#PToC_234">ErrorLogExpire - Remove existing error log files when they reach a given age in days</A></H3>
<P>
Use this directive to specify that you want to remove error log files
when they reach a certain age (in days).
<P>
This directive requires that you also specify the ErrorLogArchive
directive, described under <A HREF="#HDRERRLGA">"ErrorLogArchive - Remove existing error or CGI error log files or run a user exit"</A>.
You can have only one occurrence of this directive
in your configuration file.
<P>
The format of the ErrorLogExpire directive is:
<PRE>
   ErrorLogExpire   <VAR>number-of-days</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-days</VAR>
<P><DD>Specifies that error logs older than this value are to be removed.
<VAR>number-of-days</VAR> must be an integer;
decimal values such as 1.5 are not valid.
The default is 0, a value that indicates
that no expiration date exists.
<P>
The file creation date, as reported by the operating system,
is used to determine the age of the error log file.
The suffix of the filename, such as <TT>httpd-log.Mar221996</TT>,
is not used to determine file age.
</DL>
<P>
<H5><A NAME="Header_235">Example</A></H5>
<PRE>
   ErrorLogExpire 10
</PRE>
<P>
<H5><A NAME="Header_236">Initial configuration file setting</A></H5>
<PRE>
   ErrorLogExpire 0
</PRE>
<P>
<H5><A NAME="Header_237">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRERRLGSZ" HREF="#PToC_238">ErrorLogSizeLimit - Remove existing error log files when they reach a given collective size</A></H3>
<P>
Use this directive to specify that you want to remove error log files
when they reach a collective size (in megabytes).
<P>
This directive requires that you also specify the ErrorLogArchive
directive, described under <A HREF="#HDRERRLGA">"ErrorLogArchive - Remove existing error or CGI error log files or run a user exit"</A>.
You can have only one occurrence of this directive
in your configuration file.
<P>
The format of the ErrorLogSizeLimit directive is:
<PRE>
   ErrorLogSizeLimit   <VAR>number-of-megabytes</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-megabytes</VAR>
<P><DD>Specifies that when the sum total size of the error log files
exceeds this value, files are deleted starting with the oldest file,
until the collective size is within the limit specified
on the ErrorLogSizeLimit directive.
<VAR>number-of-megabytes</VAR> must be an integer.
The default is 0, a value that indicates
that no error log files are to be removed.
<P>
This directive takes effect after
the ErrorLogExpire directive has taken effect.
</DL>
<P>
<H5><A NAME="Header_239">Example</A></H5>
<PRE>
   ErrorLogSizeLimit 4
</PRE>
<P>
<H5><A NAME="Header_240">Initial configuration file setting</A></H5>
<PRE>
   ErrorLogSizeLimit 0
</PRE>
<P>
<H5><A NAME="Header_241">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRLOGFORM" HREF="#PToC_242">LogFormat - Specify common or old log file format</A></H3>
<P>
Use this directive to specify whether you want your server
to write log files in the common format or old format.
<P>
If you plan to use the reporting functions described under
<A HREF="icswg006.html#HDRUNDEREP">"Tailoring the reports your server creates"</A>, you must accept the default file format, common.
<P>
The common format is the one used by most Web servers.
The old format was used with early versions of Web servers from CERN.
You most likely will want to use the common format,
which is the default.
<P>
<H5><A NAME="Header_243">Example</A></H5>
<PRE>
   LogFormat Old
</PRE>
<P>
<H5><A NAME="Header_244">Initial configuration file setting</A></H5>
<PRE>
   LogFormat Common
</PRE>
<P>
<H5><A NAME="Header_245">Program default setting</A></H5>
<P>Common.
<P>
<H3><A NAME="HDRLOGTIME" HREF="#PToC_246">LogTime - Specify GMT or local time stamps in log files</A></H3>
<P>
Use this directive to specify whether your logs should record
entries using local time or Greenwich Mean Time (GMT).
<P>
<H5><A NAME="Header_247">Example</A></H5>
<PRE>
   LogTime GMT
</PRE>
<P>
<H5><A NAME="Header_248">Initial configuration file setting</A></H5>
<PRE>
   LogTime LocalTime
</PRE>
<P>
<H5><A NAME="Header_249">Program default setting</A></H5>
<P>LocalTime.
<P>
<H3><A NAME="HDRLOGTOGU" HREF="#PToC_250">LogToGUI - Specify whether access log writes to GUI</A></H3>
<P>
Use this directive to specify whether you want your server
to write access log files to the server window
(also known as graphical user interface or GUI).
The default setting of OFF improves server performance.
<P>
<H5><A NAME="Header_251">Example</A></H5>
<PRE>
   LogToGUI On
</PRE>
<P>
<H5><A NAME="Header_252">Initial configuration file setting</A></H5>
<PRE>
   LogToGUI Off
</PRE>
<P>
<H5><A NAME="Header_253">Program default setting</A></H5>
<P>Off.
<P>
<H3><A NAME="HDRNOLOG" HREF="#PToC_254">NoLog - Suppress log entries for specific hosts or domains matching a template</A></H3>
<P>
Use this directive to specify that you do not want to log access
requests made from specific hosts or domains that match a given template.
For example, you may not want to log access requests from local hosts.
<P>
You can have multiple occurrences
of this directive in your configuration file.
You can also put multiple templates on the same directive
if you separate them by one or more spaces.
You can use host names or IP number addresses on the templates.
<P><B>Note: </B>To use host name templates,
you must set the DNS-Lookup directive to <TT>On</TT>.
If the DNS-Lookup directive is set to <TT>Off</TT> (the default),
you can use IP address templates only.
<P>
<H5><A NAME="Header_255">Example</A></H5>
<PRE>
   NoLog 128.141.*  *.edu  localhost.*
</PRE>
<P>
<H5><A NAME="Header_256">Initial configuration file setting</A></H5>
<P>None
<P>
<H5><A NAME="Header_257">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREFLOG" HREF="#PToC_258">RefererLog - Name the path for the referer log file</A></H3>
<P>
Use this directive to specify the path and file name
where you want the server log the identity of the Web page that
referred to (linked to) the requested Web page.
By default the server writes an entry to this log each time
a client sends the server a request.
For every entry made in the access log,
the referer log has a corresponding
entry that indicates which page referred to the page
that was requested by the client.
If no page referred to the requested page, the entry is two quotation
marks (&quot; &quot;).
<P>
The server starts a new referer log
file each day at midnight if it is running.
Otherwise, the server starts a new log file
the first time you start it on a given day.
When creating the file, the
server uses the file name you specify and appends a date extension.
The date extension is in the format <VAR>Mmmddyyyy</VAR>, where <VAR>Mmm</VAR>
is the first three letters of the month; <VAR>dd</VAR> is the day of the
month; and <VAR>yyyy</VAR> is the year.
<P>
<H5><A NAME="Header_259">Example</A></H5>
<PRE>
   RefererLog  c&#58;\server\logs\referer-log
</PRE>
<P>
<H5><A NAME="Header_260">Initial configuration file setting</A></H5>
<PRE>
   RefererLog <VAR>c&#58;\path\</VAR>referer-log
</PRE>
<P>
<VAR>c&#58;\path\</VAR> is the value you entered
for <B>Logs directory</B> at installation.
The installation default is c&#58;\WWW\LOGS
<P>
<H5><A NAME="Header_261">Program default setting</A></H5>
<P>
None.
<P>
<H3><A NAME="HDRREPDCP" HREF="#PToC_262">ReportDataCompressionProgram - Specify path to the compression program</A></H3>
<P>
Use this directive to specify the path to the compression program
(such as PKZIP2, GZIP, or compress)
and any program parameters for the compression program.
Include any command line parameters on the same line.
This compression program is to be used to compress access data log files.
<P>
<H5><A NAME="Header_263">Example</A></H5>
<PRE>
   ReportDataCompressionProgram c:\bin\pkunzip2
</PRE>
<P>
<H5><A NAME="Header_264">Initial configuration file setting</A></H5>
<PRE>
   ReportDataCompressionProgram
</PRE>
<P>
<H5><A NAME="Header_265">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPDUCP" HREF="#PToC_266">ReportDataUnCompressionProgram - Specify path to the uncompression program</A></H3>
<P>
Use this directive to specify the path to the uncompression program
(such as UNZIP, GZIP, or uncompress)
and any program parameters for the uncompression program.
Include any command line parameters on the same line.
This uncompression
program is to be used to uncompress access data log files.
<P>
<H5><A NAME="Header_267">Example</A></H5>
<PRE>
   ReportDataUnCompressionProgram c:\bin\pkunzip2
</PRE>
<P>
<H5><A NAME="Header_268">Initial configuration file setting</A></H5>
<PRE>
   ReportDataUnCompressionProgram
</PRE>
<P>
<H5><A NAME="Header_269">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPDCS" HREF="#PToC_270">ReportDataCompressionSuffix - Specify the suffix appended to the compressed file</A></H3>
<P>
Use this directive to specify the suffix appended to the compressed file.
<P>
<H5><A NAME="Header_271">Example</A></H5>
<PRE>
   ReportDataCompressionSuffix .zip
</PRE>
<P>
<H5><A NAME="Header_272">Initial configuration file setting</A></H5>
<PRE>
   ReportDataCompressionSuffix
</PRE>
<P>
<H5><A NAME="Header_273">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPPOL" HREF="#PToC_274">ReportProcessOldLogs - Check for old logs in the log directory</A></H3>
<P>
Use this directive to indicate that you want the server to check for old
access
logs in the log directory that are not listed in the list of log files
that have been processed into reports.
With this directive, you can process old access log files by:
<UL COMPACT>
<LI>Appending the data from the old access log files to existing reports
<LI>Creating reports for all access
log files and overwriting existing reports
<LI>Creating a report for the most recently created access log file.
</UL>
<P>The format of the ReportProcessOldLogs directive is:
<PRE>
   ReportProcessOldLogs append|force|last
</PRE>
<DL>
<P><DT>append
<P><DD>Add to existing access log reports data from
log files that were
not originally included in the reports.
<P><DT>force
<P><DD>Overwrite existing access log reports with reports based on data
from all access
log files, regardless of whether they were originially included in the
reports.
<P><B>Note: </B>The only way to erase reports named
access.<VAR>mmddyyyy</VAR> files is to archive them with the
ReportDataArchive directive, described under <A HREF="#HDRREPDA">"ReportDataArchive - Specify whether to remove existing accessdata files"</A>.
<P><DT>last
<P><DD>Create reports based on data from the most recently created access
log file.
</DL>
<P>
<H5><A NAME="Header_275">Examples</A></H5>
<PRE>
   ReportProcessOldLogs append
   ReportProcessOldLogs force
   ReportProcessOldLogs last
</PRE>
<P>
<H5><A NAME="Header_276">Initial configuration file setting</A></H5>
<PRE>
   ReportProcessOldLogs append
</PRE>
<P>
<H5><A NAME="Header_277">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPDSL" HREF="#PToC_278">ReportDataSizeLimit - Remove existing access data files when they reach a given collective size</A></H3>
<P>
Use this directive to specify that you want to remove access data files
when they reach a collective size (in megabytes).
<P>
This directive requires that you also specify the ReportDataArchive
directive, described under <A HREF="#HDRACCLOGA">"AccessLogArchive - Remove existing access, agent, or referer log files or run a user exit"</A>.
You can have only one occurrence of this directive
in your configuration file.
<P>
The format of the ReportDataSizeLimit directive is:
<PRE>
   ReportDataSizeLimit   <VAR>number-of-megabytes</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-megabytes</VAR>
<P><DD>Specifies that when the sum total size of the access data files
exceeds this value, files are deleted starting with the oldest file,
until the collective size is within the limit specified
on the ReportDataSizeLimit directive.
<VAR>number-of-megabytes</VAR> must be an integer.
The default is 0, a value that indicates
that no access data files are to be removed.
<P>
This directive takes effect after the
ReportDataExpire directive has taken effect.
</DL>
<P>
<H5><A NAME="Header_279">Example</A></H5>
<PRE>
   ReportDataSizeLimit 4
</PRE>
<P>
<H5><A NAME="Header_280">Initial configuration file setting</A></H5>
<PRE>
   ReportDataSizeLimit 0
</PRE>
<P>
<H5><A NAME="Header_281">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPDA" HREF="#PToC_282">ReportDataArchive - Specify whether to remove existing accessdata files</A></H3>
<P>
Use this directive to specify whether you want to remove existing
access data log files.
<P>
If you want to remove access data files, you also need to
specify the ReportDataExpire
directive, described under <A HREF="#HDRREPDE">"ReportDataExpire - Remove existing access data files when they reach a given age in days"</A>.
You can have only one occurrence of this directive in your configuration
file.
<P>
Even after you remove access data files, the data from these files
is still available for reports to use, until you specify the
ReportProcessOldLogs directive with the <TT>force</TT> option.
<P>
The ReportDataArchive directive can be specified in any of the following
formats:
<PRE>
   ReportDataArchive purge
   ReportDataArchive none
   ReportDataArchive   userexit <VAR>path_to_the_user-exit_program</VAR> &#91;<VAR>parameters for the
   user-exit</VAR>&#93;
</PRE>
<DL>
<P><DT>purge
<P><DD>Remove access data files of a given age or
when their collective size exceeds a given amount of storage.
<P><DT>none
<P><DD>Do not remove access data files.
<TT>none</TT> is the default.
<P><DT>userexit
<P><DD>Specifies the path of the user-exit program you want to branch to.
You can optionally specify the parameters for your user-exit program,
as shown in the following examples.
The server appends the path to the access log to the directive.
</DL>
<P>
<H5><A NAME="Header_283">Examples:</A></H5>
<PRE>
   ReportDataArchive purge
   ReportDataArchive none
   ReportDataArchive userexit c:\accback\backup.exe -d -a
</PRE>
<P>For the <TT>ReportDataArchive userexit</TT> example, the
user exit invocation is:
<PRE>
   ReportDataArchive userexit c:\accback\backup.exe -d -a c:\www\logs\httpd-log
</PRE>
<P>
<H5><A NAME="Header_284">Example</A></H5>
<PRE>
   ReportDataArchive purge
</PRE>
<P>
<H5><A NAME="Header_285">Initial configuration file setting</A></H5>
<PRE>
   ReportDataArchive none
</PRE>
<P>None
<P>
<H5><A NAME="Header_286">Program default setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRREPDE" HREF="#PToC_287">ReportDataExpire - Remove existing access data files when they reach a given age in days</A></H3>
<P>
Use this directive to specify that you want to remove access log data
files when they
reach a certain age (in days).
<P>
This directive requires that you also specify the ReportDataArchive
directive, described under <A HREF="#HDRREPDA">"ReportDataArchive - Specify whether to remove existing accessdata files"</A>.
You can have only one occurrence of this directive in your configuration
file.
<PRE>
   ReportDataExpire   <VAR>number-of-days</VAR>
</PRE>
<DL>
<P><DT><VAR>number-of-days</VAR>
<P><DD>Specifies that reports older than this value are to be removed.
<VAR>number-of-days</VAR> must be an integer;
decimal values such as 1.5 are not valid.
The default is 0, a value that indicates
that no expiration date exists.
<P>
The file creation date, as reported by the operating system,
is used to determine the age of the error log file.
The suffix of the filename, such as <TT>httpd-log.Mar221996</TT>,
is not used to determine file age.
</DL>
<P>
<H5><A NAME="Header_288">Example</A></H5>
<PRE>
   ReportDataExpire 10
</PRE>
<P>
<H5><A NAME="Header_289">Initial configuration file setting</A></H5>
<PRE>
   ReportDataExpire 0
</PRE>
<P>
<H5><A NAME="Header_290">Program default setting</A></H5>
<P>None.
<HR>
<H2><A NAME="HDRDOCUM" HREF="#PToC_291">Access control - Set up access control for the server</A></H2>
Access control
<P>
Use the directives described in this section to
control access to your server&#39;s resources.
<P>
You link protection setups to groups of files based on
the requests that are used to access those files.
Use the DefProt and Protect directives
to define the requests you want to protect.
<P>
You can define the actual protection setup in a separate
protection statement
or directly in the configuration file.
Within the configuration file, you can define and label
a protection setup using the Protection directive.
You can also define a protection setup directly
on a DefProt or Protect directive.
<P>
This section also describes the subdirectives
that define a protection setup.
<P>
See <A HREF="icswg009.html#HDRPRT">"Protecting your server"</A> for step-by-step instructions
on protecting your server resources.
<P>
<H3><A NAME="HDRDEFPROT" HREF="#PToC_292">DefProt - Specify default protection setup for requests that match a template</A></H3>
<P>
Use this directive to associate a default protection
setup with requests that match a template.
<P>
<B>Attention:</B>  For protection to work properly,
you must put your DefProt and Protect directives
before any Pass or Exec directives in your configuration file.
<P>
The format of the directive is:
<PRE>
  DefProt <VAR>request-template setup</VAR> &#91;FOR <VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that you want to associate
with a default protection setup.
The server compares incoming client requests to the template
and associates a protection setup if there is a match.
<P>
Protection is not actually activated for requests matching
the template unless the request also matches a template
on a subsequent Protect directive.
See the description of the Protect directive for an
explanation of how it is used with DefProt.
<P><DT><VAR>setup</VAR>
<P><DD>The default protection setup you want to associate
with requests that match <VAR>request-template</VAR>.
Protection setup is defined with protection subdirectives.
See <A HREF="#HDRPROTSET">"Protection Subdirectives"</A> for descriptions
of the protection subdirectives.
This parameter can take one of three forms:
<UL>
<P><LI>A full path and file name identifying a separate file
that contains the protection subdirectives.
<P><LI>A protection setup label name that matches
a name defined earlier on a Protection directive.
The Protection directive contains the protection subdirectives.
<P><LI>The actual protection subdirectives.
The subdirectives must be enclosed in braces &#123;&#125;.
The left brace character must be the last character
on the same line as the DefProt directive.
Each subdirective follows on its own line.
The right brace character must be on its own line
following the last subdirective line.
You cannot put any comment lines between the braces.
</UL>
<P><DT>FOR <VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, FOR 204.146.167.72)
or you can specify a host name (for example, FOR hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P><B>Notes: </B><OL>
<P><LI>
To use this parameter, the <VAR>setup</VAR> parameter must be
in the form of a path and file name or a protection setup label.
You cannot use protection subdirectives enclosed in braces
for the <VAR>setup</VAR> parameter.
<P><LI>To use this parameter, you must put <B>FOR</B>,
or some other character string (without blanks),
between the <VAR>setup</VAR> parameter and the
<VAR>IP-address</VAR> or <VAR>hostname</VAR>.
</OL>
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_293">Examples:</A></H5>
<PRE>
   DefProt   /secret/*   d&#58;\server\protect\setup1.acc
</PRE>
<PRE>
   DefProt   /secret/*   SECRET-PROT
</PRE>
<P>The above example uses a label name
to point to the protection subdirectives.
The label name must match a label name on a Protection directive.
The Protection directive must come before the DefProt directive.
<PRE>
   DefProt   &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile d&#58;\docs\WWW\restrict.pwd
      GroupFile  d&#58;\docs\WWW\restrict.grp
      GetMask authors
      PutMask authors
   &#125;
</PRE>
<P>The above example includes the protection subdirectives
as part of the DefProt directive.
<PRE>
   DefProt   /secret/*   CustomerA-PROT   9.67.106.79
   DefProt   /secret/*   CustomerB-PROT   9.83.100.45
</PRE>
<P>
The above examples use the optional IP address parameter.
If your server receives requests that begin with /secret/, it
associates a different default protection setup with the request based
on the IP address of the network connection the request comes in on.
For requests coming in on 9.67.106.79, the server associates
the request with default protection defined on a
Protection directive with a label of CustomerA-PROT.
For requests coming in on 9.83.100.45,
the server associates the request with default protection defined on a
Protection directive with a label of CustomerB-PROT.
<PRE>
   DefProt   /secret/*   CustomerA-PROT   hostA.bcd.com
   DefProt   /secret/*   CustomerB-PROT   hostB.bcd.com
</PRE>
<P>
The above examples use the optional host name parameter.
If your server receives requests that begin with /secret/, it
associates a different default protection setup with the request based
on the host name in the URL.
For requests coming in for hostA, the server associates
the request with default protection defined on a
Protection directive with a label of CustomerA-PROT.
For requests coming in on hostB,
the server associates the request with default protection defined on a
Protection directive with a label of CustomerB-PROT.
<P>
<H5><A NAME="Header_294">Program default setting</A></H5>
<P> None.
<P>
<H5><A NAME="Header_295">Initial configuration file setting</A></H5>
<P> None.
<P>
<H3><A NAME="HDRPROTECT" HREF="#PToC_296">Protect - Activate protection setup for requests that match a template</A></H3>
<P>
Use this directive to activate protection setup rules for requests
that match a template.
<P>
<B>Attention:</B>  For protection to work properly,
you must put your DefProt and Protect directives
before any Pass or Exec directives in your configuration file.
<P>
The format of the directive is different depending upon whether
you want to point to a label or file containing the
protection subdirectives or you want to include the protection
subdirectives as part of the Protect directive.
<P>
If you want to point to a label or file containing the
protection subdirectives, the format is as follows:
<PRE>
 Protect <VAR>request-template</VAR> &#91;<VAR>setup-file/label</VAR>&#91;FOR <VAR>Server-IP-address</VAR> or <VAR>hostname</VAR> &#93;&#93;
</PRE>
<P>
If you want to include the protection subdirectives as part
of the Protect directive, the format is as follows:
<PRE>
   Protect <VAR>request-template</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;   &#123;
   &nbsp;&nbsp;<VAR>subdirective</VAR>  <VAR>value</VAR>
   &nbsp;&nbsp;<VAR>subdirective</VAR>  <VAR>value</VAR>
   &nbsp;&nbsp;&#46;
   &nbsp;&nbsp;&#46;
   &nbsp;&nbsp;&#46;
   &#125;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>
A template for requests that you want to activate protection for.
The server compares incoming client requests to the template and
activates protection if there is a match.
<P><DT><VAR>setup-file/label</VAR>
<P><DD>If you are pointing to a label or file containing the
protection subdirectives, use this parameter to identify the
protection setup you want to activate for requests that match
<VAR>request-template</VAR>.
<P>
This parameter is optional.
If it is omitted, the protection setup is defined by the most recent
DefProt directive that contains a matching template.
<P>
Protection setup is defined with protection subdirectives.
See <A HREF="#HDRPROTSET">"Protection Subdirectives"</A> for descriptions
of the protection subdirectives.
If present, this parameter can take one of three forms:
<UL>
<P><LI>A full path and file name identifying a separate file that
contains the protection subdirectives.
<P><LI>A protection setup label name that matches
a name defined earlier on a Protection directive.
The Protection directive contains the protection subdirectives.
</UL>
<P><DT><VAR>subdirective  value</VAR>
<P><DD>
If you want to include the protection subdirectives as part
of the Protect directive, use this parameter.
The left brace character must be the last character
on the same line as the Protect directive.
Each subdirective follows on its own line.
The right brace character must be on its own line
following the last subdirective line.
You cannot put any comment lines between the braces.
<P>See <A HREF="#HDRPROTSET">"Protection Subdirectives"</A> for descriptions
of the protection subdirectives.
<P><DT>FOR <VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, FOR 204.146.167.72)
or you can specify a host name (for example, FOR hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P><B>Notes: </B><OL>
<P><LI>
To use this parameter, you must also use the
<VAR>setup-file/label</VAR> parameter or the
<VAR>subdirective value</VAR> parameters.
<P><LI>To use this parameter with a <VAR>setup-file/label</VAR> parameter,
you must put <B>FOR</B>, or some other character string
(without blanks), between the <VAR>setup-file/label</VAR>
parameter and the <VAR>IP-address</VAR>
or <VAR>hostname</VAR> parameter.
<P><LI>To use this parameter with <VAR>subdirective value</VAR> parameters,
do NOT include <B>FOR</B> before the <VAR>IP-address</VAR>
or <VAR>hostname</VAR>.
</OL>
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_297">Examples:</A></H5>
<PRE>
   Protection BUS-PROT &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile d&#58;\docs\WWW\restrict.pwd
      GroupFile  d&#58;\docs\WWW\restrict.grp
      GetMask authors
      PutMask authors
   &#125;
   DefProt /secret/*        d&#58;\server\protect\setup1.acc
   Protect /secret/scoop/*
   Protect /secret/business/*   BUS-PROT
   Protect /topsecret/*  &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile d&#58;\docs\WWW\restrict.pwd
      GroupFile  d&#58;\docs\WWW\restrict.grp
      GetMask topbrass
      PutMask topbrass
   &#125;
  Pass   /secret/scoop/*       d&#58;\WWW\restricted\*
  Pass   /secret/business/*    d&#58;\WWW\confidential\*
  Pass   /topsecret/*          d&#58;\WWW\topsecret\*
</PRE>
<P>
In the above example, the server activates protection as follows:
<UL>
<P><LI>
Requests that start with /secret/scoop/ activate protection.
The protection setup is defined in
the d&#58;\server\protect\setup1.acc protection setup file.
Since the Protect directive does not specify a protection setup,
the protection setup on the previously matching DefProt
directive is used.
<P><LI>
Requests beginning with /secret/business/ activate protection.
The protection setup is defined on
the Protection directive that has a label of BUS-PROT.
<P><LI>
Requests beginning with /topsecret/ activate protection
The protection setup is included directly on the Protect directive.
</UL>
<PRE>
   Protect   /secret/*   CustomerA-PROT   FOR  9.67.106.79
   Protect   /secret/*   CustomerB-PROT   FOR  9.83.100.45
   Protect  /topsecret/*   9.67.106.79  &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile /docs/WWW/customer-A.pwd
      GroupFile  /docs/WWW/customer-A.grp
      GetMask A-brass
      PutMask A-brass
   &#125;
   Protect  /topsecret/*   9.83.100.45   &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile /docs/WWW/customer-B.pwd
      GroupFile  /docs/WWW/customer-B.grp
      GetMask B-brass
      PutMask B-brass
   &#125;
</PRE>
<P>
The above examples use IP addresses.
If your server receives requests that begin
with /secret/ or /topsecret/, it activates a different
protection setup for the request based on the IP address
of the network connection the request comes in on.
<P>
For /secret/ requests coming in on 9.67.106.79,
the server activates the protection setup defined on a
Protection directive with a label of CustomerA-PROT.
For /topsecret/ requests coming in on 9.67.106.79,
the server activates the protection setup defined inline
on the Protect directive for /topsecret/.
<P>
For /secret/ requests coming in on 9.83.100.45,
the server activates the protection setup defined
on a Protection directive with a label of CustomerB-PROT.
For /topsecret/ requests coming in on 9.83.100.45,
the server activates the protection setup defined
inline on the Protect directive for /topsecret/.
<PRE>
   Protect   /secret/*   CustomerA-PROT   FOR  hostA.bcd.com
   Protect   /secret/*   CustomerB-PROT   FOR  hostB.bcd.com
   Protect  /topsecret/*   hostA.bcd.com  &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile /docs/WWW/customer-A.pwd
      GroupFile  /docs/WWW/customer-A.grp
      GetMask A-brass
      PutMask A-brass
   &#125;
   Protect  /topsecret/*   hostB.bcd.com &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile /docs/WWW/customer-B.pwd
      GroupFile  /docs/WWW/customer-B.grp
      GetMask B-brass
      PutMask B-brass
   &#125;
</PRE>
<P>
The above examples use virtual hosts.
If your server receives requests that begin
with /secret/ or /topsecret/, it activates a different
protection setup for the request based on the host name
in the URL.
<P>
For /secret/ requests coming in for hostA.bcd.com,
the server activates the protection setup defined on a
Protection directive with a label of CustomerA-PROT.
For /topsecret/ requests coming in for hostA.bcd.com,
the server activates the protection setup defined inline
on the Protect directive for /topsecret/.
<P>
For /secret/ requests coming in for hostB.bcd.com,
the server activates the protection setup defined
on a Protection directive with a label of CustomerB-PROT.
For /topsecret/ requests coming in for hostB.bcd.com,
the server activates the protection setup defined
inline on the Protect directive for /topsecret/.
<P>
<H5><A NAME="Header_298">Default</A></H5>
<P>Protection is provided for the Configuration and Administration forms
by a Protect directive with a request template of /admin-bin/*.
<P>
<H3><A NAME="HDRPROTECN" HREF="#PToC_299">Protection - Define a named protection setup within the configuration file</A></H3>
<P>
Use this directive to define a protection setup
within the configuration file.
You give the protection setup a name and define the type
of protection using protection subdirectives.
<P><B>Note: </B>In the configuration file, you must place Protection directives
before any DefProt or Protect directives that point to them.
<P>
The format of the directive is:
<PRE>
   Protection <VAR>label-name</VAR>  &#123;
   &nbsp;&nbsp;<VAR>subdirective</VAR>  <VAR>value</VAR>
   &nbsp;&nbsp;<VAR>subdirective</VAR>  <VAR>value</VAR>
   &nbsp;&nbsp;&#46;
   &nbsp;&nbsp;&#46;
   &nbsp;&nbsp;&#46;
   &#125;
</PRE>
<DL>
<P><DT><VAR>label-name</VAR>
<P><DD>The name you want to associate with this protection setup.
The name can then be used by subsequent DefProt and
Protect directives to point to this protection setup.
<P><DT><VAR>subdirective  value</VAR>
<P><DD>
Put a protection subdirective and its value on each line
between the left brace and the right brace.
You cannot put any comment lines between the braces.
<P>See <A HREF="#HDRPROTSET">"Protection Subdirectives"</A> for descriptions
of the protection subdirectives.
</DL>
<P>
<H5><A NAME="Header_300">Example</A></H5>
<PRE>
   Protection  NAME-ME  &#123;
      AuthType Basic
      ServerID restricted
      PasswdFile d&#58;\WWW\password.pwd
      GroupFile  d&#58;\WWW\group.grp
      GetMask groupname
      PutMask groupname
   &#125;
</PRE>
<P>
<H5><A NAME="Header_301">Initial configuration file setting</A></H5>
<PRE>
Protection  PROT-ADMIN  {
    PasswdFile   C&#58;\TCPIP\ETC\ADMIN.PWD
    Mask         All@(*)
    PostMask     All@(*)
    PutMask      All@(*)
    GetMask      All@(*)
    AuthType     Basic
    ServerID     Private_Authorization
}
</PRE>
<P>
<H3><A NAME="HDRPROTSET" HREF="#PToC_302">Protection Subdirectives</A></H3>
<P>Following are descriptions of each of the protection
subdirectives that can be used in a protection setup.
The subdirectives are in alphabetical order.
<P>
Protection setups can either be in separate files or
within the configuration file as part of
DefProt, Protect, or Protection directives.
<P>
See <A HREF="icswg009.html#HDRPROTEX">"Protection example (without SSL client authentication)"</A> and the previous descriptions
of the DefProt, Protect, and Protection directives
for examples of using protection setups.
<P>
<H4><A NAME="HDRACLOVER">ACLOverride - Specify that ACL files override protection setups</A></H4>
<P>
Use this subdirective with a value of <TT>On</TT>
if you want Access Control List files (ACL)
to override the masks specified in the protection setup.
If a directory being protected by the protection setup has an ACL file,
the mask subdirectives in the protection setup are ignored.
(The mask subdirectives are
DeleteMask, GetMask, Mask, PostMask, and PutMask.)
<P>
See <A HREF="icswg009.html#HDRUACLF">"Using Access Control List (ACL) files"</A> for more information on ACL files.
<P>
<H5><A NAME="Header_304">Example</A></H5>
<PRE>
   ACLOverride On
</PRE>
<P>
<H4><A NAME="HDRAUTHTYP">AuthType - Specify authentication type</A></H4>
<P>
Use this subdirective when limiting access based
on user names and passwords.
Specify the type of authentication to use
when the client sends a password to the server.
With basic authentication (<TT>AuthType Basic</TT>),
passwords are sent to the server as plain text.
They are encoded, but not encrypted.
<P>
<H5><A NAME="Header_306">Example</A></H5>
<PRE>
   AuthType Basic
</PRE>
<P>
<H4><A NAME="HDRDELEMSK">DeleteMask - Specify the user names, groups, and addresses allowed to delete files</A></H4>
<P>
Use this subdirective to specify user names, groups, and addresses
templates authorized to make DELETE requests to a protected directory.
See <A HREF="icswg009.html#HDRURULZ">"Rules for specifying user names, group names, and address templates"</A>.
<P>
<H5><A NAME="Header_308">Example</A></H5>
<PRE>
   DeleteMask authors,(niceguy,goodie)&#64;96.96.3.1,128.141.*.*
</PRE>
<P>
<H4><A NAME="HDRGETMASK">GetMask - Specify the user names, groups, and addresses allowed to get files</A></H4>
<P>
Use this subdirective to specify user names, groups, and address
templates authorized to make GET requests to a protected directory.
See <A HREF="icswg009.html#HDRURULZ">"Rules for specifying user names, group names, and address templates"</A>.
<P>
<H5><A NAME="Header_310">Example</A></H5>
<PRE>
   GetMask authors,(niceguy,goodie)&#64;96.96.3.1,128.141.*.*
</PRE>
<P>
<H4><A NAME="HDRGROUPFI">GroupFile - Specify the location of the associated group file</A></H4>
<P>
Use this subdirective to specify the path and file name
of the server group file that you want this protection setup to use.
The groups defined within the server group file can then be used by:
<UL>
<P><LI>
Any mask subdirectives that are part of the protection setup.
(The mask subdirectives are DeleteMask, GetMask, Mask,
PostMask, and PutMask.)
<P><LI>
Any ACL file on a directory that is protected by the protection setup.
</UL>
<P>
See <A HREF="icswg009.html#HDRUSGF">"Using server group files"</A> more information about server group files.
<P>
<H5><A NAME="Header_312">Example</A></H5>
<PRE>
   GroupFile d&#58;\docs\WWW\restrict.group
</PRE>
<P>
<H4><A NAME="HDRMASK">Mask - Specify the user names, groups, and addresses allowed to make HTTP requests</A></H4>
<P>
Use this subdirective to specify user names, groups,
and address templates authorized to make HTTP requests
not covered by other mask subdirectives.
See <A HREF="icswg009.html#HDRURULZ">"Rules for specifying user names, group names, and address templates"</A>.
See <A HREF="#HDRMETHO">"Methods - Set method acceptance"</A> for descriptions of the
HTTP methods supported by the server.
<P>
<H5><A NAME="Header_314">Example</A></H5>
<PRE>
   Mask authors,(niceguy,goodie)&#64;96.96.3.1,128.141.*.*
</PRE>
<P>
<H4><A NAME="HDRPASSWDF">PasswdFile - Specify the location of the associated password file</A></H4>
<P>
Use this subdirective when limiting access based
on user names and passwords.
Specify the path and name of the password file
that you want this protection setup to use.
<P>
<H5><A NAME="Header_316">Examples:</A></H5>
<PRE>
   PasswdFile  c&#58;\WWW\restrict.password
</PRE>
<P>
<H4><A NAME="HDRPOSTMSK">PostMask - Specify the user names, groups, and addresses allowed to post files</A></H4>
<P>
For a secure server, use this subdirective to specify users,
groups, and address templates authorized
to make POST requests to a protected directory.
See <A HREF="icswg009.html#HDRURULZ">"Rules for specifying user names, group names, and address templates"</A>.
<P>
<H5><A NAME="Header_318">Example</A></H5>
<PRE>
   PostMask authors,(niceguy,goodie)&#64;96.96.3.1,128.141.*.*
</PRE>
<P>
<H4><A NAME="HDRPUTMASK">PutMask - Specify the users names, groups, and addresses allowed to put files</A></H4>
<P>
Use this subdirective to specify users, groups, and address templates
authorized to make PUT requests to a protected directory.
See <A HREF="icswg009.html#HDRURULZ">"Rules for specifying user names, group names, and address templates"</A>.
<P>
<H5><A NAME="Header_320">Example</A></H5>
<PRE>
   PutMask authors,(niceguy,goodie)&#64;96.96.3.1,128.141.*.*
</PRE>
<P>
<H4><A NAME="HDRSERVRID">ServerID - Specify a name to associate with the password file</A></H4>
<P>
Use this subdirective when limiting access
based on user names and passwords.
Specify a name you want to associate with the password file being used.
The name does not need to be a real machine name.
<P>
The name is used as an identifier to the requester.
Since different protection setups can use different
password files, having a name associated with the protection setup
can help the client decide which password to send.
Most clients display this name when prompting
for a user name and password.
<P>
<H5><A NAME="Header_322">Example</A></H5>
<PRE>
   ServerID restricted
</PRE>
<P>
<H3><A NAME="HDRPROTSSL" HREF="#PToC_323">SSL client authentication subdirectives</A></H3>
<P>
If you implement SSL client authentication, the server requests
the client's certificate when the client makes an <B>https</B>
request.
The server establishes a secure connection whether or not the
client has a valid certificate.
<P>
You can restrict who can access documents by
using password files and/or user or group authentication in protection
setups as described in <A HREF="icswg009.html#HDRPRT">"Protecting your server"</A>.
You can further restrict who can access documents by coding
SSL client authentication parameters on protection setups,
ACL files, or both.
Coding SSL client authentication parameters on protection
setups is described in <A HREF="icswg009.html#HDRSSLPROT">"Creating protection setups for SSL client authentication"</A>;
coding them in ACL files is described in <A HREF="icswg009.html#HDRUSEACLF">"Step 5. Limiting access to individual files"</A>.
For SSL client authentication parameters, you
can specify all or part of the Distinguished Name (DN) of a client
or of the certification authority (CA) who issued the client's
certificate.
You can also specify DN information for multiple clients or CAs on
a given parameter.
<P>
When you use SSL client authentication parameters,
the server first compares any DN information in a protection setup and
then compares any DN information in an ACL file
with the DN information in the client's certificate.
If the DN information matches, the server serves the document.
<P>
The following can be specified
on the Protection or Protect directive:
<UL>
<P><LI>All or any of the following parameters that make up a
client's Distinguished Name in the client's certificate:
<UL COMPACT>
<LI>CommonName - the client's common name
<LI>Country - the country in which the client resides
<LI>Locality - the locality in which the client resides
<LI>StateOrProvince - the state or province in  which the client
resides
<LI>Organization - the organization of the client
<LI>OrgUnit - the organizational unit of the client
</UL>
<P><LI>All or any of the following subdirectives that make up the
CA's Distinguished Name in the client's certificate:
<UL COMPACT>
<LI>IssuerCommonName - the CA's common name
<LI>IssuerCountry - the country in which the CA resides
<LI>IssuerLocality - the locality in which the CA resides
<LI>IssuerStateOrProvince - the state or province in  which the CA
resides
<LI>IssuerOrganization - the organization of the CA
<LI>IssuerOrgUnit - the organizational unit of the CA
</UL>
</UL>
<P>
<H5><A NAME="Header_324">Example</A></H5>
<PRE>
Protect  /topsecret/*   {
CommonName="Dr Sheila A. Jones"
Organization="RTP Quick Care Center"
}
</PRE>
<P>
In the above example of an inline Protect directive, any
<B>https</B> request beginning with /topsecret/ causes the
server to request the client's certificate.  If the client's
common name is Dr Sheila A. Jones and the client's organization
is RTP Quick Care Center, then the server returns the document
to the client.
<P>
<PRE>
Protect  /topsecret/*   {
CommonName="Dr Sheila A. Jones","Dr Harry S. Smith"
Organization="RTP Quick Care Center"
}
</PRE>
<P>
In the above example, any
<B>https</B> request beginning with /topsecret/ causes the
server to request the client's certificate.  If the client's
common name is either Dr Sheila A. Jones or Dr Harry S. Smith
and the client's organization
is RTP Quick Care Center, then the server returns the document
to the client.
<P>
<H4><A NAME="Header_325">Hints and tips for coding SSL client authentication parameters</A></H4>
<UL COMPACT>
<LI>Specify any or all of a client or CA's DN
<LI>Specify the DN information for multiple clients or
CAs on a given parameter.  The DN information should be
separated by a comma (as shown in the above example).
<LI>Enclose DN information that contains blanks in
double quotes (as shown in the above example).
<LI>Make sure the DN information matches the DN information
in the client's certificate.  This information is case sensitive
and must have the same punctuation.
<LI>Do not use wildcard characters for any of the parameters.
</UL>
<HR>
<H2><A NAME="HDRSECUR" HREF="#PToC_326">Security - Set up network security for the server</A></H2>
Security
<P>
For a secure server, use the directives described in this section
to control how your server uses network security functions.
<P>
If you change these directives, you must stop your server
and then start it again for the changes to take effect.
The server will not pick up the changes if you only restart it.
<P>
<H3><A NAME="HDRKEYFILE" HREF="#PToC_327">KeyFile - Set name for key ring file</A></H3>
<P>
Use this directive to set the name for the key ring file.
<P>
If you change this directive, you must stop your server and then
start it again for the change to take effect.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_328">Initial configuration file setting</A></H5>
<PRE>
   KeyFile keyfile.kyr
</PRE>
<P>
<H5><A NAME="Header_329">Program default setting</A></H5>
<PRE>
   None
</PRE>
<P>
<H3><A NAME="HDRNORMMOD" HREF="#PToC_330">NormalMode - Turn port on or off for HTTP</A></H3>
<P>
Use this directive to turn on or off the port
defined by the Port directive.
<P>
Set NormalMode on for an HTTP connection.
If you also want an SSL connection, set SSLMode on.
<P>
<P><B>Note: </B>You should have either this directive or
the SSLMode directive turned on.
However, if both NormalMode and SSLMode are turned off,
the server will start in normal mode,
and you won't have a secure network connection.
<P>
If you change this directive, you must stop your server and
then start it again for the change to take effect.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_331">Initial configuration file setting</A></H5>
<PRE>
   NormalMode on
</PRE>
<P>
<H5><A NAME="Header_332">Program default setting</A></H5>
<PRE>
   NormalMode on
</PRE>
<P>
<H3><A NAME="HDRSSLAUTH" HREF="#PToC_333">SSLClientAuth - Enable SSL client authentication</A></H3>
<P>
Use this directive to enable SSL client authentication.
<P>
When this directive is enabled, the server requests a certificate
from each client that makes an <B>https</B> request.
Only enable client authentication if you need to authenticate
clients; SSL client authentication increases network traffic.
<P>
If you change this directive, you must stop your server and then start
it again for the change to take effect.  The server will not pick up
the change if you only restart it.
<P>
<H5><A NAME="Header_334">Initial configuration file setting</A></H5>
<PRE>
   SSLClientAuth off
</PRE>
<P>
<H5><A NAME="Header_335">Program default setting</A></H5>
<PRE>
   SSLClientAuth on
</PRE>
<P>
<H3><A NAME="HDRSSLMODE" HREF="#PToC_336">SSLMode - Turn port on or off for SSL</A></H3>
<P>
Use this directive to turn on or off the port
defined by the SSLPort directive.
<P>
Set SSLMode on for an SSL connection.
If you also want an HTTP connection, set NormalMode on.
<P>
<P><B>Note: </B>You should have either this directive
or the NormalMode directive turned on.
However, if both NormalMode and SSLMode are turned off,
the server will start in normal mode,
and you won't have a secure network connection.
<P>
If you change this directive, you must stop your server and then
start it again for the change to take effect.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_337">Initial configuration file setting</A></H5>
<PRE>
   SSLMode on
</PRE>
<P>
<H5><A NAME="Header_338">Program default setting</A></H5>
<PRE>
   SSLMode off
</PRE>
<P>
<H3><A NAME="HDRSSLPORT" HREF="#PToC_339">SSLPort - Set port for SSL security</A></H3>
<P>
Use this directive to set the port for SSL security.
The server will use this port only for HTTPS requests.
(Requests for HTTP will still come on the port that you
set with the Port directive.)
<P>
If you want to use a port other than 443, specify a port above 1024.
<P>
If you change this directive, you must stop your server and then
start it again for the change to take effect.
The server will not pick up the change if you only restart it.
<P>
<H5><A NAME="Header_340">Initial configuration file setting</A></H5>
<PRE>
   SSLPort 443
</PRE>
<P>
<H5><A NAME="Header_341">Program default setting</A></H5>
<PRE>
   SSLPort 443
</PRE>
<HR>
<H2><A NAME="HDRMULTIFT" HREF="#PToC_342">Multi-format processing - Define file extensions for multi-format processing</A></H2>
Multi-format processing
<P>Use the directives described in this section
to associate files with particular extensions to the meta-information
found in the headers of incoming requests.
Based on the file extension (suffixes) specified in these directives,
the server binds files to a content type, content encoding,
content language, character set,
or to a browser sending a request.
<P>
<P>
<H3><A NAME="Header_343" HREF="#PToC_343">Multi-Format Processing</A></H3>
Multi-format processing is only enabled
when the requesting URL contains the .multi suffix or
does not have a suffix (and a file with that name and no suffix does
not exist).
<P>The resource mapping directives,
AddType, AddEncoding, AddLanguage, AddCharSet, and AddClient,
are used to associate meta-information from request headers
with file suffixes or extensions.  Meta-information can
consist of MIME type, encoding,
quality, charset, language, and browser (agent) type.
<P>
The following table identifies meta-information that is
associated with each directive.
<BR>
<P><B><A NAME="Table_2">Table 2. Meta-information and Associated Directive</A></B><BR>
<PRE><TT>
+==========+=======+=======+========+==========+==========+=======+=======+
| Directiv | Suffi | MIME  | Encodi | Quality  | Charset  | Langu | Agent |
| e        |   x   |       |   ng   |          |          |  age  |       |
+==========+=======+=======+========+==========+==========+=======+=======+
| AddType  |   X   |   X   |   X    | X        | X        |   &nbsp;   |   &nbsp;   |
|          |       |       |        | (Optiona | (Optiona |       |       |
|          |       |       |        | l)       | l)       |       |       |
+----------+-------+-------+--------+----------+----------+-------+-------+
| AddEncod |   X   |   &nbsp;   |   X    | X        | &nbsp;        |   &nbsp;   |   &nbsp;   |
| ing      |       |       |        | (Optiona |          |       |       |
|          |       |       |        | l)       |          |       |       |
+----------+-------+-------+--------+----------+----------+-------+-------+
| AddLangu |   X   |   &nbsp;   |   &nbsp;    | X        | &nbsp;        |   X   |   &nbsp;   |
| age      |       |       |        | (Optiona |          |       |       |
|          |       |       |        | l)       |          |       |       |
+----------+-------+-------+--------+----------+----------+-------+-------+
| AddCharS |   X   |   &nbsp;   |   &nbsp;    | X        | X        |   &nbsp;   |   &nbsp;   |
| et       |       |       |        | (Optiona |          |       |       |
|          |       |       |        | l)       |          |       |       |
+----------+-------+-------+--------+----------+----------+-------+-------+
| AddClien |   X   |   &nbsp;   |   &nbsp;    | 2.0      | &nbsp;        |   &nbsp;   |   X   |
| t        |       |       |        | (Implied |          |       |       |
|          |       |       |        | )        |          |       |       |
+----------+-------+-------+--------+----------+----------+-------+-------+
</TT></PRE><P>
<P>There are two pieces to multi-format processing:
<UL>
<P><LI>Request headers from the browser
<P>The browser sends accept-headers containing acceptable values
(content-type, content-encoding, language, charset)
that you can associate to file suffixes with the configuration
directives.
The browser also sends a user-agent header that identifies its browser
type that you can associate with file suffixes in the same manner.
<P><LI>The requested URL
<P>The server finds all files with any extension that matches the
directory and file name and uses
multi-format processing to choose the best file to return.
</UL>
<P>
<H4><A NAME="Header_344">Computing file quality</A></H4>
<P>Multi-format processing computes the quality of a file based on the
set of suffixes in the directory for the requested file name and sends
the highest quality it finds.  A perfect match is always
the highest quality.
<P>
Quality is a floating point number
between 0.0 and 1.0 that represents the relative desirability
of a file.
For example, if the file abc.html is requested and cannot be
found, the server searches the directory for all files that
match abc.*.  Multi-format processing adds the * and finds
all that may qualify.
<P>
When computing file quality, each file is given the value of 1.0 and
this is multiplied by the quality of each suffix.
The quality of a suffix is based on the quality value specified
in the directive which is multiplied by the quality value specified
in the accept-header.  This can be shown as:
<PRE>
  fileQ = (1.0 X ((suffixQ1) X (suffixQ2)...))
</PRE>
or
<PRE>
  fileQ = (1.0 X ((directiveQ X headerQ) X (directiveQ X headerQ)...))
<P>
</PRE>
<P>
The quality value is optional on many of the directives.  If one is
not specified, then the value of 1.0 is assumed.  Also, if the
accept-header does not specify a quality value, 1.0 is assumed.
<P>
If the server is processing a file and suffix
that is defined in the list of AddClient directives, and the
requester agent matches the defined string, the server doubles
the file quality (implying a value of 2.0).
If no match is found, this does not happen.
<P>
<P>
<H5><A NAME="Header_345">Example</A></H5>
<P>
If you have HTML source files in different languages,
<P>
<PRE>
   myfile.du.html
   myfile.uk.html
</PRE>
you could use these directives for multi-format processing:
<PRE>
   AddLanguage .du du
   AddLanguage .uk en_UK
   AddType .html text/html 8bit
</PRE>
<P>Then, if a browser sends a request for <TT>myfile.multi</TT> and
sends the header <TT>Accept-Language: du</TT>, the server returns
myfile.du.html.
The server provides defaults for most commonly used extensions.
Use the extension definition directives only if you need
to add new definitions or change the default definitions.
<P>
<H3><A NAME="HDRADDLANG" HREF="#PToC_346">AddLanguage - Specify the language of files with particular extensions</A></H3>
<P>
Use this directive to bind files with a particular extension to a language.
The format of the directive is:
<PRE>
   AddLanguage <VAR>.extension  language</VAR>
</PRE>
<DL>
<P><DT><VAR>.extension</VAR>
<P><DD>The file extension pattern.
<P><DT><VAR>language</VAR>
<P><DD>The language you want to bind to files
that match the corresponding extension pattern.
</DL>
<P>
<H5><A NAME="Header_347">Examples:</A></H5>
<PRE>
   AddLanguage .en  en_US
</PRE>
<P>
This example defines files with a .en extension
as being in American English.
<PRE>
   AddLanguage .uk  en_UK
</PRE>
<P>
This example defines files with a .uk extension
as being in United Kingdom English.
<P>
<H5><A NAME="Header_348">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRADDENCD" HREF="#PToC_349">AddEncoding - Specify the MIME content encoding of files with particular extensions</A></H3>
<P>
Use this directive
to bind files with a particular extension to a MIME-encoding type.
This directive is seldom used.
<P>
The format of the directive is:
<PRE>
   AddEncoding <VAR>.extension encoding</VAR>
</PRE>
<DL>
<P><DT><VAR>.extension</VAR>
<P><DD>The file extension pattern.
<P><DT><VAR>encoding</VAR>
<P><DD>The MIME-encoding type you want to bind to files
that match the corresponding extension pattern.
</DL>
<P>
<H5><A NAME="Header_350">Example</A></H5>
<PRE>
   AddEncoding .qp   quoted_printable
</PRE>
<P>
<H5><A NAME="Header_351">Initial configuration file setting</A></H5>
<PRE>
AddEncoding  .Z     x-compress    1.0
AddEncoding  .gz    x-gzip        1.0
</PRE>
<P>
<H3><A NAME="HDRADDCHAR" HREF="#PToC_352">AddCharSet - Specify the character set documents are encoded in</A></H3>
<P>
Use this directive
to specify the character set (code page) documents are stored in.
(You can also specify character set on the AddType directive.)
<P>
The format of the directive is:
<PRE>
   AddCharSet <VAR>.extension character-set</VAR>
</PRE>
<DL>
<P><DT><VAR>.extension</VAR>
<P><DD>The file extension pattern.
<P><DT><VAR>character-set</VAR>
<P><DD>The character set
you want to associate with text documents.
For the documents that you assign a character set to,
the server tells client browsers what character set
to use when displaying the document.
If you want to use the character-set field,
you must also include a value for the quality field.
</DL>
<P>
<H5><A NAME="Header_353">Example</A></H5>
<PRE>
   AddCharSet .932   IBM-932
</PRE>
<P>
<H5><A NAME="Header_354">Initial configuration file setting:</A></H5>
None
<P>
<H3><A NAME="HDRADDTYPE" HREF="#PToC_355">AddType - Specify the data type of files with particular extensions</A></H3>
<P>
Use this directive to bind files with a particular extension
to a MIME type/subtype.
You can have multiple occurrences of this directive
in your configuration file.
The server provides defaults for most commonly used extensions.
The format of the directive is:
<PRE>
   AddType <VAR>.extension type/subtype encoding</VAR> &#91;<VAR>quality</VAR>&#91; <VAR>character-set</VAR>&#93;&#93;
</PRE>
<DL>
<P><DT><VAR>.extension</VAR>
<P><DD>The file extension pattern.
You can use the wildcard character (*) only on the following two
special extension patterns:
<DL>
<P><DT><B>*.*
</B><DD>Matches all file names that contain a dot character (.)
and have not been matched by other rules
<P><DT><B>*
</B><DD>Matches all file names that do not contain a dot character (.)
and have not been matched by other rules
</DL>
<P><DT><VAR>type/subtype</VAR>
<P><DD>The MIME type and subtype you want to bind to files
that match the corresponding extension pattern.
<P><DT><VAR>encoding</VAR>
<P><DD>The MIME content encoding to which the data has been converted.
In most cases, the appropriate encoding is 7bit, 8bit, or binary,
and is determined as follows:
<DL>
<P><DT><B>7bit
</B><DD>Data is all represented as short (less than 1000
characters) lines of 8859-1 ASCII data.
Source code or plain text files usually fall into this category.
Exceptions would be files containing
line-drawing characters or accented characters.
<P><DT><B>8bit
</B><DD>Data is represented as short lines,
but may contain characters with the high bit set
(for example, line-drawing characters or accented characters).
PostScript files and text files from European sites
usually fall into this category.
<P><DT><B>binary
</B><DD>This encoding can be used for all data types.
Data may contain not only non-ASCII characters, but also long
(greater than 1000 characters) lines.
Almost every file of type image/*, audio/*, and video/* falls
into this category, as do binary data files of type application/*.
</DL>
<P>Any other value of encoding receives the same treatment
as binary and is passed in MIME headers
as a content encoding MIME header.
7bit and 8bit is not sent in MIME headers.
<P><DT><VAR>quality</VAR>
<P><DD>An optional indicator of relative value
(on a scale of 0.0 to 1.0) for the content type.
The quality value is used if multiple
representations of a file are matched by a request.
The server selects the file that is
associated with the highest quality value.
For example, if the file internet.ps is requested,
and the server has the following AddType directives:
<PRE>
   AddType   .ps application/postscript   8bit   1.0
   AddType   *.* application/binary       binary 0.3
</PRE>
the server would use the application/postscript line because its
quality number is higher.
<P><DT><VAR>character-set</VAR>
<P><DD>An optional indicator of the character set
you want to associate with text documents.
For the documents that you assign a character set to,
the server tells client browsers what character set
to use when displaying the document.
If you want to use the character-set field,
you must also include a value for the quality field.
</DL>
<P>
<H5><A NAME="Header_356">Example</A></H5>
<PRE>
   AddType .bin  application/octet-stream binary  0.8
</PRE>
<P>
<H5><A NAME="Header_357">Defaults:</A></H5>
<PRE>
   AddType .class application/octet-stream binary 1.0
   AddType .mime www/mime                 binary  1.0
   AddType .bin  application/octet-stream binary  1.0
   AddType .oda  application/oda          binary  1.0
   AddType .pdf  application/pdf          binary  1.0
   AddType .ai   application/postscript   8bit    0.5
   AddType .PS   application/postscript   8bit    0.8
   AddType .eps  application/postscript   8bit    0.8
   AddType .ps   application/postscript   8bit    0.8
   AddType .rtf  application/x-rtf        7bit    1.0
   AddType .csh  application/x-csh        7bit    0.5
   AddType .dvi  application/x-dvi        binary  1.0
   AddType .hdf  application/x-hdf        binary  1.0
   AddType .latex application/x-latex     8bit    1.0
   AddType .nc   application/x-netcdf     binary  1.0
   AddType .cdf  application/x-netcdf     binary  1.0
   AddType .sh   application/x-sh         7bit    0.5
   AddType .tcl  application/x-tcl        7bit    0.5
   AddType .tex  application/x-tex        8bit    1.0
   AddType .texi application/x-texinfo    7bit    1.0
   AddType .texinfo  application/x-texinfo 7bit   1.0
   AddType .t    application/x-troff      7bit    0.5
   AddType .roff application/x-troff      7bit    0.5
   AddType .tr   application/x-troff      7bit    0.5
   AddType .man  application/x-troff-man  7bit    0.5
   AddType .me   application/x-troff-me   7bit    0.5
   AddType .ms   application/x-troff-ms   7bit    0.5
   AddType .src  application/x-wais-source 7bit   1.0
   AddType .bcpio application/x-bcpio     binary  1.0
   AddType .cpio application/x-cpio       binary  1.0
   AddType .gtar application/x-gtar       binary  1.0
   AddType .shar application/x-shar       8bit    1.0
   AddType .sv4cpio application/x-sv4cpio binary  1.0
   AddType .sv4crc application/x-sv4crc   binary  1.0
</PRE>
<P>
The following are neutral CAE formats:
<PRE>
   AddType .igs application/iges          binary  1.0
   AddType .iges application/iges         binary  1.0
   AddType .IGS application/iges          binary  1.0
   AddType .IGES application/iges         binary  1.0
   AddType .stp application/STEP          8bit    1.0
   AddType .STP application/STEP          8bit    1.0
   AddType .step application/STEP         8bit    1.0
   AddType .STEP application/STEP         8bit    1.0
   AddType .dxf application/dxf           binary  1.0
   AddType .DXF application/dxf           binary  1.0
   AddType .vda application/vda           binary  1.0
   AddType .VDA application/vda           binary  1.0
   AddType .set application/set           8bit    1.0
   AddType .SET application/set           8bit    1.0
   AddType .stl application/SLA           8bit    1.0
   AddType .STL application/SLA           8bit    1.0
</PRE>
<P>
The following are vendor-specific CAD-formats
commonly used by CERN and in HEP institutes:
<PRE>
   AddType .dwg application/acad          binary  1.0
   AddType .DWG application/acad          binary  1.0
   AddType .SOL application/solids        binary  1.0
   AddType .DRW application/drafting      binary  1.0
   AddType .prt application/pro_eng       binary  1.0
   AddType .PRT application/pro_eng       binary  1.0
   AddType .unv application/i-deas        binary  1.0
   AddType .UNV application/i-deas        binary  1.0
   AddType .CCAD application/clariscad    binary  1.0
   AddType .snd  audio/basic              binary  1.0
   AddType .au   audio/basic              binary  1.0
   AddType .aiff audio/x-aiff             binary  1.0
   AddType .aifc audio/x-aiff             binary  1.0
   AddType .aif  audio/x-aiff             binary  1.0
   AddType .wav  audio/x-wav              binary  1.0
   AddType .gif  image/gif                binary  1.0
   AddType .ief  image/ief                binary  1.0
   AddType .jpg  image/jpeg               binary  1.0
   AddType .JPG  image/jpeg               binary  1.0
   AddType .JPE  image/jpeg               binary  1.0
   AddType .jpe  image/jpeg               binary  1.0
   AddType .JPEG image/jpeg               binary  1.0
   AddType .jpeg image/jpeg               binary  1.0
   AddType .tif  image/tiff               binary  1.0
   AddType .tiff image/tiff               binary  1.0
   AddType .ras  image/cmu-raster         binary  1.0
   AddType .pnm  image/x-portable-anymap  binary  1.0
   AddType .pbm  image/x-portable-bitmap  binary  1.0
   AddType .pgm  image/x-portable-graymap binary  1.0
   AddType .ppm  image/x-portable-pixmap  binary  1.0
   AddType .rgb  image/x-rgb              binary  1.0
   AddType .xbm  image/x-xbitmap          7bit    1.0
   AddType .xpm  image/x-xpixmap          binary  1.0
   AddType .xwd  image/x-xwindowdump      binary  1.0
   AddType .html text/html                8bit    1.0
   AddType .htm  text/html                8bit    1.0
   AddType .htmls text/html               8bit    1.0
   AddType .c    text/plain               7bit    0.5
   AddType .h    text/plain               7bit    0.5
   AddType .C    text/plain               7bit    0.5
   AddType .cc   text/plain               7bit    0.5
   AddType .hh   text/plain               7bit    0.5
   AddType .java text/plain               7bit    0.5
   AddType .m    text/plain               7bit    0.5
   AddType .f90  text/plain               7bit    0.5
   AddType .txt  text/plain               7bit    0.5
   AddType .rtx  text/richtext            7bit    1.0
   AddType .tsv  text/tab-separated-values 7bit   1.0
   AddType .etx  text/x-setext            7bit    0.9
   AddType .MPG  video/mpeg               binary  1.0
   AddType .mpg  video/mpeg               binary  1.0
   AddType .MPE  video/mpeg               binary  1.0
   AddType .mpe  video/mpeg               binary  1.0
   AddType .MPEG video/mpeg               binary  1.0
   AddType .mpeg video/mpeg               binary  1.0
   AddType .qt   video/quicktime          binary  1.0
   AddType .mov  video/quicktime          binary  1.0
   AddType .avi  video/x-msvideo          binary  1.0
   AddType .movie video/x-sgi-movie       binary  1.0
   AddType .gz   multipart/x-gzip         binary  1.0
   AddType .zip  multipart/x-zip          binary  1.0
   AddType .tar  multipart/x-tar          binary  1.0
   AddType .ustar multipart/x-ustar       binary  1.0
   AddType  &#42;.&#42;  www/unknown              binary  0.2
   AddType  &#42;    www/unknown              binary  0.2
   AddType .cxx  text/plain               7bit    0.5
   AddType .for  text/plain               7bit    0.5
   AddType .mar  text/plain               7bit    0.5
   AddType .log  text/plain               7bit    0.5
   AddType .com  text/plain               7bit    0.5
   AddType .sdml text/plain               7bit    0.5
   AddType .list text/plain               7bit    0.5
   AddType .lst  text/plain               7bit    0.5
   AddType .def  text/plain               7bit    0.5
   AddType .conf text/plain               7bit    0.5
   AddType .     text/plain               7bit    0.5
</PRE>
<P>
<H3><A NAME="HDRSUFFXCS" HREF="#PToC_358">SuffixCaseSense - Specify whether extension definitions are case sensitive</A></H3>
<P>
Use this directive to specify whether you want your server
to distinguish between uppercase and lowercase letters
when comparing file extensions to the extension patterns on
AddClient, AddCharSet,
AddType, AddEncoding, and AddLanguage directives.
By default, the server does not distinguish
between uppercase and lowercase.
<P>
<H5><A NAME="Header_359">Example</A></H5>
<PRE>
   SuffixCaseSense  On
</PRE>
<P>
<H5><A NAME="Header_360">Initial configuration file setting</A></H5>
<PRE>
   SuffixCaseSense  Off
</PRE>
<P>
<H3><A NAME="HDRADDCLNT" HREF="#PToC_361">AddClient - Specify file extensions for requesting clients</A></H3>
<P>
Use this directive to bind files with particular extensions to
the type and version of client that is sending the request.
This is often referred to as <B><I>automatic browser detection</I></B>.
<P>
All HTTP requests contain a <TT>User-Agent</TT>
header that identifies the browser sending the request.
The Internet Connection Secure Server enables you to detect
which browser was used to send a request and, based on this information,
respond with a version of a Web page, a document, or other file
that is appropriate for that browser.
<P>
For example, your server can send a page written in HTML 3.0 only
to browsers that are known to support it and send a version
of the same page written in HTML 2.0 to all other browsers.
<P>
Automatic browser detection
is only effective for multi-format processing; that is when
a requesting URL specifies a file without an extension and no file
with that name exists, or it
specifies a file with the extension <B>.multi</B>.  For example,
a link from
this HTML anchor tag initiates multi-format processing:
<PRE>
    &lt;A HREF="http://www.raleigh.ibm.com/cjjd/tscores.multi&gt;
</PRE>
<P>
As a result,
the server will evaluate the values passed in the request headers
(such as User-Agent), along
with the extensions of all the tscores files and the associations
specified in the directives.
Based on this, it will try to find the file that is the
'best match' to send in its response.
<P>
You can
have multiple occurrences of this directive in your configuration
file.  The sequence of AddClient directives is important.
The first AddClient
directive that matches a client's User-Agent value
is the one that will be used to determine the file extension.
<P>If a client's User-Agent is not matched in an AddClient directive,
the server looks for a generic file extension (.htm or .html) to send.
If the server cannot find a generic file extension, it uses an
algorithm to calculate
the quality of all the extensions for that file
and sends the file whose extension yields the highest quality,
considering it to be the 'best match'.
<P>
The format of the directive is:
<PRE>
   AddClient  .extension  user-agent
</PRE>
<DL>
<P><DT><B><VAR>.extension</VAR>
</B><DD>The file extension of the file you want to send to a particular
browser.
<P>
You cannot use any wildcard characters in this pattern.
This extension can be one of a string of suffixes used to qualify a file.
For example, the extension .Mozilla can apply to a file named
TxtSample.UK.Mozilla.html or TxtSample.html.Mozilla.eng.
<P><DT><B><VAR>user-agent</VAR>
</B><DD>The value to match in the User-Agent header of the incoming request.
<P>
This field is case-sensitive.
You can use an asterisk (*) as a wildcard character in this field.
For example, IBM* applies to all versions of IBM's browser, WebExplorer.
</DL>
<P>
<H5><A NAME="Header_362">Examples</A></H5>
<P>
<PRE>
    AddClient  .Mozilla       Mozilla/2.*
    AddClient  .OldMozilla    Mozilla/1.*
    AddClient  .Webex         IBM*
</PRE>
<P>
<H5><A NAME="Header_363">Program default setting</A></H5>
<P>If a client's User-Agent is not matched in an AddClient directive,
the server looks for a generic file extension (.htm or .html) to send.
If the server cannot find a generic file extension, it uses an
algorithm to calculate
the quality of all the extensions for that file
and sends the file whose extension yields the highest quality,
considering it to be the 'best match'.
<P>
<H5><A NAME="Header_364">Initial configuration file setting</A></H5>
<P>None
<P>
<H4><A NAME="Header_365">Using automatic browser detection for Welcome pages</A></H4>
<P>
Using automatic
browser detection for sending various welcome pages requires
additional considerations.  Follow these steps to enable browser
detection and multi-format processing for your welcome pages.  As
an example, they show
how to serve different versions of the index.html
file (in a fictitious webhome directory)
but this also works for Welcome.html,
welcome.html, or Frontpage.html files.
<OL>
<P><LI>Add a Welcome directive to your configuration file
(httpd.cnf or httpd.conf) that specifies the file name
with the .multi extension.
<PRE>
    Welcome  index.multi
</PRE>
<P><LI>Include AddClient directives in the configuration file that
specify which file extensions to send to a particular browser.
<PRE>
    AddClient  .Mozilla       Mozilla/2.*
    AddClient  .OldMozilla    Mozilla/1.*
    AddClient  .Webex         IBM*
</PRE>
<P><LI>Create specific versions of the index file for each of these
file extensions: index.Mozilla.html, index.OldMozilla.html,
index.WebEx.html.
<P><LI>Create a dummy file in the directory called
index.multi.
<P><LI>Specify only the directory name in the URL when linking to this page.
<PRE>
   http://www.web4hire.com/webhome/
</PRE>
</OL>
<HR>
<H2><A NAME="HDRMAPPI" HREF="#PToC_366">Resource mapping - Redirect URLs</A></H2>
Resource mapping
<P>
Use the directives described in this section to control
which requests your server accepts
and where the server looks for resources.
<P>
Use the mapping directives (Exec, Fail, Map, Pass, and Redirect)
to control which requests your server accepts and to
map URL requests to your actual files.
<P>
You can use the mapping directives
to create a virtual hierarchy of Web resources.
You can then change the physical location of files or
directories without affecting the virtual layout.
Even if your server sends documents from different file
systems, it can present a virtual layout.
<P>
The server applies the mapping directives in the order they appear
in the configuration file until a request has been accepted, rejected,
or there are no more directives that apply to the request.
<P>
<H3><A NAME="HDREXEC" HREF="#PToC_367">Exec - Run a CGI program for matching requests</A></H3>
<P>
<P>
Use this directive to specify a template for requests you want
to accept and respond to by running a CGI program.
Once a request matches a template on an Exec directive, the request
is not compared to request templates on any subsequent directives.
<P>
The format of the directive is:
<PRE>
 Exec  <VAR>request-template</VAR> <VAR>program-path</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>
A template for requests that you want your server
to accept and respond to by running a CGI program.
<P>
You must use an asterisk as a wildcard in both the
<VAR>request-template</VAR> and <VAR>program-path</VAR>.
The part of the request that matches
the <VAR>request-template</VAR> wildcard must begin with the name
of the file that contains the CGI program.
<P>
The request can also contain additional data that is passed
to the CGI program in the PATH_INFO environment variable.
The additional data follows the first slash character that comes
after the CGI program file name on the request.
The data is passed according to CGI specifications.
<P><DT><VAR>program-path</VAR>
<P><DD>
The path to the file that contains the CGI program
you want the server to execute for the request.
<VAR>program-path</VAR> must also contain a wildcard.
The wildcard is replaced with the name of the file
that contains the CGI program.
<P>
<B>Important migration note:</B>
The Exec directive is now recursive and applies to all
subdirectories.  You no longer need a separate Exec directive for
each directory under cgi-bin and admin-bin.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_368">Examples:</A></H5>
<PRE>
   Exec  /idd/depts/*  d&#58;\depts\bin\*
</PRE>
<P>
In the above example, if your server receives a request
of /idd/depts/plan/c92, it runs the CGI program
in d&#58;\depts\bin\plan.exe or d&#58;\depts\bin\plan.cmd
with c92 passed to the program as input.
<PRE>
   Exec    /cgi-bin/*    C&#58;\CGI-BIN\customerA\*   204.146.167.72
   Exec    /cgi-bin/*    C&#58;\CGI-BIN\customerB\*   9.83.100.45
</PRE>
<P>
The above example uses the optional IP address parameter.
If your server receives requests that begin with /cgi-bin/,
it serves the request from a different directory based on
the IP address of the network connection the request comes in on.
For requests coming in on 9.67.106.79, the server uses the
C&#58;\CGI-BIN\customerA directory.
For requests coming in on any connection with an address of
9.83.100.45,
the server uses the C&#58;\CGI-BIN\customerB directory.
<PRE>
   Exec    /cgi-bin/*    C&#58;\CGI-BIN\customerA\*   hostA.bcd.com
   Exec    /cgi-bin/*    C&#58;\CGI-BIN\customerB\*   hostB.bcd.com
</PRE>
<P>
The above example uses the optional host name parameter.
If your server receives requests that begin with /cgi-bin/,
it serves the request from a different directory based on
the host name in the URL.
For requests coming in for hostA.bcd.com, the server uses the
C&#58;\CGI-BIN\customerA directory.
For requests coming in on any connection for
hostB.bcd.com,
the server uses the C&#58;\CGI-BIN\customerB directory.
<P>
<H5><A NAME="Header_369">Initial configuration file setting</A></H5>
<PRE>
   Exec    /admin-bin/*  <VAR>d&#58;\path\</VAR>*
   Exec    /cgi-bin/*    <VAR>d&#58;\path\</VAR>*
</PRE>
<P>
<VAR>d&#58;\path\</VAR> is replaced by a directory you
entered at installation.
If you used the installation defaults, your default Exec
directives would be:
<PRE>
   Exec    /admin-bin/*  C&#58;\WWW\ADMIN\*
   Exec    /cgi-bin/*    C&#58;\WWW\CGI-BIN\*
</PRE>
<P>
<H3><A NAME="HDRFAIL" HREF="#PToC_370">Fail - Reject matching requests</A></H3>
<P>
Use this directive to specify a template for requests you
do not want to process.
Once a request matches a template on a Fail directive, the request
is not compared to request templates on any subsequent directives.
<P>
The format of the directive is:
<PRE>
 Fail  <VAR>request-template</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>
A template for requests that you want your server to reject.
If a request matches the template, the server sends the requester
an error message.
<P>
You can use an asterisk as a wildcard in the template.
The tilde character just after a slash (/&#126;)
has to be explicitly matched; a wildcard cannot be used to match it.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_371">Examples:</A></H5>
<PRE>
   Fail /usr/local/private/*
</PRE>
<P>In the above example, the server rejects any
requests beginning with /usr/local/private/.
<PRE>
   Fail    /customerB/*    204.146.167.72
   Fail    /customerA/*    9.83.100.45
</PRE>
<P>
The above example uses the optional IP address parameter.
The server rejects any requests beginning with /customerB/ if the
request comes in on a network connection with IP address 204.146.167.72
The server rejects any requests beginning with /customerA/ if the
request comes in on a network connection with an
IP address of 9.83.100.45.
<PRE>
   Fail    /customerB/*    hostA.bcd.com
   Fail    /customerA/*    hostB.bcd.com
</PRE>
<P>
The above example uses the optional host name parameter.
The server rejects any requests beginning with /customerB/ if the
request comes in for hostA.
The server rejects any requests beginning with /customerA/ if the
request comes in for hostB.
<P>
<H5><A NAME="Header_372">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRMAP" HREF="#PToC_373">Map - Change matching requests to a new result string</A></H3>
<P>
Use this directive to specify a template for requests
you want to change to a new request string.
After your server changes the request, it takes the new request string
and compares it to the request templates on subsequent directives.
<P>
The format of the directive is:
<PRE>
 Map   <VAR>request-template</VAR> <VAR>new-request</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>
A template for requests that you want your server to change and
then continue comparing the new request string to other templates.
<P>
You can use an asterisk as a wildcard in the template.
The tilde character just after a slash (/&#126;)
has to be explicitly matched; a wildcard cannot be used to match it.
<P><DT><VAR>new-request</VAR>
<P><DD>
The new request string you want your server to continue
to compare to the request templates on subsequent directives.
<VAR>new-request</VAR> may contain a wildcard
if the <VAR>request-template</VAR> has one.
The part of the request that matches the
<VAR>request-template</VAR> wildcard is inserted in place
of the wildcard in <VAR>new-request</VAR>.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.raleigh.ibm.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_374">Examples:</A></H5>
<PRE>
   Map   /stuff/*   /good/stuff/*
</PRE>
<P>
In the above example, your server would take any requests
starting with /stuff/ and change the /stuff/ portion
of the request to /good/stuff/.
Anything that followed /stuff/ on the original
request would also be included in the new request string.
So /stuff/whatsup/ would change to /good/stuff/whatsup/.
Your server would take the new request string
and continue to compare it to request
templates on subsequent directives.
<PRE>
   Map   /stuff/*   /customerA/good/stuff/*   204.146.167.72
   Map   /stuff/*   /customerB/good/stuff/*   9.83.104.45
</PRE>
<P>
The above examples use the optional IP address parameter.
If your server receives requests that begin with /stuff/,
it changes the request to a different request string based on
the IP address of the network connection the request comes in on.
For requests coming in on 204.146.167.72
the server changes the /stuff/
portion of the request to /customerA/good/stuff/.
For requests coming in on any connection with an address of
9.83.100.45, the server changes the /stuff/ portion
of the request to /customerB/good/stuff/.
<P>
<PRE>
   Map   /stuff/*   /customerA/good/stuff/*   hostA.bcd.com
   Map   /stuff/*   /customerB/good/stuff/*   hostB.bcd.com
</PRE>
<P>
The above examples use the optional host name parameter.
If your server receives requests that begin with /stuff/,
it changes the request to a different request string based on
the host name in the URL.
For requests coming in for hostA,
the server changes the /stuff/
portion of the request to /customerA/good/stuff/.
For requests coming in for hostB,
the server changes the /stuff/ portion
of the request to /customerB/good/stuff/.
<P>
<H5><A NAME="Header_375">Initial configuration file setting</A></H5>
None.
<P>
<H3><A NAME="HDRPASS" HREF="#PToC_376">Pass - Accept matching requests</A></H3>
<P>
Use this directive to specify a template for requests you want
to accept and respond to with a document from your server.
Once a request matches a template on a Pass directive, the request
is not compared to request templates on any subsequent directives.
<P>
The format of the directive is:
<PRE>
 Pass  <VAR>request-template</VAR> &#91;<VAR>file-path</VAR> &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>
A template for requests that you want your server to accept and
respond to with a document from your server.
<P>
You can use an asterisk as a wildcard in the template.
The tilde character just after a slash (/&#126;)
has to be explicitly matched; a wildcard cannot be used to match it.
<P><DT><VAR>file-path</VAR>
<P><DD>
The path to the file that contains the document you want the
server to return.
<VAR>file-path</VAR> may contain a wildcard
if the <VAR>request-template</VAR> has one.
The part of the request that matches the <VAR>request-template</VAR>
wildcard is inserted in place of the wildcard in <VAR>file-path</VAR>.
<P>
This parameter is optional.
If you do not specify a path, the request itself is used as the path.
The drive is assumed to be the drive
where the server program is installed.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.raleigh.ibm.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_377">Examples:</A></H5>
<PRE>
   Pass   /updates/parts/*   C&#58;\WWW\HTML\catalog\updates\parts\*
</PRE>
<P>
In the above example, your server would respond to a request
starting /updates/parts/ with a document from
C&#58;\WWW\HTML\catalog\updates\parts\.
Anything that followed /updates/parts/ would also be used
to identify the document.
So your server would respond to
the request /updates/parts/printers/ribbon.html with the document
in file C&#58;\WWW\HTML\catalog\updates\parts\printers\ribbon.html.
<PRE>
   Pass   /gooddoc/*
</PRE>
<P>
In the above example, your server would respond
to a request starting with /gooddoc/ with a document from
<VAR>d&#58;</VAR>\gooddoc\ (where <VAR>d&#58;</VAR> is
the drive where you installed the server program).
So your server would respond to the request
/gooddoc/volume1/issue2/newsletter4.html with the document in file
<VAR>d&#58;</VAR>\gooddoc\volume1\issue2\newsletter4.html.
<PRE>
   Pass   /parts/*   C&#58;\customerA\catalog\*   204.146.167.72
   Pass   /parts/*   C&#58;\customerB\catalog\*   9.83.104.45
</PRE>
<P>
The above examples use the optional IP address parameter.
If your server receives requests that begin with /parts/,
it returns a file from a different directory based on
the IP address of the network connection the request comes in on.
For requests coming in on 204.146.167.72
the server returns a file from C&#58;\customerA\catalog\.
For requests coming in on any connection with an address
of 9.83.104.45,
the server returns a file from C&#58;\customerB\catalog\.
<PRE>
   Pass   /parts/*   C&#58;\customerA\catalog\*   hostA.bcd.com
   Pass   /parts/*   C&#58;\customerB\catalog\*   hostB.bcd.com
</PRE>
<P>
The above examples use the optional host name parameter.
If your server receives requests that begin with /parts/,
it returns a file from a different directory based on
the IP address of the network connection the request comes in on.
For requests coming in for hostA.bcd.com,
the server returns a file from C&#58;\customerA\catalog\.
For requests coming in for hostB.bcd.com,
the server returns a file from C&#58;\customerB\catalog\.
<P>
<H5><A NAME="Header_378">Initial configuration file setting</A></H5>
<PRE>
   Pass  /reports/*               <VAR>d&#58;\path\</VAR>*
   Pass  /Docs/*                  <VAR>d&#58;\path\</VAR>*
   Pass  /httpd-internal-icons/*  <VAR>d&#58;\path\</VAR>*
   Pass  /icons/*                 <VAR>d&#58;\path\</VAR>*
   Pass  /Admin/*.html            <VAR>d&#58;\path\</VAR>*
   Pass  /Admin/*.gif             <VAR>d&#58;\path\</VAR>*
   Pass  /*                       <VAR>d&#58;\path\</VAR>*
</PRE>
<P>
<VAR>d&#58;\path\</VAR> is replaced by a directory
you entered at installation.
If you used the installation defaults, these Pass directives would be:
<PRE>
   Pass    /Docs/*                  C&#58;\WWW\DOCS\*
   Pass    /httpd-internal-icons/*  C&#58;\WWW\ICONS\*
   Pass    /icons/*                 C&#58;\WWW\ICONS\*
   Pass    /Admin/*                 C&#58;\WWW\ADMIN\*
   Pass    /*                       C&#58;\WWW\HTML\*
</PRE>
<P><B>Note: </B>The path following <TT>Pass /*</TT>
is your document root directory.
See <A HREF="icswg003.html#HDRDROOT">"Understanding the document root directory"</A> for more information.
<P>
<H3><A NAME="HDRREDIREC" HREF="#PToC_379">Redirect - Send matching requests to another server</A></H3>
<P>
Use this directive to specify a template for requests
you want to accept and send to another server.
Once a request matches a template on a Redirect directive,
the request is not compared to templates on any other directives
in your configuration file.
<P>
The format of the directive is:
<PRE>
 Redirect <VAR>request-template</VAR> <VAR>URL</VAR>  &#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT>
<VAR>request-template</VAR>
<P><DD>
A template for requests that you want your server
to send to another server.
<P>
You can use an asterisk as a wildcard in the template.
The tilde character just after a slash (/&#126;)
has to be explicitly matched; a wildcard cannot be used to match it.
<P><DT>
<VAR>URL</VAR>
<P><DD>
The URL request you want your server to send to another server.
The response to this request goes to the original
requester without any indication that it did not come from your server.
<P>
<VAR>URL</VAR> must contain a protocol specification
and the name of the server to send the request to.
It can also contain a path or file name.
If <VAR>request-template</VAR> uses a wildcard, the
path or file name on <VAR>URL</VAR> can also use a wildcard.
The part of the original request that matches the
wildcard on <VAR>request-template</VAR>
is inserted in place of the wildcard on <VAR>URL</VAR>.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>
If you are using multiple IP addresses or virtual hosts,
use this parameter to specify an IP address or
a host name.
(For more information on using multiple IP addresses or virtual
hosts, see <A HREF="icswg003.html#HDRMULTIIP">"Running your server with multiple IP addresses or virtual hosts"</A>.)
The server uses the directive only for requests that come to the server
on this IP address or for this host.
For an IP address, this is the address of the
server&#39;s network connection,
not the address of the requesting client.
<P>
You can specify an IP address (for example, 204.146.167.72)
or you can specify a host name (for example, hostA.bcd.com).
<P>
This parameter is optional.
Without this parameter, the server uses the directive for all
requests regardless of the IP address the requests come in on
or the host name in the URL.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_380">Example</A></H5>
<PRE>
   Redirect  /chief/stuff/*   http://www.other.org/wahoo/*
</PRE>
<P>
In this example, your server sends any requests beginning with
/chief/stuff/ to the wahoo directory of the www.other.org server.
<PRE>
   Redirect  /stuff/*   http://www.chief.org/wahoo/*   204.146.167.72
   Redirect  /stuff/*   http://www.dawg.com/pound/*    9.83.100.45
</PRE>
<P>
The above examples use the optional IP address parameter.
If your server receives requests that begin with /stuff/,
it redirects the request to different servers based on
the IP address of the network connection the request comes in on.
For requests coming in on 204.146.167.72, the server sends the request
to the wahoo directory of the www.chief.org server.
For requests coming in on any connection with an address
of 9.83.100.45, the server sends the request to the pound directory
of the www.dawg.com server.
<PRE>
   Redirect  /stuff/*   http://www.chief.org/wahoo/*   hostA.bcd.com
   Redirect  /stuff/*   http://www.dawg.com/pound/*    hostB.bcd.com
</PRE>
<P>
The above examples use the optional IP address parameter.
If your server receives requests that begin with /stuff/,
it redirects the request to different servers based on
the host name in the URL.
For requests coming in for hostA, the server sends the request
to the wahoo directory of the www.chief.org server.
For requests coming in for hostB,
the server sends the request to the pound directory
of the www.dawg.com server.
<P>
<H5><A NAME="Header_381">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRINHERIT" HREF="#PToC_382">InheritEnv - Specify which environment variables are inherited by CGI programs</A></H3>
<P>
Use this directive to specify which environment variables
you want your CGI programs to inherit (other than the CGI
environment variables that are specific to CGI processing).
<P>
If you do not include an InheritEnv directive,
all environment variables are inherited by CGI programs.
If you include any InheritEnv directive, only those environment
variables specified on InheritEnv directives will be inherited
along with the CGI-specific environment variables.
The directive allows you to optionally initialize
the value of the variables that are inherited.
<P>
Refer to the <CITE>Web Programming Guide</CITE> for a list
of the CGI-specific environment variables.
<P>
<H5><A NAME="Header_383">Example</A></H5>
<PRE>
   InheritEnv PATH
   InheritEnv LANG=ENUS
</PRE>
<P>In this example, only the PATH and LANG environment variables will
 be inherited by CGI programs.
<P>
<H5><A NAME="Header_384">Initial configuration file setting</A></H5>
<P>None.
The default is all environment variables are inherited by CGI programs.
<P>
<H3><A NAME="HDRDSNHERT" HREF="#PToC_385">DisInheritEnv - Specify which environment variables are disinherited by CGI programs</A></H3>
<P>
Use this directive to specify which environment variables
you do not want your CGI programs to inherit (other than the CGI
environment variables that are specific to CGI processing).
<P>
By default,
all environment variables are inherited by CGI programs.
You can exclude individual environment variables from
being inherited with the DisInheritEnv directive.
<P>
Refer to the <CITE>Web Programming Guide</CITE> for a list
of the CGI-specific environment variables.
<P>
<H5><A NAME="Header_386">Example</A></H5>
<PRE>
   DisInheritEnv PATH
   DisInheritEnv LANG
</PRE>
<P>In this example, all environment variables except
PATH and LANG will be inherited by CGI programs.
<P>
<H5><A NAME="Header_387">Initial configuration file setting</A></H5>
<P>None.
The default is all environment variables are inherited by CGI programs.
<HR>
<H2><A NAME="HDRERRMSGS" HREF="#PToC_388">Error message customization - Customize error messages the server returns to clients</A></H2>
Error message customization
<P>
Use this directive to customize the messages your server sends to
the requesting client when it encounters an error condition.
For example, you can change a message to include more information
about the cause of the problem and suggest possible solutions to fix it.
For internal networks, you might provide
a contact person for your users to call.
<P>Each error condition is identified by a key word.
To decide which error messages you want to customize,
first review the list of error conditions, their causes,
and the default message that the server sends.
Then, for each error message you want to change:
<UL>
<P><LI>Create an individual HTML file with the desired text.
<P><LI>Add an <STRONG>ErrorPage</STRONG> directive to your configuration file
that associates the error condition key word
with the HTML file you want to serve.
</UL>
<P><B>Note: </B>The server does not parse your error files for imbeds, regardless
of the file extensions or use of the Imbeds directive.
<P>
<H3><A NAME="HDRERRPAGE" HREF="#PToC_389">ErrorPage - Specify a customized message for a particular error condition</A></H3>
<P>
Use this directive to specify the name of a file that you want
to send when the server encounters a particular error condition.
<P>
You can place this directive
anywhere in the configuration file.
When the error occurs, the file will be processed according to
the mapping rules defined in your configuration file.
Therefore, the file you want to send must be in a location
that can be reached through the mapping rules as defined
by the Fail, Map, NameTrans, Pass, Redirect, Service directives.
At a minimum, you need a Pass directive that would allow
the server to pass the error message file.
<P>
The format of this directive is:
<PRE>
   ErrorPage <VAR>keyword</VAR> <VAR>/path/filename.htm</VAR>
</PRE>
<DL>
<P><DT><I>keyword
</I><DD>One of the key words associated with an error condition.
See <A HREF="#HDRECKWDM">"Error Conditions, Causes, and Default Messages"</A> for a list of keywords.
<P><DT><I>/path/filename.htm
</I><DD>This is the fully qualified Web name of your error file,
as viewed by a client on the Web.
The file must be an HTML file.
</DL>
<P>
<H5><A NAME="Header_390">Example</A></H5>
<PRE>
   ErrorPage scriptstart /errors/html/scriptstart.htm
</PRE>
<P>
In the above example, when a <STRONG>scriptstart</STRONG> condition is
encountered, the server will send the
scriptstart.htm file to the client.
<P>This file might contain the following HTML text:
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Message for SCRIPTSTART condition&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
The CGI program could not be started.
&lt;P&gt;
&lt;A HREF="mailto&#58;admin@websvr.com"&gt;Notify the administrator&lt;/A&gt;
of this problem.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<P>
If the server's configuration file contains
<TT>PASS&nbsp;/*&nbsp;d:\wwwhome\*</TT>,
then the full path for this message file would be
<TT>d:\wwwhome\errors\html\scriptstart.htm</TT>.
<P>
<H5><A NAME="Header_391">Default:</A></H5>
<P>
If you do not specify an <STRONG>ErrorPage</STRONG> directive
for an error condition, the server's default error message
for that condition will be sent.
<P>
<H4><A NAME="HDRECKWDM">Error Conditions, Causes, and Default Messages</A></H4>
<P>The following list shows the HTTP response code and
key word for each error condition, followed by the
probable cause, and the default message the server sends.
<DL>
<P><DT><B>Code and Key Word</B>
<DD><B>Cause and Default Message</B>
<P><DT><B>302 okredirect
</B><DD>Cause:
The requested file is on another recognized server.
The name of the server is sent back
to the requesting client along with a message.
The client can connect to the correct server
or display the message that is sent.
<P>Default message:
Found.
<P><DT><B>400 badrequest
</B><DD>Cause:
Either there is a network problem, such as a time-out,
or the request was indecipherable.
<P>Default message:
Invalid request - completely unable to parse it.
<P><DT><B>400 badscript
</B><DD>Cause:
The server could determine that the requested file
was a CGI script but it could not process it;
the request was invalid in some way.
<P>Default message:
The script execution request is not valid.
<P><DT><B>400 connectfailed
</B><DD>Cause:
On a tunneled request,
the server could not connect to the requested partner on the requested
port.
<P>Default message:
Host not found or not responding.
<P><DT><B>400 nopartner
</B><DD>Cause:
On a tunneled request,
the server could not connect to the requested hostname due to bad
syntax or an unknown host.
<P>Default message:
Host not found or not responding.
<P><DT><B>400 proxyfail
</B><DD>Cause:
The client is trying to use the server as a proxy,
and although this is allowed, it did not work.
Possibly the destination server doesn't exist or is busy.
<P>Default message:
Proxy load failed.
<P><DT><B>400 unknownmethod
</B><DD>Cause:
The request did not include a recognized method,
such as GET, POST, PUT, or DELETE.
<P>Default message:
The request is not valid or not recognized.
<P><DT><B>401 notauthorized
</B><DD>Cause:
The request requires a user ID and password.
Either the user ID and password sent by the client are not valid
for this request or the client did not send a user ID and password.
<P>Default message:
Not Authorized.  Authentication failed.
<P><DT><B>401 notmember
</B><DD>Cause:
The requested file has a protection rule listing
valid user IDs and passwords and the user ID
of the requesting client is not included in that list.
<P>Default message:
Not authorized to access the document.
<P><DT><B>403 baduser
</B><DD>Cause:
The client requested a user's home directory that does not exist.
<P>Default message:
The user directory is not valid.
<P><DT><B>403 badredirect
</B><DD>Cause:
The server is trying to redirect the request and the <STRONG>Redirect</STRONG>
directive is invalid (possibly missing a destination) or contains a loop.
<P>Default message:
The redirection in the configuration file is not valid.
<P><DT><B>403 byrule
</B><DD>Cause:
Either the file requested is specifically blocked
by a <STRONG>Fail</STRONG> directive or it does not match any of the files that
are allowed to be accessed according to other request mapping directives.
<P>Default message:
Forbidden by rule.
<P><DT><B>403 dirbrowse
</B><DD>Cause:
The client specified a directory (rather than a file name) in the URL
that does not have a welcome page and the administrator has turned off
directory browsing (either for this directory or for the entire server).
<P>Default message:
Directory browsing failed - access forbidden.
<P><DT><B>403 dotdot
</B><DD>Cause:
The client request contains an instruction (/../) to
navigate above the document directory root and this is not allowed.
<P>Default message:
Forbidden - URL containing .. forbidden (don't try to break in).
<P><DT><B>403 ipmask
</B><DD>Cause:
The file requested has a protection rule that includes a list of
valid IP addresses and the client's address is not included in the list.
<P>Default message:
Server will not serve to your IP address.
<P><DT><B>403 ipmaskproxy
</B><DD>Cause:
The client is trying to use the server as a proxy and the client
is not included in the list of host names or IP addresses that are
allowed to do so.
<P>Default message:
Proxy server will not serve to your IP address
(at least with this HTTP method).
<P><DT><B>403 methoddisabled
</B><DD>Cause:
The client requested a method (such as GET, POST, PUT, DELETE) that is
specifically not allowed by the Disable directive.
<P>Default message:
Method <VAR>method</VAR> is disabled on this server.
<P><DT><B>403 noacl
</B><DD>Cause:
The directory has a protection rule but does not have
an Access Control List (ACL) defined and the protection setup
does not have a GetMask subdirective.
The administrator needs to remove the protection rule or add an ACL.
<P>Default message:
Access to this file is not allowed &#39;no ACL file&#39;.
<P><DT><B>403 noentry
</B><DD>Cause:
The directory is protected by an Access Control List
(ACL) and the user is not included in the ACL.
<P>Default message:
Access to this file is not allowed (no ACL entry).
<P><DT><B>403 notallowed
</B><DD>Cause:
The requested file was found but the server's
protection setup prevented access.
This is commonly generated for URLs that point to CGI programs.
<P>Default message:
The PUT and DELETE methods must be specified
in the server's protection setup.
<P><DT><B>403 openfailed
</B><DD>Cause:
After passing the protection rules, the server determined that
the client should have read access to the file
but the operating system will not allow the server to access it.
Possibly the user ID running the server does not have
read permission to the file it is trying to serve or
the file system may be encountering problems.
<P>Default message:
Can't browse selected file.
<P><DT><B>403 setuperror
</B><DD>Cause:
The directory has an Access Control List (ACL) defined
but does not have a protection rule.
The administrator needs to add a protection rule or remove the ACL.
<P>Default message:
Server protection setup error occurred.
Probably, the protection setup file was not found or it
contained a syntax error.
<P><DT><B>404 multifail
</B><DD>Cause:
The requested file could not be found on the server.
The server tried to match the file name exactly as specified and
with every known file extension appended.
<P>Default message:
The file was not found, even after searching on any extensions
to the file name.
<P><DT><B>407 proxynotauth
</B><DD>Cause:
The proxy request requires a user ID and password.
Either the user ID and password sent by the client are not valid
for this request or the client did not send a user ID and password.
Note that some Web browsers do not support
the PROXY-AUTHENTICATE function.
<P>Default message:
Not authorized.
Proxy-Authentication failed (or your browser does not support it).
<P><DT><B>407 proxynotmember
</B><DD>Cause:
The proxy request has a protection rule listing valid user IDs
and the user ID of the requesting client is not included in that list.
<P>Default message:
Not authorized for proxy access to the document.
<P><DT><B>412 preconfail
</B><DD>Cause:
A precondition specified by the client on this request was not met.
For example, this could result from an HTTP/1.1 request with a
condition "if-not-modified-since <VAR>xxx</VAR>".
<P>Default message:
Precondition failed: could not match entity tags.
<P><DT><B>500 scriptio
</B><DD>Cause:
The client requested a CGI script; the server can find it and start
it but cannot get it to process input or output.
The script may contain invalid code.
<P>Default message:
Cannot read script output pipe.
<P><DT><B>500 scriptnotfound
</B><DD>Cause:
The client requested a CGI script that cannot be found.
<P>Default message:
The script request is not valid; none of &lt;<VAR>program</VAR>&gt;
and &lt;<VAR>program</VAR>&gt;.pp is executable.
<P><DT><B>500 scriptstart
</B><DD>Cause:
The client requested a CGI script; the server can find it
but cannot start it.
The script may contain invalid code.
<P>Default message:
Starting the CGI program failed.
Could not communicate with the CGI program.
<P><DT><B>501 noformat
</B><DD>Cause:
The server has encountered an internal error and
cannot interpret the format of the file it is trying to serve.
The file may be corrupted or have an unknown or invalid file extension.
<P>Default message:
Sorry, can't convert from <VAR>mime-type-1</VAR>
to <VAR>mime-type-2</VAR>.
</DL>
<HR>
<H2><A NAME="HDRTIME" HREF="#PToC_393">Timeouts - Close connections automatically</A></H2>
Timeouts
<P>
Use the directives described in this section to
control the amount of time the server spends processing requests.
If you are using persistent connections, see <A HREF="#HDRPERSIST">"PersistTimeout - Specify time to wait for the client to send another request"</A>.
<P>
<H3><A NAME="HDRINPTIMO" HREF="#PToC_394">InputTimeout - Specify input timeout setting</A></H3>
<P>
Use this directive to set the time allowed for a client
to send a request after making a connection to the server.
A client first connects to the server and then sends a request.
If the client does not send a request within the amount of time
on this directive, the server drops the connection.
Specify the time value in any combination of hours,
minutes (or mins), and seconds (or secs).
<P>
<H5><A NAME="Header_395">Example</A></H5>
<PRE>
   InputTimeout 3 mins 30 secs
</PRE>
<P>
<H5><A NAME="Header_396">Initial configuration file setting</A></H5>
<PRE>
   InputTimeout 5 minutes 30 seconds
</PRE>
<P>
<H3><A NAME="HDROUTTIMO" HREF="#PToC_397">OutputTimeout - Specify output timeout setting</A></H3>
<P>
Use this directive to set the maximum time allowed for
your server to send output to a client.
The time limit applies to requests for local files and requests for
which the server is acting as a proxy.
The time limit does not apply for requests that
start a local CGI program.
<P>
If the server does not send the complete response within the amount
of time on this directive, the server drops the connection.
Specify the time value in any combination of hours,
minutes (or mins), and seconds (or secs).
<P>
<H5><A NAME="Header_398">Example</A></H5>
<PRE>
   OutputTimeout 20 minutes
</PRE>
<P>
<H5><A NAME="Header_399">Initial configuration file setting</A></H5>
<PRE>
   OutputTimeout 1 hour
</PRE>
<P>
<H3><A NAME="HDRSCRTIMO" HREF="#PToC_400">ScriptTimeout - Specify script timeout setting</A></H3>
<P>
Use this directive to set the time allowed for a program
started by the server to finish.
The server stops a program if it runs longer than the limit.
Specify the time value in any combination of hours,
minutes (or mins), and seconds (or secs).
<P>
<H5><A NAME="Header_401">Example</A></H5>
<PRE>
   ScriptTimeout 15 mins
</PRE>
<P>
<H5><A NAME="Header_402">Initial configuration file setting</A></H5>
<PRE>
   ScriptTimeout 10 minutes
</PRE>
<HR>
<H2><A NAME="HDRMETHO" HREF="#PToC_403">Methods - Set method acceptance</A></H2>
Methods
<P>
Use the directives described in this section to
control which HTTP methods are enabled for your server.
<P>
Client requests to the server include a method field that indicates
the action the server is to perform on the specified object.
The request identifies the object with a Uniform Resource Locator (URL).
<P>
Following is a list of methods that the server supports
and a description of how the server would respond
to a client request containing the method.
The description assumes the method is enabled.
<UL>
<P><LI>CONNECT- This method is used to establish an SSL tunneling session
between a client, such as NetScape Navigator,
and a remote server through a proxy server.
The sessions between the client and the proxy and between the proxy
and the remote server are secure.  The proxy does not have access to
the data being sent.
The proxy server can be a base or secure server.
<P><LI>DELETE - The server
deletes the object identified by the URL.
After the object is deleted, the URL is not valid.
Because delete typically lets clients delete information
from your server, you must use protection setups to define
who can use this method and which files can be deleted
(see <A HREF="icswg009.html#HDRPRT">"Protecting your server"</A>).
<P><LI>GET - The server returns whatever data is identified by the URL.
If the URL refers to an executable program,
the server returns the output of the program.
<P><LI>HEAD - The server returns only HTTP document headers
without the document body.
<P><LI>OPTIONS - The request returns information about the communications
options on the request/response chain identified by the URL.
This method allows a client to determine the options and requirements
associated with an object, or the capabilities of a server, without
having to act on or retrieve the object.
<P><LI>POST - The request contains data and a URL.
The server accepts the data enclosed in the request as a new
subordinate of the resource identified in the URL.
The resource, which may be a data-accepting program, a gateway
to some other protocol, or a separate program that accepts
annotations, processes the enclosed data.  The POST method is
designed to handle annotation of existing resources; posting
of a message to a bulleting boards, newsgroup, mailing list,
or similar group of articles; providing a block of data, such
as data from a form to a data-handling program; or extending
a database through an append operation.
In the Internet Connection Secure Server, the POST method is used to process the Configuration
and Administration forms.
<P><LI>PUT - The request contains data and a URL.
The server stores the resource identified in the URL.
If the resource already exists, PUT replaces it.  If the resource
does not exist, PUT creates it.
Because PUT typically lets clients add or replace
information on your server, you must use protection setups to define
who can use this method for which files (see <A HREF="icswg009.html#HDRPRT">"Protecting your server"</A>).
<P><LI>TRACE - The server echos the request message sent by the client.
This method allows the client to see
what is being received at the other end of the request chain and use
that data for testing or diagnostic information.
The content type of the response is message/http.
</UL>
<P>
<H3><A NAME="HDRDISABLE" HREF="#PToC_404">Disable - Disable HTTP methods</A></H3>
<P>
Use this directive to specify which HTTP methods you do not
want your server to accept.
<P>
In the default configuration file, the GET, HEAD, OPTIONS,
POST, and TRACE
methods are enabled and all other supported HTTP methods are disabled.
To disable a method that is currently enabled,
change the Enable directive for the method to a Disable directive.
<P><B>Note: </B>The Configuration and Administration forms use the
POST method to make updates to your server configuration.
If you disable the POST method you will not be able
to use the Configuration and Administration forms.
<P>
<H5><A NAME="Header_405">Example</A></H5>
<PRE>
   Disable HEAD
</PRE>
<P>
<H5><A NAME="Header_406">Initial configuration file setting</A></H5>
<PRE>
   Disable   PUT
   Disable   DELETE
</PRE>
<P>
<H3><A NAME="HDRENABLE" HREF="#PToC_407">Enable - Enable HTTP methods</A></H3>
<P>
Use this directive to specify which HTTP methods
you want your server to accept.
<P>
You can enable as many of the HTTP methods as you need.
For each method you want the server to accept, enter a separate
Enable directive followed by the name of the method.
<P>
<H5><A NAME="Header_408">Example</A></H5>
<PRE>
   Enable DELETE
</PRE>
<P>If no Service directive exists for a particular URL, you can
use the Enable directive to perform customized programming for any
HTTP method.  The program you specify on this directive
will override the standard processing for that method.
<P>The format is:
<PRE>
   Enable     <VAR>method d:\path\fileDLL&#58;function_name</VAR>
</PRE>
<P>
<H5><A NAME="Header_409">Example</A></H5>
<PRE>
   Enable
</PRE>
<P>
<H5><A NAME="Header_410">Initial configuration file setting</A></H5>
<PRE>
   Enable GET
   Enable HEAD
   Enable POST
   Enable TRACE
   Enable OPTIONS
</PRE>
<P>
<B>Important migration notes</B>
<UL>
<P><LI>Beginning with Version 4.2, the
CHECKIN and CHECKOUT methods are no longer supported.
You can use the PUT method for CHECKIN and the GET method for
CHECKOUT; however, the
Internet Connection Secure Server does not perform locking or versioning.
<P><LI>The accessory script directives, DELETE-Script, POST-Script,
PUT-Script, and Search, are no longer supported.  You need to
port your scripts to ICAPI applications.  See the <CITE>Web
Programming Guide</CITE> for more information.
</UL>
<HR>
<H2><A NAME="HDRMETA" HREF="#PToC_411">Meta-Information - Name meta-information files and directories</A></H2>
Meta-Information
<P>
Use the directives described in this section to
control where your server looks for meta-information files.
<P>
You can use a separate set of files to store meta-information
about your server&#39;s documents.
The server can include the meta-information with its HTTP responses.
Meta-information describes the file containing a
document, not the contents of the document.
For example, meta-information for a file might give the date
the file was created and the date it was last modified.
You can include any valid response headers as described in the
HTTP 1.1 specification.
<P>
HTTP recognizes MIME headers.
Information that MIME header fields can include are
the file type, subtype, encoding, and content length.
<P>
Each line of a meta-information file contains a header field,
followed by a colon, and the value of the field.
For example:
<PRE>
   Last-Modified: Wednesday, 05-Apr-96 20&#58;51&#58;35 GMT
   Expires: Friday, 30-Jun-96 24&#58;00&#58;00 GMT
   MIME-Version: 1.0
</PRE>
<P>
<H3><A NAME="HDRMETADIR" HREF="#PToC_412">MetaDir - Specify name of subdirectory for meta-information files</A></H3>
<P>
Use this directive to specify the name you want to use for
subdirectories that contain meta-information files.
You can only have one instance of this directive, which means all
your meta-information subdirectories have the same name.
<P>
Any directory from which your server retrieves files can have
a subdirectory with the name specified on this directive.
The files on the meta-information subdirectory contain meta-information
about the files being retrieved.
The meta-information files have the same file name
and extension as the file they describe, plus an added extension.
The name of the added extension is specified on the MetaSuffix directive.
<P>
For example, you might have the following two directives
in your configuration file:
<PRE>
   MetaDir     look_here
   MetaSuffix  &#46;file_desc
</PRE>
<P>
If your server goes to retrieve this file:
<PRE>
   d:/html/realcool/coolindex.html
</PRE>
it looks for meta information to include with the response in this file:
<PRE>
   d:/html/realcool/look_here/coolindex.html.file_desc
</PRE>
<P>
<H5><A NAME="Header_413">Example</A></H5>
<PRE>
   MetaDir  mimeinfo
</PRE>
<P>
<H5><A NAME="Header_414">Initial configuration file setting</A></H5>
<PRE>
   MetaDir  &#46;web
</PRE>
<P><B>Note: </B>The dot character (&#46;) at the beginning of the
default value is used as part of the subdirectory name.
<P>
<H3><A NAME="HDRMETASUF" HREF="#PToC_415">MetaSuffix - Specify the extension for meta-information files</A></H3>
<P>
Use this directive to specify the extension you want
to use for meta-information files.
You can only have one instance of this directive, which means all
meta-information files end with the same extension.
You must include the period character (&#46;)
as part of the value.
<P>
Any file your server retrieves can have
a meta-information file associated with it.
A meta-information file has the same file name and extension
as the file it describes, plus the additional
extension specified on the MetaSuffix directive.
A meta-information file must be located on a subdirectory
of the directory that contains the file being described.
The name of the subdirectory must be the name
specified on the MetaDir directive.
<P>
See the description of the MetaDir directive to see an
example of how MetaDir and MetaSuffix work together.
<P>
<H5><A NAME="Header_416">Example</A></H5>
<PRE>
   MetaSuffix   &#46;head
</PRE>
<P>
<H5><A NAME="Header_417">Initial configuration file setting</A></H5>
<PRE>
   MetaSuffix   &#46;meta
</PRE>
<HR>
<H2><A NAME="HDRAPISETS" HREF="#PToC_418">ICAPI application processing - Specify ICAPI applications for request processing</A></H2>
ICAPI application processing
<P>The Internet Connection Application Programming Interface
(ICAPI) allows you to extend the Internet Connection Secure Server's base functions with your
own customized processing routines.
Use the directives described in this section
to have the server call the application functions in your
program at various points in its request processing cycle.
You can find detailed information for writing
the application functions and compiling
your program in the <CITE>Web Programming Guide</CITE>.
<P>Except for Service and NameTrans, these directives
can be in any order in the configuration file
and you do not need to include every directive.
If you do not have a customized application function
for a particular step, just omit the corresponding directive.
The normal processing for that step will execute by default.
<P>The Service and NameTrans directives behave
like the other mapping directives and are sensitive
to their placement in the configuration file.
For example a rule for <TT>/cgi-bin/foo.dll</TT> must appear
before the rule for <TT>/cgi-bin/*</TT>.
<P>You can also have more than one configuration directive for a step.
For example, you could include two NameTrans directives,
each pointing to a different application function.
When the server performs the name translation step,
it will process your name translation functions in
the order in which they appear within the configuration file.
<P>Your application functions do not have
to be executed for every request:
<UL>
<P><LI>
By specifying a URL with some directives, you can indicate
that you want the application function called only for URLs
that match a certain pattern or mask.
<P><LI>
By specifying an authentication scheme with
the Authentication directive, you can indicate that you want the
application function called only for certain types of authentication.
</UL>
<P>
<H3><A NAME="HDRSERVERI" HREF="#PToC_419">ServerInit - Customize the Server Initialization step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during it's initialization routines.
This code will be executed before any client requests are read
and whenever the server is restarted.
<P>If you are using the GoServe modules in the PreExit or Service steps,
you need to call the <TT>gosclone</TT> module here.
<P>The format of the directive is:
<PRE>
   ServerInit <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_420">Examples:</A></H5>
<PRE>
   ServerInit   d:\ics\api\bin\icsext05.dll&#58;svr_init
 
   ServerInit   d:\www\dll\gosclone.dll&#58;init
</PRE>
<P>
<H5><A NAME="Header_421">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRPREEXIT" HREF="#PToC_422">PreExit - Customize the PreExit step</A></H3>
<P>
Use this directive to specify a customized application function
you want the server to call during the PreExit step.
This code will be executed after a client request
has been read but before any other processing occurs.
You can call the GoServe module during this step.
<P>The format of the directive is:
<PRE>
   PreExit    <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled DLL,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_423">Examples:</A></H5>
<PRE>
   PreExit     d:\ics\api\bin\icsext05.dll&#58;pre_exit
 
   PreExit     d:\www\dll\gosclone.dll&#58;goserve
</PRE>
<P>
<H5><A NAME="Header_424">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRAUTHENC" HREF="#PToC_425">Authentication - Customize the Authentication step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Authentication step.
This code will be executed based on the authentication scheme.
Currently, only <STRONG>Basic</STRONG> authentication is supported.
<P><B>Note: </B>Authentication is part of the authorization process;
it only occurs when authorization is required.
<P>The format of the directive is:
<PRE>
   Authentication <VAR>type</VAR>  <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>type</VAR>
<P><DD>Specifies an authentication scheme which
further determine if your application function is called.
Both an asterisk (*) and <TT>Basic</TT> are accepted values.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_426">Example</A></H5>
<PRE>
   Authentication BASIC d:\ics\api\bin\icsextpgm.dll&#58;basic_authen
</PRE>
<P>
<H5><A NAME="Header_427">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRNAMETRA" HREF="#PToC_428">NameTrans - Customize the Name Translation step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Name Translation step.
This code would supply the mechanism for translating
the virtual path in the request to the physical path on the server,
mapping URLs to specific objects.
<P><B>Note: </B>This is not a terminal mapping rule.
The transformed URL still has to match one of the terminal mapping rule
directives, such as Exec, Fail, Map, Pass, Redirect, and Service.
<P>The format of the directive is:
<PRE>
   NameTrans <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>&nbsp;&#91;<VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
<P><DT><VAR>Server-IP-address</VAR> or <VAR>hostname</VAR>
<P><DD>If you are using multiple IP addresses or virtual hosts,
determines
if your application function will be called only for requests
coming in on a specific IP address or for a specific host.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P>
<H5><A NAME="Header_429">Example</A></H5>
<PRE>
   NameTrans /index.html d:\api\bin\icsextpgm.dll&#58;trans_url
</PRE>
<P>
<H5><A NAME="Header_430">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRAUTHORI" HREF="#PToC_431">Authorization - Customize the Authorization step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Authorization step.
This code would verify that the requested object
can be served to the client.
<P>The format of the directive is:
<PRE>
   Authorization <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_432">Example</A></H5>
<PRE>
   Authorization /index.html d:\api\bin\icsextpgm.dll&#58;trans_url
</PRE>
<P>
<H5><A NAME="Header_433">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDROBJECTT" HREF="#PToC_434">ObjectType - Customize the Object Type step</A></H3>
<P>
Use this directive to specify a customized application function
you want the server to call during the Object Type step.
This code would locate the requested object in the file system
and identify its MIME type.
<P>The format of the directive is:
<PRE>
   ObjectType <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_435">Example</A></H5>
<PRE>
   ObjectType /index.html d:\api\bin\icsextpgm.dld&#58;obj_type
</PRE>
<P>
<H5><A NAME="Header_436">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRSERVICE" HREF="#PToC_437">Service - Customize the Service step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Service step.
This code would service the client request.
For example, it sends the file or runs the CGI program.
<P>
There is no default for this directive.
If the request matches a Service rule (an application function
specified on a Service directive is executed) but it returns
HTTP_NOACTION, the server will generate an error and the
request will fail.
<P>The format of the directive is:
<PRE>
 Service <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>&nbsp;&#91;<VAR>Server-IP_address</VAR> or <VAR>hostname</VAR>&#93;
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
<P><DT><VAR>Server-IP_address</VAR> or <VAR>hostname</VAR>
<P><DD>If you use multiple IP addresses or virtual hosts,
determines if your application function will be called only for requests
coming in on a specific IP address or for a specific host.
<P>
<B>Important migration note:</B>
Beginning with Version 4.2, a wildcard character can no longer
be specified for a server's IP address.
</DL>
<P><B>Note: </B>If you want full path translation, including <VAR>query_string</VAR>,
you must have an asterisk (*) in both the <VAR>request-template</VAR> and
in the <VAR>d:\path\file&#58;function_name</VAR> as shown in the
second example.
<P>
<H5><A NAME="Header_438">Example</A></H5>
<PRE>
   Service  /index.html d:\ics\api\bin\icsext05.dll&#58;serve_req
 
   Service  /cgi-bin/htimage* \ics\api\htimage&#58;Htimage*
</PRE>
<P>
<H5><A NAME="Header_439">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRPICSDBL" HREF="#PToC_440">PICSDBLookup - Customize the PICS label retrieval step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call to retrieve PICS labels for a specified URL.
Your function can either dynamically create a PICS label for the
requested document or to search for a PICS label in an alternative
file or database.
<P>The format of the directive is:
<PRE>
 PICSDBLookup <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_441">Example</A></H5>
<PRE>
   PICSDBLookup  /index.html d:\ics\api\bin\icsext05.dll&#58;get_pics
</PRE>
<P>
<H5><A NAME="Header_442">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRDATAFIL" HREF="#PToC_443">DataFilter - Customize the Data Filter step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Data Filter step.
This code would provide three application functions:
<UL>
<P><LI>An <I>open</I> function to perform any initialization prior to
processing the data
<P><LI>A <I>write</I> function to process the data
<P><LI>A <I>close</I> function to perform any clean up activities
</UL>
<P>
You can only have one DataFilter active for each instance of the
server.
<P>The format of the directive is:
<PRE>
   DataFilter <VAR>d:\path\file&#58;function_name&#58;function_name&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
You will need to supply the name of the open, write, and close functions.
</DL>
<P>
<H5><A NAME="Header_444">Example</A></H5>
<PRE>
   DataFilter d:\ics\bin\icsext05.dll&#58;open_data&#58;write_data&#58;close_data
</PRE>
<P>
<H5><A NAME="Header_445">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRLOG" HREF="#PToC_446">Log - Customize the Log step</A></H3>
<P>
Use this directive to specify a customized application function
you want the server to call during the Log step.
This code would supply logging and other processing
you want performed after the connection has been closed.
<P>The format of the directive is:
<PRE>
   Log       <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
You must supply the names of the open, write, and close functions.
</DL>
<P>
<H5><A NAME="Header_447">Example</A></H5>
<PRE>
   Log       /index.html d:\api\bin\icsextpgm.dll&#58;trans_url
</PRE>
<P>
<H5><A NAME="Header_448">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRERROR" HREF="#PToC_449">Error - Customize the Error step</A></H3>
<P>
Use this directive to specify a customized application function
you want the server to call during the Error step.
This code would execute only when an error is encountered
to provide customized error routines.
<P>The format of the directive is:
<PRE>
   Error   <VAR>request-template</VAR> <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>request-template</VAR>
<P><DD>A template for requests that further determine
if your application function is called.
The specification can include the protocol, domain and host, can be
preceded by a slash (/), and can use an asterisk (*) as a wildcard.
For example, <TT>/front_page.html</TT>,
<TT>http://www.ics.raleigh.ibm.com</TT>,
/pub*, /*, and * are all valid.
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_450">Example</A></H5>
<PRE>
   Error    /index.html d:\ics\api\bin\icsext05.dll&#58;error_rtns
</PRE>
<P>
<H5><A NAME="Header_451">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRPSTEXIT" HREF="#PToC_452">PostExit - Customize the PostExit step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the PostExit step.
This code will be executed regardless
of the return codes from previous steps
or other PostExit handlers.
It allows you to clean up any resources allocated
to process the request.
<P>The format of the directive is:
<PRE>
   PostExit    <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_453">Examples:</A></H5>
<PRE>
   PostExit     \ics\api\bin\icsext05.dll&#58;post_exit
</PRE>
<P>
<H5><A NAME="Header_454">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRSERVERT" HREF="#PToC_455">ServerTerm - Customize the Server Termination step</A></H3>
<P>
Use this directive to specify a customized application function you
want the server to call during the Server Termination step.
This code would execute when an orderly shutdown occurs
and whenever the server is restarted.
It allows
you to release resources allocated by a PreExit application function.
<P>The format of the directive is:
<PRE>
   ServerTerm   <VAR>d:\path\file&#58;function_name</VAR>
</PRE>
<DL>
<P><DT><VAR>d:\path\file</VAR>
<P><DD>The fully qualified file name of your compiled program,
including the extension.
<P><DT><VAR>&#58;function_name</VAR>
<P><DD>The name you gave your application function within your program.
</DL>
<P>
<H5><A NAME="Header_456">Example</A></H5>
<PRE>
   ServerTerm  d:\ics\api\bin\icsext05.dll&#58;shut_down
</PRE>
<P>
<H5><A NAME="Header_457">Initial configuration file setting</A></H5>
<P>None.
<HR>
<H2><A NAME="HDRJAVASPT" HREF="#PToC_458">Servlet API Support - Configure the server for Java servlet API support</A></H2>
Java support
<P>
Use this directive to configure your server to support Sun's Java
servlet API.  This will allow you to execute servlets that
extend the Java servlet interface and it's classes, as
defined in the java.servlet and java.servlet.http packages in
Sun's Java Servlet API White Paper
(http://java.sun.com/products/jeeves//CurrentRelease/doc/api.html).
<P>
A servlet is like a server-side applet that
runs on a Java thread
but does not have a user interface.
Servlets are persistent; they
are instantiated and initialized just once when they are
loaded and execute a servlet service() method
for each request.
This allows servlets to create dynamic output similar to CGI programs.
<P>
Using the Java configuration directives, you have the ability to:
<UL COMPACT>
<LI>Turn the servlet support on or off
<LI>Specify the number of Java
threads to use to process servlet requests
<LI>Name the directory where you keep the servlets
<LI>Choose whether to log servlet messages and the location of the log
<LI>Specify a servlet's initialization parameters
</UL>
<P>
On the Internet Connection Secure Server, servlets cannot be loaded from the network; they
must reside on the local system.
Servlets must run in a separate process than the one in which the
Internet Connection Secure Server is running.  To ensure this, put all servlets in
the directory specified by the <TT>ServletDir</TT> directive.
<P><B>Note to servlet writers</B>:
<P>When writing your servlets, you can write your own code for the
following servlet class methods
(the service method is required and the others are optional):
<UL COMPACT>
<LI>init()
<LI>service(<VAR>request,response</VAR>)
<LI>getServletInfo()
<LI>destroy()
</UL>
All other java servlet API methods are implemented by the Internet Connection Secure Server
for its processing and your use.
Be sure you <B>do not override any other
Java servlet API methods</B> or you will be overriding the server's
code.
<P>
<H3><A NAME="HDRSRVENAB" HREF="#PToC_459">EnableJavaServletSupport - Enable the server to support Java servlets</A></H3>
<P>
Use this directive to specify whether or not you want your server to
support Java servlets.
If you specify <TT>no</TT>,
the servlet support is turned off and all the other Java servlet
directives are ignored.
If you specify <TT>yes</TT>,
the servlet support is turned on, the Java Virtual Machine (JVM)
is started,
and all the other Java servlet directives are implemented.
<P>
The format of this directive is:
<PRE>
   EnableJavaServletSupport <VAR>value</VAR>
</PRE>
<P>
<H5><A NAME="Header_460">Example</A></H5>
<PRE>
   EnableJavaServletSupport yes
</PRE>
<P>
<H5><A NAME="Header_461">Default</A></H5>
<PRE>
   EnableJavaServletSupport no
</PRE>
<P>
<H3><A NAME="HDRJVMAXTH" HREF="#PToC_462">MaxActiveJavaThreads - Specify threads for request processing</A></H3>
<P>
Use this directive to specify the maximum number of Java
threads that the server will use to process Java servlets.
<P>
The format of this directive is:
<PRE>
   MaxActiveJavaThreads  <VAR>number</VAR>
</PRE>
<P>
<H5><A NAME="Header_463">Example</A></H5>
<PRE>
   MaxActiveJavaThreads  25
</PRE>
<P>
<H5><A NAME="Header_464">Default:</A></H5>
<PRE>
   MaxActiveJavaThreads  10
</PRE>
<P>
<H3><A NAME="HDRSERVLOG" HREF="#PToC_465">ServletLog - Specify a log file for Java servlet messages</A></H3>
<P>
Use this directive to specify the name and location of the log file
for Java servlet messages.  All messages generated by the servlet log
method will be written to this file.  If you omit this directive,
none of the messages generated by the servlet log method
will be captured.
<P><B>Note: </B>This log is not
automatically deleted on schedule like other server logs.
You will have to monitor and control the size of this log yourself.
<P>
The format of this directive is:
<PRE>
   ServletLog   <VAR>drive&#58;\path\filename</VAR>
</PRE>
<P>
<H5><A NAME="Header_466">Example</A></H5>
<PRE>
   ServletLog   D&#58;\WWW\ics\logs\js-log-12
</PRE>
<P>
<H5><A NAME="Header_467">Default</A></H5>
<PRE>
   ServletLog   <VAR>c&#58;\path</VAR>\logs\servlet-log
</PRE>
<VAR>c&#58;\path</VAR> is replaced by the drive and directory where
you installed the server.
The default directory is <TT>C:\WWW</TT>.
<P>
<H3><A NAME="HDRSRVUDIR" HREF="#PToC_468">ServletDir - Specify the directory for Java servlets</A></H3>
<P>
Use this directive to specify the name and location of the directory
where you will keep all Java servlets.
<P>
The format of this directive is:
<PRE>
   ServletDir   <VAR>drive&#58;\path\directory</VAR>
</PRE>
<P>
<H5><A NAME="Header_469">Example</A></H5>
<PRE>
   ServletDir   D&#58;\WWW\ics\servlets\v42\public
</PRE>
<P>
<H5><A NAME="Header_470">Default</A></H5>
<PRE>
   ServletDir   <VAR>c&#58;\path</VAR>\public
</PRE>
<VAR>c&#58;\path</VAR> is replaced by the drive and directory where
you installed the server.
The default directory is <TT>C:\WWW</TT>.
<P>
<H3><A NAME="HDRSERVLET" HREF="#PToC_471">Servlet - Specify a servlet's initialization parameters</A></H3>
<P>
Use this directive to specify the name and value of the parameters
passed to a Java servlet when it is initialized.
These must be listed one per line.
<P>
The format of this directive is:
<PRE>
   Servlet <VAR>servlet-name</VAR> {
           <VAR>parm0=value0</VAR>
           <VAR>parm1=value1</VAR>
           <VAR>parm2=value2</VAR>
           ....
           <VAR>parmn=valuen</VAR>
   }
</PRE>
<P>
<H5><A NAME="Header_472">Example</A></H5>
<PRE>
   Servlet MyServlet {
       count=1
       path=d:\w3\list
   }
</PRE>
<P>
<H5><A NAME="Header_473">Default</A></H5>
<P>None
<HR>
<H2><A NAME="HDRPROXSET" HREF="#PToC_474">Proxy server settings - Configure server as a proxy</A></H2>
Proxy server settings
<P>
Use the directives described in this section to configure
your server as a caching proxy.
See <A HREF="icswg003.html#HDRPROXY">"Running your server as a proxy"</A> for more information on proxy servers.
<P>
<H3><A NAME="HDRCACHDFE" HREF="#PToC_475">CacheDefaultExpiry - Specify default expiration time for files that do not have an expiration date</A></H3>
<P>
Use this directive to set a default expiration time for files that
the server did not give either an Expires or a Last-Modified header to.
You specify a URL template and the expiration time
for files with URLs that match the template.
You can have multiple occurrences of this directive
in the configuration file.
Include a separate directive for each template.
The URL template must include the protocol.
Specify the time value in any combination
of months, weeks, days, and hours.
<P>
<H5><A NAME="Header_476">Examples:</A></H5>
<PRE>
   CacheDefaultExpiry ftp&#58;* 1 month
   CacheDefaultExpiry gopher&#58;* 10 days
</PRE>
<P>
<H5><A NAME="Header_477">Initial configuration file setting</A></H5>
<PRE>
   CacheDefaultExpiry ftp&#58;*  1 day
   CacheDefaultExpiry gopher&#58;*  1 day
   CacheDefaultExpiry http&#58;*  0 days
</PRE>
<P>
Notice in the above defaults that the default expiration for HTTP is 0.
HTTP should be kept at 0 because many script programs don&#39;t
give an expiration date, yet their output expires immediately.
(A value other than 0 may cause problems.)
<P>
<H3><A NAME="HDRCACHXCK" HREF="#PToC_478">CacheExpiryCheck - Turn cache expirations off</A></H3>
<P>
Use this directive to specify whether you want
the server to return cached files that have expired.
Specify <TT>Off</TT> for the value if you want
the server to be able to return expired files.
Use the default value of <TT>On</TT> if you do not
want the server to return expired files.
Generally, you will not want the server to return expired files.
An exception might be if you were demonstrating the server and
do not particularly care about the content being returned.
<P>
<H5><A NAME="Header_479">Example</A></H5>
<PRE>
   CacheExpiryCheck Off
</PRE>
<P>
<H5><A NAME="Header_480">Initial configuration file setting</A></H5>
<PRE>
   CacheExpiryCheck On
</PRE>
<P>
<H3><A NAME="HDRCACHLMF" HREF="#PToC_481">CacheLastModifiedFactor - Specify fraction of Last-Modified time to be used for determining expiration date</A></H3>
<P>
HTTP servers usually give the Last-Modified time for a file,
but not the Expires date.
Use this directive to have your server approximate the
expiration date of these files based on the Last-Modified time.
The server uses the Last-Modified date to determine how long
it has been since the file was modified.
The server multiplies that length of time by the value on the
CacheLastModifiedFactor directive.
The server uses the result of this calculation to assign
the file an expiration date when it caches the file.
<P>
<H5><A NAME="Header_482">Examples:</A></H5>
<PRE>
   CacheLastModifiedFactor 0.2
</PRE>
<P>The above example would cause files modified
five months ago to expire after one month.
<PRE>
   CacheLastModifiedFactor Off
</PRE>
<P>The above example would turn this function off.
<P>
<H5><A NAME="Header_483">Initial configuration file setting</A></H5>
<PRE>
   CacheLastModifiedFactor 1.5
</PRE>
<P>The default of 1.5 causes files modified in the past week to be
updated in one day.
<P>
<H3><A NAME="HDRCACHLM1" HREF="#PToC_484">CacheLimit_1 - Specify lower limit for cached file size</A></H3>
<P>
The server uses an algorythm for garbage collection
to determine which files to delete.
The size of a file is part of the calculation.
The size of small files is not taken into account in the calculation.
The size of large files is taken into account;
the larger the file, the more likely it is to be deleted.
<P>
Use this directive to tell the server what should be considered
a small file.
The value can be specified in bytes (B), kilobytes (K),
megabytes (M), or gigabytes (G).
It does not matter if you have a space between the number
and the value (B, K, M, G).
<P>
<H5><A NAME="Header_485">Example</A></H5>
<PRE>
   CacheLimit_1 400 K
</PRE>
<P>
<H5><A NAME="Header_486">Initial configuration file setting</A></H5>
<PRE>
   CacheLimit_1 20 K
</PRE>
<P>
<H3><A NAME="HDRCACHLM2" HREF="#PToC_487">CacheLimit_2 - Specify upper limit for cached file size</A></H3>
<P>
Use this directive to specify the maximum size of files to be
cached.  Files larger than this size will not be cached.
The value can be specified in bytes (B), kilobytes (K),
megabytes (M), or gigabytes (G).
It does not matter if you have a space between the number
and the value (B, K, M, G).
<P>
<H5><A NAME="Header_488">Example</A></H5>
<PRE>
   CacheLimit_2 2000 K
</PRE>
<P>
<H5><A NAME="Header_489">Initial configuration file setting</A></H5>
<PRE>
   CacheLimit_2 400 K
</PRE>
<P>
<H3><A NAME="HDRCACHLTO" HREF="#PToC_490">CacheLockTimeOut - Specify how long a file being cached can remain locked</A></H3>
<P>
During retrieval, cache files are locked.
If something goes wrong, a locked file may be left hanging.
Use this directive to set the amount of time after
which the lock on the file can be broken.
Specify the time value in minutes (mins).
<P><B>Note: </B> Set CacheLockTimeOut to a value equal to
or greater than OutputTimeOut.
The default value of <TT>20 minutes</TT> is the
same as the default for OutputTimeOut.
<P>
<H5><A NAME="Header_491">Example</A></H5>
<PRE>
   CacheLockTimeOut 30 mins
</PRE>
<P>
<H5><A NAME="Header_492">Initial configuration file setting</A></H5>
<PRE>
   CacheLockTimeOut 20 minutes
</PRE>
<P>
<H3><A NAME="HDRCACHNOC" HREF="#PToC_493">CacheNoConnect - Specify stand alone cache mode</A></H3>
<P>
Use this directive to specify whether you want
the proxy server to retrieve files from remote servers.
Use the default value of <TT>Off</TT> if you want
the server to be able to retrieve files from remote servers.
<P>
Specify <TT>On</TT> if you want the
server to run in stand alone cache mode.
This means that the server can return
only files already stored in its cache.
Typically, you would also set the CacheExpiryCheck directive
to <TT>Off</TT> when running the server in this mode.
<P>
Running the server in stand alone cache mode can be useful
if you are using the server for demonstrations.
If you know all the files you want to use for a demonstration
are stored in the cache, then you do not need a network connection.
<P>
<H5><A NAME="Header_494">Example</A></H5>
<PRE>
   CacheNoConnect On
</PRE>
In the above example, the server returns only files stored in its cache.
<P>
<H5><A NAME="Header_495">Initial configuration file setting</A></H5>
<PRE>
   CacheNoConnect Off
</PRE>
<P>
<H3><A NAME="HDRCACHONY" HREF="#PToC_496">CacheOnly - Cache only files with URLs that match a template</A></H3>
<P>
Use this directive to specify that only files with URLs
that match the given template should be cached.
You can have multiple occurrences of this directive
in the configuration file.
Include a separate directive for each template.
The URL template must include the protocol.
<P>
<H5><A NAME="Header_497">Example</A></H5>
<PRE>
   CacheOnly http&#58;//realstuff/*
</PRE>
<P>
<H5><A NAME="Header_498">Initial configuration file setting</A></H5>
<P>None
<P>
<H3><A NAME="HDRCACHROT" HREF="#PToC_499">CacheRoot - Specify cache root directory</A></H3>
<P>
Use this directive to specify the top directory in the cache hierarchy.
The server will create subdirectories
within this directory for each cached protocol.
It will also create subdirectories under each protocol subdirectory
for each remote server.
<P>
<H5><A NAME="Header_500">Example</A></H5>
<PRE>
   CacheRoot /webcache
</PRE>
<P>
<H5><A NAME="Header_501">Initial configuration file setting</A></H5>
<P>None
<P>
<H3><A NAME="HDRCACHSIZ" HREF="#PToC_502">CacheSize - Specify cache size</A></H3>
<P>
Use this directive to set the maximum amount
of disk space you want the proxy cache to use.
If you have plenty of disk space, you may want
to substantially increase the 5 M default size.
The size of the cache will usually stay below
the maximum, but may occasionally grow slightly larger.
When the maximum size is reached, the garbage collection process begins.
The value can be specified in bytes (B), kilobytes (K),
megabytes (M), or gigabytes (G).
It does not matter if you have a space between the number
and the value (B, K, M, G).
<P>
<H5><A NAME="Header_503">Example</A></H5>
<PRE>
   CacheSize 50 M
</PRE>
<P>
<H5><A NAME="Header_504">Initial configuration file setting</A></H5>
<PRE>
   CacheSize 5 M
</PRE>
<P>
<H3><A NAME="HDRCACHUNU" HREF="#PToC_505">CacheUnused - Specify how long to keep unused cached files that match a template</A></H3>
<P>
Use this directive to set the maximum amount of time for the server
to keep unused cached files with URLs matching a given template.
The server deletes unused files with URLs matching the
template after they have been cached for the specified time,
regardless of their expiration date.
You can have multiple occurrences of
this directive in the configuration file.
Include a separate directive for each template.
The URL template must include the protocol.
Specify the time value in any combination
of months, weeks, days, and hours.
<P>
<H5><A NAME="Header_506">Examples:</A></H5>
<PRE>
   CacheUnused ftp&#58;* 3 weeks
   CacheUnused gopher&#58;* 3 days 12 hours
   CacheUnused * 4 weeks
</PRE>
<P>
<H5><A NAME="Header_507">Initial configuration file setting</A></H5>
<P>None
<P>
<H3><A NAME="HDRCACHING" HREF="#PToC_508">Caching - Turn proxy caching on/off</A></H3>
<P>
Use this directive to enable the caching of files.
With caching turned on, the proxy server can store the files
it retrieves from other servers in a local cache.
The server can then respond to subsequent requests for the
same files without having to retrieve them from another servers.
This can improve response time.
<P>
<H5><A NAME="Header_509">Example</A></H5>
<PRE>
   Caching On
</PRE>
<P>
<H5><A NAME="Header_510">Initial configuration file setting</A></H5>
<PRE>
   Caching Off
</PRE>
<P>
<H3><A NAME="HDRFTPPROX" HREF="#PToC_511">ftp_proxy - Specify a proxy server for this proxy to connect to for FTP requests</A></H3>
<P>
If your proxy server is part of a chain of proxies,
use this directive to specify the name of another proxy
that this server should contact for FTP requests.
<P>
<H5><A NAME="Header_512">Example</A></H5>
<PRE>
   ftp_proxy http://outer.proxy.server/
</PRE>
<P>
<H5><A NAME="Header_513">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRGC" HREF="#PToC_514">Gc - Turn garbage collection on or off</A></H3>
<P>
If you have enabled caching, the server uses the garbage collection
process to delete files that should no longer be cached.
Files are deleted based on their
expiration date and other proxy directive values.
Use this directive to turn garbage collection on or off.
Generally, you would not turn off garbage
collection if you have enabled caching.
If you do, your cache file could grow
beyond the maximum size you set for it.
<P>
Assuming garbage collection is turned on, the garbage collection
process runs when the cache reaches its maximum size
(as specified on the CacheSize directive).
The garbage collection process will also run
at the time of day specified on the GcDailyGc directive.
<P>
<H5><A NAME="Header_515">Example</A></H5>
<PRE>
   Gc On
</PRE>
<P>
<H5><A NAME="Header_516">Initial configuration file setting</A></H5>
<PRE>
   Gc Off
</PRE>
<P>
<H3><A NAME="HDRGCDAILY" HREF="#PToC_517">GcDailyGc - Specify a daily time for garbage collection</A></H3>
<P>
Use this directive to specify a particular time of day
to run the garbage collection process.
Garbage collection occurs automatically
when the cache size limit is reached.
By specifying a daily time for garbage collection you can also
remove cached files before the cache reaches its maximum.
Specify the time value in 24&#58;00 hour format.
Generally, you would want the garbage collection process
to run when your server is not being used much for other things.
This is why the default is 03&#58;00.
<P>
<H5><A NAME="Header_518">Example</A></H5>
<PRE>
   GcDailyGc 22&#58;00
</PRE>
<P>
The above example would start the garbage collection process at 10 PM.
<PRE>
   GcDailyGc Off
</PRE>
<P> The above example would disable daily garbage collection.
<P>
<H5><A NAME="Header_519">Initial configuration file setting</A></H5>
<PRE>
   GcDailyGc 03&#58;00
</PRE>
<P>
<H3><A NAME="HDRGCMEMUS" HREF="#PToC_520">GcMemUsage - Specify how much memory to use for garbage collection</A></H3>
<P>
Garbage collection works best if it can read
all cache information into memory at one time.
It may not be able to read in the entire cache if your
system does not have enough main memory.
<P>
Use this directive to specify how much memory garbage collection can use.
The value you specify should be approximately the amount of virtual
memory that the server may use while performing garbage collection.
The amount of memory needed will vary based on dynamic
changes such as the directory structure of cached files.
Specify the value as a number that represents kilobytes,
 but do not put a K next to the number.
<P>
If garbage collection fails because there is not enough memory
on your system, set this directive to a smaller value.
If you have plenty of memory to spare,
you may want to set this value above the default of 500.
<P>
<H5><A NAME="Header_521">Example</A></H5>
<PRE>
   GcMemUsage 100
</PRE>
<P>The example above might be used
for a machine with a small amount of memory.
<P>
<H5><A NAME="Header_522">Initial configuration file setting</A></H5>
<PRE>
   GcMemUsage 1000
</PRE>
<P>
<H3><A NAME="HDRGOPHPXY" HREF="#PToC_523">gopher_proxy - Specify a proxy server for this proxy to connect to for Gopher requests</A></H3>
<P>
If your proxy server is part of a chain of proxies,
use this directive to specify the name of another proxy
that this server should contact for Gopher requests.
<P>
<H5><A NAME="Header_524">Example</A></H5>
<PRE>
   gopher_proxy gopher://outer.proxy.server/
</PRE>
<P>
<H5><A NAME="Header_525">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRHTTPRXY" HREF="#PToC_526">http_proxy - Specify a proxy server for this proxy to connect to for HTTP requests</A></H3>
<P>
If your proxy server is part of a chain of proxies,
use this directive to specify the name of another proxy
that this server should contact for HTTP requests.
<P>
<H5><A NAME="Header_527">Example</A></H5>
<PRE>
   http_proxy http://outer.proxy.server/
</PRE>
<P>
<H5><A NAME="Header_528">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRMAXCLBU" HREF="#PToC_529">MaxContentLengthBuffer - Set the size of the buffer for dynamic data generated by the server</A></H3>
<P>
Use this directive to set the size of the buffer for dynamic data
generated by the server.
Dynamic data is
output from CGI programs, server-side includes, and API programs.
It is data that does not come from a proxy request.
<P>
The value can be specified in bytes (B), kilobytes (K),
megabytes (M), or gigabytes (G).
It does not matter if you have a space between the number
and the value (B, K, M, G).
<P>
<H5><A NAME="Header_530">Example</A></H5>
<PRE>
   MaxContentLengthBuffer 2 M
</PRE>
<P>
<H5><A NAME="Header_531">Initial configuration file setting</A></H5>
<PRE>
   MaxContentLengthBuffer 50 K
</PRE>
<P>
<H3><A NAME="HDRNOPROXY" HREF="#PToC_532">no_proxy - Connect directly to domains matching templates</A></H3>
<P>
Use this directive to specify the domains that you want the server
to directly connect to rather than going through a proxy.
<P>
Specify the value as a string of domain names or domain name templates.
Separate each entry in the string with a comma.
Do <B>not</B> put any spaces in the string.
<P>
You specify templates on this directive a bit differently than
the way you specify templates on other directives.
Most importantly, you <B>cannot</B> use the wildcard character (*).
What you <B>can</B> do is specify a template
by including only the last part of a domain name.
The server connects directly to any domains that
end with a string matching the templates you specify.
The following example shows how this works.
<P>
<H5><A NAME="Header_533">Example</A></H5>
<PRE>
   no_proxy   www.someco.com,.raleigh.ibm.com,.some.host.org&#58;8080
</PRE>
<P>
In the above example the server would not go through a proxy for the
following requests:
<UL>
<P><LI>Any requests to domains ending with www.someco.com,
<P><LI>Any requests to domains ending with &#46;raleigh.ibm.com,
such as blugrass.raleigh.ibm.com or keystone.raleigh.ibm.com
<P><LI>Any requests to port 8080 of domains ending with
&#46;some.host.org, such as myname.some.host.org&#58;8080.
(This would not include requests to any other ports of the same domain,
such as myname.some.host.org, which assumes the default port 80.)
</UL>
<P>
<H5><A NAME="Header_534">Initial configuration file setting</A></H5>
None.
<P>
<H3><A NAME="HDRNOCACH" HREF="#PToC_535">NoCaching - Do not cache files with URLs that match a template</A></H3>
<P>
Use this directive to specify that the server should not cache
files with URLs matching the given template.
You can have multiple occurrences of this directive
in the configuration file.
Include a separate directive for each template.
The URL template must include the protocol.
<P>
<H5><A NAME="Header_536">Example</A></H5>
<PRE>
   NoCaching http&#58;//joke/*
</PRE>
<P>
<H5><A NAME="Header_537">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRSOCKSER" HREF="#PToC_538">SocksServer - Specify a Socks server through which the proxy will pass requests</A></H3>
<P>
Use this directive to specify the IP address or host name of the
Socks server through which this proxy will be passing requests.
<P>
<H5><A NAME="Header_539">Format</A></H5>
<PRE>
   SocksServer <VAR>SocksServer</VAR> <VAR>SocksNameServer</VAR>
</PRE>
where <VAR>SocksServer</VAR> is the IP address or the host name
of the Socks server to which the proxy should be chained, and
<VAR>SocksNameServer</VAR> is the IP address or host name
of the Socks Name Server.
<P>
<H5><A NAME="Header_540">Example</A></H5>
<PRE>
   SocksServer socks.bcd.com socksname.bcd.com
</PRE>
<P>
<H5><A NAME="Header_541">Initial configuration file setting</A></H5>
<P>None.
<P>
<H3><A NAME="HDRWAISPXY" HREF="#PToC_542">wais_proxy - Specify a proxy server for this proxy to connect to for WAIS requests</A></H3>
<P>
If your proxy server is part of a chain of proxies,
use this directive to specify the name of another proxy
that this server should contact for WAIS requests.
<P>
<H5><A NAME="Header_543">Example</A></H5>
<PRE>
   wais_proxy wais://outer.proxy.server/
</PRE>
<P>
<H5><A NAME="Header_544">Initial configuration file setting</A></H5>
<P>None.
<HR>
<H2><A NAME="HDRPERFO" HREF="#PToC_545">Performance settings - Define performance settings</A></H2>
Performance settings
<P>
Use the directives described in this section to
control the performance of your server.
<P>
Each time your server receives a request from a client, it uses
one or two threads to perform the requested action.
(One thread if the server is not performing DNS lookup.
Two threads if the server is performing DNS lookup.)
If no threads are available, the server holds
requests until more threads are available.
The MaxActiveThreads directive specifies the maximum number
of active threads.
<P>
If your server is running at maximum capacity
on a sustained, non-stop basis, the amount of virtual
memory used increases.
This increase is temporary and is alleviated
as the number of requests decline and the server
catches up on servicing requests.
<P>
You can lower the amount of virtual memory used by lowering
the MaxActiveThreads setting.
A good starting point would be half of your current MaxActiveThreads
setting.
Keep in mind when you're lowering MaxActiveThreads
that, when no threads are available, the server holds
requests until more threads are available.
<P>
Use the ServerPriority directive to specify the priority
your operating system gives to the server.
<P>If you see a problem with your performance with your server
being too slow, it could be related to any of the following:
<UL>
<P><LI>Your network speed
<P><LI>The traffic on your LAN
<P><LI>The number of clients requesting from your server
<P><LI>The number of threads set on your server
</UL>
<P>
Use the CacheLocalFile directive to load your most popular
files into the servers memory at startup time.
You can specify the maximum amount of memory and the maximum
number of files for caching with the CacheLocalMaxBytes and
CacheLocalMaxFiles directives.
<P>
Use the PersistTimeout and the MaxPersistRequest directives to
specify the characteristics of a persistent connection.
A persistent connection allows the server to accept multiple requests
and to send responses over the same TCP/IP connection.
Overall throughput is increased because the server
does not have to establish a separate TCP/IP connection for each request
and response.
Also, the TCP/IP connection is used more efficiently
because a client can make multiple requests without waiting for
the response to each request.
<P>
<H3><A NAME="HDRCACHLOF" HREF="#PToC_546">CacheLocalFile - Specify files you want to load in memory at start up</A></H3>
<P>
Use this directive to specify the names of files you want to load
into the server&#39;s memory each time you start the server.
You can have multiple occurrences of this directive
in the configuration file.
Include a separate directive for each file you want to load into memory.
<P>
By keeping your most frequently requested files loaded
in the server&#39;s memory, you can improve
your server&#39;s response time for those files.
For example, if you load your server&#39;s welcome page into memory
at startup, the server can handle requests for the page much more
quickly than if it had to read the file from a disk.
Keep in mind that for each file you load into memory, you are
making that amount of memory unavailable for other uses.
<P>
Before responding to a request for a file
that is stored in memory, the server checks to see
if the file has changed since the server was started.
If the file has changed, the server responds
to the request with the updated file and
deletes the old version from its memory.
To load the new file into memory, you need to restart the server.
<P><B>Notes: </B><OL>
<P><LI>You can use
an asterisk (*) as a wildcard character on the file names.
<P><LI>File name matching
is not recursive.  Only files in the specified directory will
be cached.  No files in subdirectories are affected.
</OL>
<P>
<H5><A NAME="Header_547">Example</A></H5>
<P>To cache a specific file
<PRE>
   CacheLocalFile   d&#58;\www\html\index.html
</PRE>
<P>To cache all .html files in the powerco directory
<PRE>
   CacheLocalFile   d&#58;\www\powerco\*.html
</PRE>
<P>
<H5><A NAME="Header_548">Default</A></H5>
<P>The default configuration includes CacheLocalFile
directives for the HTML and graphics files
that make up the server's Front Page.
<P>
<H3><A NAME="HDRCACHMXB" HREF="#PToC_549">CacheLocalMaxBytes - Specify maximum amount of memory to use for file caching</A></H3>
<P>
Use this directive to specify the maximum amount of memory you want to
allow for file caching.  You can specify the memory in
kilobytes (K) or megabytes (M).  You must still specify the files
that you want cached with the CacheLocalFiles directive.
<P><B>Note: </B>CacheLocalMaxBytes can help limit your cache size
when you are using the wildcard character to specify the
files on the CacheLocalBytes directive.
<P>
<H5><A NAME="Header_550">Example</A></H5>
<PRE>
   CacheLocalMaxBytes   5K
</PRE>
<P>
<H5><A NAME="Header_551">Default</A></H5>
<PRE>
   CacheLocalMaxBytes   2M
</PRE>
<P>
<H3><A NAME="HDRCACHMXF" HREF="#PToC_552">CacheLocalMaxFiles - Specify the maximum number of files for caching</A></H3>
<P>
<P>
Use this directive to specify the maximum number of files you want to
be cached at one time. You must still use
the CacheLocalFiles directive to indicate which files you want cached.
<P><B>Note: </B>CacheLocalMaxFiles can help limit your cache size
when you are using the wildcard character to specify the
files on the CacheLocalFiles directive.
<P>
<H5><A NAME="Header_553">Example</A></H5>
<PRE>
   CacheLocalMaxFiles   150
</PRE>
<P>
<H5><A NAME="Header_554">Default</A></H5>
<PRE>
   CacheLocalMaxBytes   200
</PRE>
<P>
<H3><A NAME="HDRLVLOCCA" HREF="#PToC_555">LiveLocalCache - Specify whether the cache is updated when a cached file is modified</A></H3>
<P>
Use this directive to specify whether or not the cache is updated when
a cached file is modified.
Specify ON if you want users requesting a cached file to get the
file with the latest updates.
OFF is the high performance setting.
<P>
<H5><A NAME="Header_556">Initial configuration file setting</A></H5>
<PRE>
   LiveLocalCache off
</PRE>
<P>
<H5><A NAME="Header_557">Program default setting</A></H5>
<PRE>
   LiveLocalCache off
</PRE>
<P>
<H3><A NAME="HDRMAXACTH" HREF="#PToC_558">MaxActiveThreads - Specify the maximum number of threads to have active</A></H3>
<P>Use this directive to set the maximum number of
threads that you want to have active at one time.
If the maximum is reached, the server holds new requests until
another request finishes and threads become available.
Generally, the more power your machine has,
the higher the value you should use for this directive.
If your machine starts to spend too much time on overhead tasks,
such as swapping memory, try reducing this value.
The recommended value is 40.
Unpredictable results may occur if this value is exceeded.
<P>
<H5><A NAME="Header_559">Example</A></H5>
<PRE>
   MaxActiveThreads   49
</PRE>
<PRE>
   MaxActiveThreads   35
</PRE>
<P>
<H5><A NAME="Header_560">Initial configuration file setting</A></H5>
<PRE>
   MaxActiveThreads   40
</PRE>
<P>
<H3><A NAME="HDRSRVPRIO" HREF="#PToC_561">ServerPriority - Specify the priority you want your server to have on your system</A></H3>
<P>
Use this directive to specify a priority class
for the Internet Connection Secure Server.
The operating system uses priority classes to determine
which processes have priority over others.
<P>
Valid values are:
<UL COMPACT>
<LI>0 - no priority
<LI>1 - maximum priority as a normal process
<LI>2 - maximum priority as a foreground server process
</UL>
<P>
You may want to use a value of <TT>0</TT> if the machine your server
is running on is also processing other types of requests.
<P>
<H5><A NAME="Header_562">Example</A></H5>
<PRE>
   ServerPriority   0
</PRE>
<P>
<H5><A NAME="Header_563">Default:</A></H5>
<PRE>
   ServerPriority   1
</PRE>
<P>
<H3><A NAME="HDRMAXPERS" HREF="#PToC_564">MaxPersistRequest - Specify the maximum number of requests to receive on a persistent connection</A></H3>
<P>
Use this directive to specify the maximum number of requests the server
should receive on a persistent connection.  When determining this number,
be sure to consider the number of images used in your pages.  Each image
requires a separate request.
<P>
The format of this directive is:
<P>
<PRE>
MaxPersistRequest <VAR>number</VAR>
</PRE>
<P>
<VAR>number</VAR> is the number of requests the server should receive for
a persistent connection.
<P>
<H5><A NAME="Header_565">Initial configuration file setting:</A></H5>
<PRE>
   MaxPersistRequest 5
</PRE>
<P>
<H5><A NAME="Header_566">Program default setting:</A></H5>
<PRE>
   MaxPersistRequest 5
</PRE>
<P>
<H3><A NAME="HDRPERSIST" HREF="#PToC_567">PersistTimeout - Specify time to wait for the client to send another request</A></H3>
<P>
Use this directive to specify the amount of time the server should wait
between client requests before cancelling a persistent
connection.
<P>
The server uses a different timeout,
the input timeout, to determine how long to
wait for the client to send the first request after the connection
is established.
For more information on the input timeout, see <A HREF="#HDRINPTIMO">"InputTimeout - Specify input timeout setting"</A>.
<P>
After the server sends its first
response, it uses the persistent timeout to determine how long it
should wait for each subsequent request before cancelling the persistent
connection.
<P>
The format of this directive is:
<P>
<PRE>
PersistTimeout  <VAR>time</VAR>
</PRE>
<P>
<VAR>time</VAR> can be any valid time increment, but usually will be
seconds or minutes
<P>
<H5><A NAME="Header_568">Initial configuration file setting:</A></H5>
<PRE>
   PersistTimeout 1 minutes
</PRE>
<P>
<H5><A NAME="Header_569">Program default setting:</A></H5>
<PRE>
   PersistTimeout 1 minutes
</PRE>
<P>
<H3><A NAME="HDRUSEACLS" HREF="#PToC_570">UseACLs - Specify whether ACL files will be checked</A></H3>
<P>
Use this directive to specify whether the ACL files
with be checked for file protection.
Set this directive to never or protect only
for better server performance.
The format of the directive is:
<PRE>
   UseACLs <VAR>setting</VAR>
</PRE>
<P>
The <VAR>setting</VAR> can have a value of always, protect only, or never.
<DL>
<P><DT>always
<P><DD>The server will always look for an ACL file on every file request.
<P><DT>protect only
<P><DD>The server will only look for an ACL file when the file request is
for a file that is covered by a protection statement.
<P><DT>never
<P><DD>The server will never look for an ACL file on a file request.
</DL>
<P>
<H5><A NAME="Header_571">Example</A></H5>
<PRE>
   UseACLs protectonly
</PRE>
<P>
<H5><A NAME="Header_572">Initial configuration file setting</A></H5>
<PRE>
   UseACLs always
</PRE>
<P>
<H3><A NAME="HDRUSEMETA" HREF="#PToC_573">UseMetaFiles - Specify whether meta files will be used</A></H3>
<P>
Use this directive to specify whether the meta files used by the server.
Set this directive to off for better server performance.
The format of the directive is:
<PRE>
   UseMetaFiles <VAR>setting</VAR>
</PRE>
<P>
The <VAR>setting</VAR> can have a value of on or off.
<DL>
<P><DT>on
<P><DD>The server will always use meta files.
<P><DT>off
<P><DD>The server will not use meta files.
</DL>
<P>
<H5><A NAME="Header_574">Example</A></H5>
<PRE>
   UseMetaFiles off
</PRE>
<P>
<H5><A NAME="Header_575">Initial configuration file setting</A></H5>
<PRE>
   UseMetaFiles on
</PRE>
<HR>
<H2><A NAME="HDRSYSMGT" HREF="#PToC_576">System Management - Define system management settings</A></H2>
System Management
<P>
Use the directives described in this section to define settings
used to monitor and manage the health, throughput, and activity
of your servers.
<P>
<H3><A NAME="HDRSCOMNAM" HREF="#PToC_577">SNMPCommunityName - Providing a security password for SNMP</A></H3>
<P>
Use this directive to define the password between the Internet Connection Secure Server
DPI subagent and the SNMP agent.
The SNMP community name authorizes a user to view the performance
variables monitored by SNMP for a particular community of servers.
The system administrator defines which variables from which
servers can be viewed when a password is entered.
If you change this value, you must also add the new community name
to the SystemView Agent
SNMP Configuration Notebook.
For more information about creating a community name,
refer to <A HREF="icswg010.html#HDRSNMPPWD">"Providing a security password for SNMP"</A>.
<P>
The form of the directive is:
<PRE>
SNMPCommunityName <VAR>com_nam</VAR>
</PRE>
<P>
<H5><A NAME="Header_578">Example</A></H5>
<PRE>
SNMPCommunityName public
</PRE>
<P>
<H5><A NAME="Header_579">Initial configuration file setting</A></H5>
<PRE>
SNMPCommunityName public
</PRE>
<P>
<H5><A NAME="Header_580">Program default setting</A></H5>
<PRE>
SNMPCommunityName public
</PRE>
<P>
<H3><A NAME="HDRWEBMEMA" HREF="#PToC_581">WebMasterEmail - Creating an e-mail address to receive SNMP problem reports</A></H3>
<P>
Use this directive to create an e-mail address
to receive SNMP problem reports.
The default mail address is <TT>webmaster</TT>.
<P>
The form of the directive is:
<PRE>
WebMasterEmail <VAR>webmastermailaddress</VAR>
</PRE>
<P>
<H5><A NAME="Header_582">Example</A></H5>
<PRE>
WebMasterEmail webmaster@computer.com
</PRE>
<P>
<H5><A NAME="Header_583">Initial configuration file setting</A></H5>
<PRE>
WebMasterEmail webmaster
</PRE>
<P><HR><B>&#91; <A HREF="#Top_Of_Page">Top of Page</A> &#124; <A HREF="icswg004.html">Previous Page</A> &#124; <A HREF="icswg006.html">Next Page</A> &#124; <A HREF="icswgmst.html#ToC">Table of Contents</A> &#93;</B>
<A NAME=Bot_Of_Page>&nbsp;</A>
</BODY></HTML>

</DOC>